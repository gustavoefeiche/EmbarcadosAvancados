
niosHello.elf:     file format elf32-littlenios2
niosHello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005b5c memsz 0x00005b5c flags r-x
    LOAD off    0x0000704c vaddr 0x0004004c paddr 0x00025b7c align 2**12
         filesz 0x00001a6c memsz 0x00001bc8 flags rw-
    LOAD off    0x00009000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000594c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00040000  00040000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0004004c  00025b7c  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00041ab8  000275e8  00008ab8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  000275e8  000275e8  0000904c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00041c14  00041c14  0000904c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a70  00000000  00000000  00009070  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016882  00000000  00000000  00009ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006219  00000000  00000000  00020362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006b23  00000000  00000000  0002657b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001624  00000000  00000000  0002d0a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002862  00000000  00000000  0002e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00030f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00035a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000386c2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000386c5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000386d1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000386d2  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000386d3  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000386de  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000386e9  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  000386f4  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000057  00000000  00000000  000386fd  2**0
                  CONTENTS, READONLY
 27 .jdi          0000501a  00000000  00000000  00038754  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041875  00000000  00000000  0003d76e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
0004004c l    d  .rwdata	00000000 .rwdata
00041ab8 l    d  .bss	00000000 .bss
000275e8 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00041c14 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosHello_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020568 l     F .text	00000008 __fp_unlock
0002057c l     F .text	0000019c __sinit.part.1
00020718 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000231e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000232f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023320 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00023594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002367c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023768 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023944 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00041aac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023be8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023d24 l     F .text	00000034 alt_dev_reg
00040a20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023ffc l     F .text	0000020c altera_avalon_jtag_uart_irq
00024208 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024ae4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024f44 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000250a4 l     F .text	0000003c alt_get_errno
000250e0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00041ae8 g     O .bss	00000004 alt_instruction_exception_handler
00022fd8 g     F .text	00000054 _isatty_r
00023880 g     F .text	0000007c alt_main
000203fc g     F .text	000000c0 _puts_r
00041b14 g     O .bss	00000100 alt_irq
00022d00 g     F .text	00000060 _lseek_r
00025b7c g       *ABS*	00000000 __flash_rwdata_start
00041c14 g       *ABS*	00000000 __alt_heap_start
000222b4 g     F .text	0000005c __sseek
000208c8 g     F .text	00000010 __sinit
00020720 g     F .text	00000078 __sfmoreglue
00023920 g     F .text	00000024 __malloc_unlock
000219a0 g     F .text	0000015c memmove
000208b0 g     F .text	00000018 _cleanup
00041ab8 g     O .bss	00000004 n
000254cc g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00041abc g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022f7c g     F .text	0000005c _fstat_r
00041acc g     O .bss	00000004 errno
00022230 g     F .text	00000008 __seofread
00041ad8 g     O .bss	00000004 alt_argv
00049a80 g       *ABS*	00000000 _gp
00023bb8 g     F .text	00000030 usleep
000408a0 g     O .rwdata	00000180 alt_fd_list
000254f0 g     F .text	00000090 alt_find_dev
00021858 g     F .text	00000148 memcpy
00020570 g     F .text	0000000c _cleanup_r
00025028 g     F .text	0000007c alt_io_redirect
00025b7c g       *ABS*	00000000 __DTOR_END__
000204bc g     F .text	00000014 puts
0002574c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00024400 g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023124 g     F .text	00000064 .hidden __udivsi3
000235d0 g     F .text	000000ac isatty
00041ac8 g     O .bss	00000004 __malloc_top_pad
00020918 g     F .text	000004c8 __sfvwrite_r
00022188 g     F .text	00000054 _sbrk_r
00022f1c g     F .text	00000060 _read_r
00041aa0 g     O .rwdata	00000004 alt_max_fd
00022520 g     F .text	000000f0 _fclose_r
0002289c g     F .text	00000030 fflush
00041ac4 g     O .bss	00000004 __malloc_max_sbrked_mem
00023414 g     F .text	00000180 alt_irq_register
000237a4 g     F .text	000000dc lseek
00041a80 g     O .rwdata	00000004 _global_impure_ptr
00021c24 g     F .text	00000564 _realloc_r
00041c14 g       *ABS*	00000000 __bss_end
00024e54 g     F .text	000000f0 alt_iic_isr_register
000253c4 g     F .text	00000108 alt_tick
000208e8 g     F .text	00000018 __fp_lock_all
00024e08 g     F .text	0000004c alt_ic_irq_enabled
00025328 g     F .text	0000009c alt_alarm_stop
00041ad0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00040878 g     O .rwdata	00000028 alt_dev_null
00024ac4 g     F .text	00000020 alt_dcache_flush_all
00041ab8 g       *ABS*	00000000 __ram_rwdata_end
00041a98 g     O .rwdata	00000008 alt_dev_list
00023c24 g     F .text	00000100 write
0004004c g       *ABS*	00000000 __ram_rodata_end
0002335c g     F .text	000000b8 fstat
00023188 g     F .text	00000058 .hidden __umodsi3
00041c14 g       *ABS*	00000000 end
00023f3c g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000202cc g     F .text	00000064 init_pio
00025b7c g       *ABS*	00000000 __CTOR_LIST__
00048000 g       *ABS*	00000000 __alt_stack_pointer
0002461c g     F .text	00000224 altera_avalon_jtag_uart_write
000208d8 g     F .text	00000004 __sfp_lock_acquire
00021774 g     F .text	000000e4 memchr
000229f0 g     F .text	00000310 _free_r
000259c8 g     F .text	00000180 __call_exitprocs
00041a88 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00041ae0 g     O .bss	00000004 _alt_tick_rate
00041ae4 g     O .bss	00000004 _alt_nticks
00023980 g     F .text	00000104 read
00023d90 g     F .text	00000048 alt_sys_init
000258b0 g     F .text	00000118 __register_exitproc
000242a8 g     F .text	00000068 altera_avalon_jtag_uart_close
000203d4 g     F .text	00000028 .hidden __mulsi3
0004004c g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00041aec g     O .bss	00000028 __malloc_current_mallinfo
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00023dd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025688 g     F .text	000000c4 alt_get_fd
0002496c g     F .text	00000158 alt_busy_sleep
000224cc g     F .text	00000054 _close_r
00025834 g     F .text	0000007c memcmp
00023e98 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00041c14 g       *ABS*	00000000 __alt_stack_base
00023ee8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022378 g     F .text	00000154 __swsetup_r
00020798 g     F .text	00000118 __sfp
00040470 g     O .rwdata	00000408 __malloc_av_
000208e4 g     F .text	00000004 __sinit_lock_release
000221dc g     F .text	00000054 __sread
00025580 g     F .text	00000108 alt_find_file
00024b20 g     F .text	000000a4 alt_dev_llist_insert
000238fc g     F .text	00000024 __malloc_lock
00023b08 g     F .text	000000b0 sbrk
00022840 g     F .text	0000005c _fflush_r
00041ab8 g       *ABS*	00000000 __bss_start
00021afc g     F .text	00000128 memset
00020330 g     F .text	000000a4 main
00041adc g     O .bss	00000004 alt_envp
00041ac0 g     O .bss	00000004 __malloc_max_total_mem
00023e38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022310 g     F .text	00000008 __sclose
00048000 g       *ABS*	00000000 __alt_heap_limit
00022610 g     F .text	00000014 fclose
00020f68 g     F .text	0000080c _malloc_r
00041aa4 g     O .rwdata	00000004 alt_errno
00020de0 g     F .text	000000c4 _fwalk
0002302c g     F .text	00000084 .hidden __divsi3
000228cc g     F .text	00000124 _malloc_trim_r
00025b7c g       *ABS*	00000000 __CTOR_END__
00040000 g       *ABS*	00000000 __flash_rodata_start
00025b7c g       *ABS*	00000000 __DTOR_LIST__
00023d58 g     F .text	00000038 alt_irq_init
00023a84 g     F .text	00000084 alt_release_fd
000257e8 g     F .text	00000014 atexit
00022318 g     F .text	00000060 _write_r
00041a84 g     O .rwdata	00000004 _impure_ptr
00041ad4 g     O .bss	00000004 alt_argc
00022624 g     F .text	0000021c __sflush_r
00024c24 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020900 g     F .text	00000018 __fp_unlock_all
00041a90 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024ca4 g     F .text	00000050 alt_ic_isr_register
00041ab8 g       *ABS*	00000000 _edata
00041c14 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00024310 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00024d7c g     F .text	0000008c alt_ic_irq_disable
00022238 g     F .text	0000007c __swrite
00041a8c g     O .rwdata	00000004 __malloc_trim_threshold
000257fc g     F .text	00000038 exit
00020ea4 g     F .text	000000c4 _fwalk_reent
000230b0 g     F .text	00000074 .hidden __modsi3
00048000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000208dc g     F .text	00000004 __sfp_lock_release
00025b48 g     F .text	00000034 _exit
00024840 g     F .text	0000012c alt_alarm_start
00022d60 g     F .text	000001bc __smakebuf_r
000204d0 g     F .text	00000098 strlen
000251cc g     F .text	0000015c open
00024c84 g     F .text	00000020 alt_icache_flush_all
00041aa8 g     O .rwdata	00000004 alt_priority_mask
00024cf4 g     F .text	00000088 alt_ic_irq_enable
00041ab0 g     O .rwdata	00000008 alt_alarm_list
00024bc4 g     F .text	00000060 _do_ctors
0002026c g     F .text	00000060 handle_button_interrupts
0002321c g     F .text	000000d8 close
000236e4 g     F .text	00000084 alt_load
000208e0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	1086c504 	addi	r2,r2,6932
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	1086c504 	addi	r2,r2,6932
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffd66ac>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffd66a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01a17 	ldw	r2,-32664(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01a17 	ldw	r2,-32664(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   20238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2023c:	d6a6a014 	ori	gp,gp,39552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20244:	1086ae14 	ori	r2,r2,6840

    movhi r3, %hi(__bss_end)
   20248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2024c:	18c70514 	ori	r3,r3,7188

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_gp+0xfffd67d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00236e40 	call	236e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00238800 	call	23880 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <_gp+0xfffd67e8>

0002026c <handle_button_interrupts>:

int n = 0;
volatile int edge_capture;

void handle_button_interrupts(void* context, alt_u32 id)
{
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	df000315 	stw	fp,12(sp)
   20274:	df000304 	addi	fp,sp,12
   20278:	e13ffe15 	stw	r4,-8(fp)
   2027c:	e17fff15 	stw	r5,-4(fp)
     /* Cast context to edge_capture's type. It is important that this be
      * declared volatile to avoid unwanted compiler optimization.
      */
     volatile int* edge_capture_ptr = (volatile int*) context;
   20280:	e0bffe17 	ldw	r2,-8(fp)
   20284:	e0bffd15 	stw	r2,-12(fp)
     /* Store the value in the Button's edge capture register in *context. */
     *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
   20288:	00800174 	movhi	r2,5
   2028c:	10a40304 	addi	r2,r2,-28660
   20290:	10c00037 	ldwio	r3,0(r2)
   20294:	e0bffd17 	ldw	r2,-12(fp)
   20298:	10c00015 	stw	r3,0(r2)
     n++;
   2029c:	d0a00e17 	ldw	r2,-32712(gp)
   202a0:	10800044 	addi	r2,r2,1
   202a4:	d0a00e15 	stw	r2,-32712(gp)
     /* Reset the Button's edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0);
   202a8:	0007883a 	mov	r3,zero
   202ac:	00800174 	movhi	r2,5
   202b0:	10a40304 	addi	r2,r2,-28660
   202b4:	10c00035 	stwio	r3,0(r2)
     //printf("%d", *edge_capture_ptr);
     //printf("%d", edge_capture);
}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <init_pio>:

void init_pio()
 {
   202cc:	defffd04 	addi	sp,sp,-12
   202d0:	dfc00215 	stw	ra,8(sp)
   202d4:	df000115 	stw	fp,4(sp)
   202d8:	df000104 	addi	fp,sp,4
     /* Recast the edge_capture pointer to match the alt_irq_register() function
      * prototype. */
     void* edge_capture_ptr = (void*) &edge_capture;
   202dc:	d0a00f04 	addi	r2,gp,-32708
   202e0:	e0bfff15 	stw	r2,-4(fp)
     /* Enable first four interrupts. */
     IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0x1f);
   202e4:	00c007c4 	movi	r3,31
   202e8:	00800174 	movhi	r2,5
   202ec:	10a40204 	addi	r2,r2,-28664
   202f0:	10c00035 	stwio	r3,0(r2)
     /* Reset the edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   202f4:	0007883a 	mov	r3,zero
   202f8:	00800174 	movhi	r2,5
   202fc:	10a40304 	addi	r2,r2,-28660
   20300:	10c00035 	stwio	r3,0(r2)

  /* Register the interrupt handler. */
     alt_irq_register( PIO_1_IRQ, edge_capture_ptr, handle_button_interrupts );
   20304:	018000b4 	movhi	r6,2
   20308:	31809b04 	addi	r6,r6,620
   2030c:	e17fff17 	ldw	r5,-4(fp)
   20310:	01000044 	movi	r4,1
   20314:	00234140 	call	23414 <alt_irq_register>

 }
   20318:	0001883a 	nop
   2031c:	e037883a 	mov	sp,fp
   20320:	dfc00117 	ldw	ra,4(sp)
   20324:	df000017 	ldw	fp,0(sp)
   20328:	dec00204 	addi	sp,sp,8
   2032c:	f800283a 	ret

00020330 <main>:



int main(void){
   20330:	defffd04 	addi	sp,sp,-12
   20334:	dfc00215 	stw	ra,8(sp)
   20338:	df000115 	stw	fp,4(sp)
   2033c:	df000104 	addi	fp,sp,4
  n = 0;
   20340:	d0200e15 	stw	zero,-32712(gp)
  init_pio();
   20344:	00202cc0 	call	202cc <init_pio>
  unsigned int led = 0;
   20348:	e03fff15 	stw	zero,-4(fp)
  int in_values;


  printf("Embarcados++ \n");
   2034c:	01000134 	movhi	r4,4
   20350:	21000004 	addi	r4,r4,0
   20354:	00204bc0 	call	204bc <puts>

  while(1){
	  //printf("%d", edge_capture);

	  edge_capture = IORD_32DIRECT(PIO_1_BASE, 0);
   20358:	00800174 	movhi	r2,5
   2035c:	10a40004 	addi	r2,r2,-28672
   20360:	10800037 	ldwio	r2,0(r2)
   20364:	d0a00f15 	stw	r2,-32708(gp)

	  if(led == 0) {
   20368:	e0bfff17 	ldw	r2,-4(fp)
   2036c:	1000031e 	bne	r2,zero,2037c <main+0x4c>
		  led = 1;
   20370:	00800044 	movi	r2,1
   20374:	e0bfff15 	stw	r2,-4(fp)
   20378:	00000106 	br	20380 <main+0x50>
	  }
	  else {
		  led = 0;
   2037c:	e03fff15 	stw	zero,-4(fp)
	  }

	  if (edge_capture > 15) {
   20380:	d0a00f17 	ldw	r2,-32708(gp)
   20384:	10800410 	cmplti	r2,r2,16
   20388:	10000b1e 	bne	r2,zero,203b8 <main+0x88>
		  if (led) IOWR_32DIRECT(PIO_0_BASE, 0, 0x3F);
   2038c:	e0bfff17 	ldw	r2,-4(fp)
   20390:	10000526 	beq	r2,zero,203a8 <main+0x78>
   20394:	00c00fc4 	movi	r3,63
   20398:	00800174 	movhi	r2,5
   2039c:	10a40404 	addi	r2,r2,-28656
   203a0:	10c00035 	stwio	r3,0(r2)
   203a4:	00000406 	br	203b8 <main+0x88>
		  else IOWR_32DIRECT(PIO_0_BASE, 0, 0x00);
   203a8:	0007883a 	mov	r3,zero
   203ac:	00800174 	movhi	r2,5
   203b0:	10a40404 	addi	r2,r2,-28656
   203b4:	10c00035 	stwio	r3,0(r2)
	  }

	  //printf("\nValue: %d\n", in_values);

	  usleep(4000*edge_capture);
   203b8:	d0a00f17 	ldw	r2,-32708(gp)
   203bc:	0143e804 	movi	r5,4000
   203c0:	1009883a 	mov	r4,r2
   203c4:	00203d40 	call	203d4 <__mulsi3>
   203c8:	1009883a 	mov	r4,r2
   203cc:	0023bb80 	call	23bb8 <usleep>
	  }
   203d0:	003fe106 	br	20358 <_gp+0xfffd68d8>

000203d4 <__mulsi3>:
   203d4:	0005883a 	mov	r2,zero
   203d8:	20000726 	beq	r4,zero,203f8 <__mulsi3+0x24>
   203dc:	20c0004c 	andi	r3,r4,1
   203e0:	2008d07a 	srli	r4,r4,1
   203e4:	18000126 	beq	r3,zero,203ec <__mulsi3+0x18>
   203e8:	1145883a 	add	r2,r2,r5
   203ec:	294b883a 	add	r5,r5,r5
   203f0:	203ffa1e 	bne	r4,zero,203dc <_gp+0xfffd695c>
   203f4:	f800283a 	ret
   203f8:	f800283a 	ret

000203fc <_puts_r>:
   203fc:	defff604 	addi	sp,sp,-40
   20400:	dc000715 	stw	r16,28(sp)
   20404:	2021883a 	mov	r16,r4
   20408:	2809883a 	mov	r4,r5
   2040c:	dc400815 	stw	r17,32(sp)
   20410:	dfc00915 	stw	ra,36(sp)
   20414:	2823883a 	mov	r17,r5
   20418:	00204d00 	call	204d0 <strlen>
   2041c:	10c00044 	addi	r3,r2,1
   20420:	d8800115 	stw	r2,4(sp)
   20424:	00800134 	movhi	r2,4
   20428:	10800404 	addi	r2,r2,16
   2042c:	d8800215 	stw	r2,8(sp)
   20430:	00800044 	movi	r2,1
   20434:	d8800315 	stw	r2,12(sp)
   20438:	00800084 	movi	r2,2
   2043c:	dc400015 	stw	r17,0(sp)
   20440:	d8c00615 	stw	r3,24(sp)
   20444:	dec00415 	stw	sp,16(sp)
   20448:	d8800515 	stw	r2,20(sp)
   2044c:	80000226 	beq	r16,zero,20458 <_puts_r+0x5c>
   20450:	80800e17 	ldw	r2,56(r16)
   20454:	10001426 	beq	r2,zero,204a8 <_puts_r+0xac>
   20458:	81400217 	ldw	r5,8(r16)
   2045c:	2880030b 	ldhu	r2,12(r5)
   20460:	10c8000c 	andi	r3,r2,8192
   20464:	1800061e 	bne	r3,zero,20480 <_puts_r+0x84>
   20468:	29001917 	ldw	r4,100(r5)
   2046c:	00f7ffc4 	movi	r3,-8193
   20470:	10880014 	ori	r2,r2,8192
   20474:	20c6703a 	and	r3,r4,r3
   20478:	2880030d 	sth	r2,12(r5)
   2047c:	28c01915 	stw	r3,100(r5)
   20480:	d9800404 	addi	r6,sp,16
   20484:	8009883a 	mov	r4,r16
   20488:	00209180 	call	20918 <__sfvwrite_r>
   2048c:	1000091e 	bne	r2,zero,204b4 <_puts_r+0xb8>
   20490:	00800284 	movi	r2,10
   20494:	dfc00917 	ldw	ra,36(sp)
   20498:	dc400817 	ldw	r17,32(sp)
   2049c:	dc000717 	ldw	r16,28(sp)
   204a0:	dec00a04 	addi	sp,sp,40
   204a4:	f800283a 	ret
   204a8:	8009883a 	mov	r4,r16
   204ac:	00208c80 	call	208c8 <__sinit>
   204b0:	003fe906 	br	20458 <_gp+0xfffd69d8>
   204b4:	00bfffc4 	movi	r2,-1
   204b8:	003ff606 	br	20494 <_gp+0xfffd6a14>

000204bc <puts>:
   204bc:	00800134 	movhi	r2,4
   204c0:	1086a104 	addi	r2,r2,6788
   204c4:	200b883a 	mov	r5,r4
   204c8:	11000017 	ldw	r4,0(r2)
   204cc:	00203fc1 	jmpi	203fc <_puts_r>

000204d0 <strlen>:
   204d0:	208000cc 	andi	r2,r4,3
   204d4:	10002026 	beq	r2,zero,20558 <strlen+0x88>
   204d8:	20800007 	ldb	r2,0(r4)
   204dc:	10002026 	beq	r2,zero,20560 <strlen+0x90>
   204e0:	2005883a 	mov	r2,r4
   204e4:	00000206 	br	204f0 <strlen+0x20>
   204e8:	10c00007 	ldb	r3,0(r2)
   204ec:	18001826 	beq	r3,zero,20550 <strlen+0x80>
   204f0:	10800044 	addi	r2,r2,1
   204f4:	10c000cc 	andi	r3,r2,3
   204f8:	183ffb1e 	bne	r3,zero,204e8 <_gp+0xfffd6a68>
   204fc:	10c00017 	ldw	r3,0(r2)
   20500:	01ffbff4 	movhi	r7,65279
   20504:	39ffbfc4 	addi	r7,r7,-257
   20508:	00ca303a 	nor	r5,zero,r3
   2050c:	01a02074 	movhi	r6,32897
   20510:	19c7883a 	add	r3,r3,r7
   20514:	31a02004 	addi	r6,r6,-32640
   20518:	1946703a 	and	r3,r3,r5
   2051c:	1986703a 	and	r3,r3,r6
   20520:	1800091e 	bne	r3,zero,20548 <strlen+0x78>
   20524:	10800104 	addi	r2,r2,4
   20528:	10c00017 	ldw	r3,0(r2)
   2052c:	19cb883a 	add	r5,r3,r7
   20530:	00c6303a 	nor	r3,zero,r3
   20534:	28c6703a 	and	r3,r5,r3
   20538:	1986703a 	and	r3,r3,r6
   2053c:	183ff926 	beq	r3,zero,20524 <_gp+0xfffd6aa4>
   20540:	00000106 	br	20548 <strlen+0x78>
   20544:	10800044 	addi	r2,r2,1
   20548:	10c00007 	ldb	r3,0(r2)
   2054c:	183ffd1e 	bne	r3,zero,20544 <_gp+0xfffd6ac4>
   20550:	1105c83a 	sub	r2,r2,r4
   20554:	f800283a 	ret
   20558:	2005883a 	mov	r2,r4
   2055c:	003fe706 	br	204fc <_gp+0xfffd6a7c>
   20560:	0005883a 	mov	r2,zero
   20564:	f800283a 	ret

00020568 <__fp_unlock>:
   20568:	0005883a 	mov	r2,zero
   2056c:	f800283a 	ret

00020570 <_cleanup_r>:
   20570:	014000b4 	movhi	r5,2
   20574:	29494804 	addi	r5,r5,9504
   20578:	0020ea41 	jmpi	20ea4 <_fwalk_reent>

0002057c <__sinit.part.1>:
   2057c:	defff704 	addi	sp,sp,-36
   20580:	00c000b4 	movhi	r3,2
   20584:	dfc00815 	stw	ra,32(sp)
   20588:	ddc00715 	stw	r23,28(sp)
   2058c:	dd800615 	stw	r22,24(sp)
   20590:	dd400515 	stw	r21,20(sp)
   20594:	dd000415 	stw	r20,16(sp)
   20598:	dcc00315 	stw	r19,12(sp)
   2059c:	dc800215 	stw	r18,8(sp)
   205a0:	dc400115 	stw	r17,4(sp)
   205a4:	dc000015 	stw	r16,0(sp)
   205a8:	18c15c04 	addi	r3,r3,1392
   205ac:	24000117 	ldw	r16,4(r4)
   205b0:	20c00f15 	stw	r3,60(r4)
   205b4:	2080bb04 	addi	r2,r4,748
   205b8:	00c000c4 	movi	r3,3
   205bc:	20c0b915 	stw	r3,740(r4)
   205c0:	2080ba15 	stw	r2,744(r4)
   205c4:	2000b815 	stw	zero,736(r4)
   205c8:	05c00204 	movi	r23,8
   205cc:	00800104 	movi	r2,4
   205d0:	2025883a 	mov	r18,r4
   205d4:	b80d883a 	mov	r6,r23
   205d8:	81001704 	addi	r4,r16,92
   205dc:	000b883a 	mov	r5,zero
   205e0:	80000015 	stw	zero,0(r16)
   205e4:	80000115 	stw	zero,4(r16)
   205e8:	80000215 	stw	zero,8(r16)
   205ec:	8080030d 	sth	r2,12(r16)
   205f0:	80001915 	stw	zero,100(r16)
   205f4:	8000038d 	sth	zero,14(r16)
   205f8:	80000415 	stw	zero,16(r16)
   205fc:	80000515 	stw	zero,20(r16)
   20600:	80000615 	stw	zero,24(r16)
   20604:	0021afc0 	call	21afc <memset>
   20608:	058000b4 	movhi	r22,2
   2060c:	94400217 	ldw	r17,8(r18)
   20610:	054000b4 	movhi	r21,2
   20614:	050000b4 	movhi	r20,2
   20618:	04c000b4 	movhi	r19,2
   2061c:	b5887704 	addi	r22,r22,8668
   20620:	ad488e04 	addi	r21,r21,8760
   20624:	a508ad04 	addi	r20,r20,8884
   20628:	9cc8c404 	addi	r19,r19,8976
   2062c:	85800815 	stw	r22,32(r16)
   20630:	85400915 	stw	r21,36(r16)
   20634:	85000a15 	stw	r20,40(r16)
   20638:	84c00b15 	stw	r19,44(r16)
   2063c:	84000715 	stw	r16,28(r16)
   20640:	00800284 	movi	r2,10
   20644:	8880030d 	sth	r2,12(r17)
   20648:	00800044 	movi	r2,1
   2064c:	b80d883a 	mov	r6,r23
   20650:	89001704 	addi	r4,r17,92
   20654:	000b883a 	mov	r5,zero
   20658:	88000015 	stw	zero,0(r17)
   2065c:	88000115 	stw	zero,4(r17)
   20660:	88000215 	stw	zero,8(r17)
   20664:	88001915 	stw	zero,100(r17)
   20668:	8880038d 	sth	r2,14(r17)
   2066c:	88000415 	stw	zero,16(r17)
   20670:	88000515 	stw	zero,20(r17)
   20674:	88000615 	stw	zero,24(r17)
   20678:	0021afc0 	call	21afc <memset>
   2067c:	94000317 	ldw	r16,12(r18)
   20680:	00800484 	movi	r2,18
   20684:	8c400715 	stw	r17,28(r17)
   20688:	8d800815 	stw	r22,32(r17)
   2068c:	8d400915 	stw	r21,36(r17)
   20690:	8d000a15 	stw	r20,40(r17)
   20694:	8cc00b15 	stw	r19,44(r17)
   20698:	8080030d 	sth	r2,12(r16)
   2069c:	00800084 	movi	r2,2
   206a0:	80000015 	stw	zero,0(r16)
   206a4:	80000115 	stw	zero,4(r16)
   206a8:	80000215 	stw	zero,8(r16)
   206ac:	80001915 	stw	zero,100(r16)
   206b0:	8080038d 	sth	r2,14(r16)
   206b4:	80000415 	stw	zero,16(r16)
   206b8:	80000515 	stw	zero,20(r16)
   206bc:	80000615 	stw	zero,24(r16)
   206c0:	b80d883a 	mov	r6,r23
   206c4:	000b883a 	mov	r5,zero
   206c8:	81001704 	addi	r4,r16,92
   206cc:	0021afc0 	call	21afc <memset>
   206d0:	00800044 	movi	r2,1
   206d4:	84000715 	stw	r16,28(r16)
   206d8:	85800815 	stw	r22,32(r16)
   206dc:	85400915 	stw	r21,36(r16)
   206e0:	85000a15 	stw	r20,40(r16)
   206e4:	84c00b15 	stw	r19,44(r16)
   206e8:	90800e15 	stw	r2,56(r18)
   206ec:	dfc00817 	ldw	ra,32(sp)
   206f0:	ddc00717 	ldw	r23,28(sp)
   206f4:	dd800617 	ldw	r22,24(sp)
   206f8:	dd400517 	ldw	r21,20(sp)
   206fc:	dd000417 	ldw	r20,16(sp)
   20700:	dcc00317 	ldw	r19,12(sp)
   20704:	dc800217 	ldw	r18,8(sp)
   20708:	dc400117 	ldw	r17,4(sp)
   2070c:	dc000017 	ldw	r16,0(sp)
   20710:	dec00904 	addi	sp,sp,36
   20714:	f800283a 	ret

00020718 <__fp_lock>:
   20718:	0005883a 	mov	r2,zero
   2071c:	f800283a 	ret

00020720 <__sfmoreglue>:
   20720:	defffc04 	addi	sp,sp,-16
   20724:	dc800215 	stw	r18,8(sp)
   20728:	2825883a 	mov	r18,r5
   2072c:	dc000015 	stw	r16,0(sp)
   20730:	01401a04 	movi	r5,104
   20734:	2021883a 	mov	r16,r4
   20738:	913fffc4 	addi	r4,r18,-1
   2073c:	dfc00315 	stw	ra,12(sp)
   20740:	dc400115 	stw	r17,4(sp)
   20744:	00203d40 	call	203d4 <__mulsi3>
   20748:	8009883a 	mov	r4,r16
   2074c:	11401d04 	addi	r5,r2,116
   20750:	1023883a 	mov	r17,r2
   20754:	0020f680 	call	20f68 <_malloc_r>
   20758:	1021883a 	mov	r16,r2
   2075c:	10000726 	beq	r2,zero,2077c <__sfmoreglue+0x5c>
   20760:	11000304 	addi	r4,r2,12
   20764:	10000015 	stw	zero,0(r2)
   20768:	14800115 	stw	r18,4(r2)
   2076c:	11000215 	stw	r4,8(r2)
   20770:	89801a04 	addi	r6,r17,104
   20774:	000b883a 	mov	r5,zero
   20778:	0021afc0 	call	21afc <memset>
   2077c:	8005883a 	mov	r2,r16
   20780:	dfc00317 	ldw	ra,12(sp)
   20784:	dc800217 	ldw	r18,8(sp)
   20788:	dc400117 	ldw	r17,4(sp)
   2078c:	dc000017 	ldw	r16,0(sp)
   20790:	dec00404 	addi	sp,sp,16
   20794:	f800283a 	ret

00020798 <__sfp>:
   20798:	defffb04 	addi	sp,sp,-20
   2079c:	dc000015 	stw	r16,0(sp)
   207a0:	04000134 	movhi	r16,4
   207a4:	8406a004 	addi	r16,r16,6784
   207a8:	dcc00315 	stw	r19,12(sp)
   207ac:	2027883a 	mov	r19,r4
   207b0:	81000017 	ldw	r4,0(r16)
   207b4:	dfc00415 	stw	ra,16(sp)
   207b8:	dc800215 	stw	r18,8(sp)
   207bc:	20800e17 	ldw	r2,56(r4)
   207c0:	dc400115 	stw	r17,4(sp)
   207c4:	1000021e 	bne	r2,zero,207d0 <__sfp+0x38>
   207c8:	002057c0 	call	2057c <__sinit.part.1>
   207cc:	81000017 	ldw	r4,0(r16)
   207d0:	2480b804 	addi	r18,r4,736
   207d4:	047fffc4 	movi	r17,-1
   207d8:	91000117 	ldw	r4,4(r18)
   207dc:	94000217 	ldw	r16,8(r18)
   207e0:	213fffc4 	addi	r4,r4,-1
   207e4:	20000a16 	blt	r4,zero,20810 <__sfp+0x78>
   207e8:	8080030f 	ldh	r2,12(r16)
   207ec:	10000c26 	beq	r2,zero,20820 <__sfp+0x88>
   207f0:	80c01d04 	addi	r3,r16,116
   207f4:	00000206 	br	20800 <__sfp+0x68>
   207f8:	18bfe60f 	ldh	r2,-104(r3)
   207fc:	10000826 	beq	r2,zero,20820 <__sfp+0x88>
   20800:	213fffc4 	addi	r4,r4,-1
   20804:	1c3ffd04 	addi	r16,r3,-12
   20808:	18c01a04 	addi	r3,r3,104
   2080c:	247ffa1e 	bne	r4,r17,207f8 <_gp+0xfffd6d78>
   20810:	90800017 	ldw	r2,0(r18)
   20814:	10001d26 	beq	r2,zero,2088c <__sfp+0xf4>
   20818:	1025883a 	mov	r18,r2
   2081c:	003fee06 	br	207d8 <_gp+0xfffd6d58>
   20820:	00bfffc4 	movi	r2,-1
   20824:	8080038d 	sth	r2,14(r16)
   20828:	00800044 	movi	r2,1
   2082c:	8080030d 	sth	r2,12(r16)
   20830:	80001915 	stw	zero,100(r16)
   20834:	80000015 	stw	zero,0(r16)
   20838:	80000215 	stw	zero,8(r16)
   2083c:	80000115 	stw	zero,4(r16)
   20840:	80000415 	stw	zero,16(r16)
   20844:	80000515 	stw	zero,20(r16)
   20848:	80000615 	stw	zero,24(r16)
   2084c:	01800204 	movi	r6,8
   20850:	000b883a 	mov	r5,zero
   20854:	81001704 	addi	r4,r16,92
   20858:	0021afc0 	call	21afc <memset>
   2085c:	8005883a 	mov	r2,r16
   20860:	80000c15 	stw	zero,48(r16)
   20864:	80000d15 	stw	zero,52(r16)
   20868:	80001115 	stw	zero,68(r16)
   2086c:	80001215 	stw	zero,72(r16)
   20870:	dfc00417 	ldw	ra,16(sp)
   20874:	dcc00317 	ldw	r19,12(sp)
   20878:	dc800217 	ldw	r18,8(sp)
   2087c:	dc400117 	ldw	r17,4(sp)
   20880:	dc000017 	ldw	r16,0(sp)
   20884:	dec00504 	addi	sp,sp,20
   20888:	f800283a 	ret
   2088c:	01400104 	movi	r5,4
   20890:	9809883a 	mov	r4,r19
   20894:	00207200 	call	20720 <__sfmoreglue>
   20898:	90800015 	stw	r2,0(r18)
   2089c:	103fde1e 	bne	r2,zero,20818 <_gp+0xfffd6d98>
   208a0:	00800304 	movi	r2,12
   208a4:	98800015 	stw	r2,0(r19)
   208a8:	0005883a 	mov	r2,zero
   208ac:	003ff006 	br	20870 <_gp+0xfffd6df0>

000208b0 <_cleanup>:
   208b0:	00800134 	movhi	r2,4
   208b4:	1086a004 	addi	r2,r2,6784
   208b8:	11000017 	ldw	r4,0(r2)
   208bc:	014000b4 	movhi	r5,2
   208c0:	29494804 	addi	r5,r5,9504
   208c4:	0020ea41 	jmpi	20ea4 <_fwalk_reent>

000208c8 <__sinit>:
   208c8:	20800e17 	ldw	r2,56(r4)
   208cc:	10000126 	beq	r2,zero,208d4 <__sinit+0xc>
   208d0:	f800283a 	ret
   208d4:	002057c1 	jmpi	2057c <__sinit.part.1>

000208d8 <__sfp_lock_acquire>:
   208d8:	f800283a 	ret

000208dc <__sfp_lock_release>:
   208dc:	f800283a 	ret

000208e0 <__sinit_lock_acquire>:
   208e0:	f800283a 	ret

000208e4 <__sinit_lock_release>:
   208e4:	f800283a 	ret

000208e8 <__fp_lock_all>:
   208e8:	00800134 	movhi	r2,4
   208ec:	1086a104 	addi	r2,r2,6788
   208f0:	11000017 	ldw	r4,0(r2)
   208f4:	014000b4 	movhi	r5,2
   208f8:	2941c604 	addi	r5,r5,1816
   208fc:	0020de01 	jmpi	20de0 <_fwalk>

00020900 <__fp_unlock_all>:
   20900:	00800134 	movhi	r2,4
   20904:	1086a104 	addi	r2,r2,6788
   20908:	11000017 	ldw	r4,0(r2)
   2090c:	014000b4 	movhi	r5,2
   20910:	29415a04 	addi	r5,r5,1384
   20914:	0020de01 	jmpi	20de0 <_fwalk>

00020918 <__sfvwrite_r>:
   20918:	30800217 	ldw	r2,8(r6)
   2091c:	10006726 	beq	r2,zero,20abc <__sfvwrite_r+0x1a4>
   20920:	28c0030b 	ldhu	r3,12(r5)
   20924:	defff404 	addi	sp,sp,-48
   20928:	dd400715 	stw	r21,28(sp)
   2092c:	dd000615 	stw	r20,24(sp)
   20930:	dc000215 	stw	r16,8(sp)
   20934:	dfc00b15 	stw	ra,44(sp)
   20938:	df000a15 	stw	fp,40(sp)
   2093c:	ddc00915 	stw	r23,36(sp)
   20940:	dd800815 	stw	r22,32(sp)
   20944:	dcc00515 	stw	r19,20(sp)
   20948:	dc800415 	stw	r18,16(sp)
   2094c:	dc400315 	stw	r17,12(sp)
   20950:	1880020c 	andi	r2,r3,8
   20954:	2821883a 	mov	r16,r5
   20958:	202b883a 	mov	r21,r4
   2095c:	3029883a 	mov	r20,r6
   20960:	10002726 	beq	r2,zero,20a00 <__sfvwrite_r+0xe8>
   20964:	28800417 	ldw	r2,16(r5)
   20968:	10002526 	beq	r2,zero,20a00 <__sfvwrite_r+0xe8>
   2096c:	1880008c 	andi	r2,r3,2
   20970:	a4400017 	ldw	r17,0(r20)
   20974:	10002a26 	beq	r2,zero,20a20 <__sfvwrite_r+0x108>
   20978:	05a00034 	movhi	r22,32768
   2097c:	0027883a 	mov	r19,zero
   20980:	0025883a 	mov	r18,zero
   20984:	b5bf0004 	addi	r22,r22,-1024
   20988:	980d883a 	mov	r6,r19
   2098c:	a809883a 	mov	r4,r21
   20990:	90004626 	beq	r18,zero,20aac <__sfvwrite_r+0x194>
   20994:	900f883a 	mov	r7,r18
   20998:	b480022e 	bgeu	r22,r18,209a4 <__sfvwrite_r+0x8c>
   2099c:	01e00034 	movhi	r7,32768
   209a0:	39ff0004 	addi	r7,r7,-1024
   209a4:	80800917 	ldw	r2,36(r16)
   209a8:	81400717 	ldw	r5,28(r16)
   209ac:	103ee83a 	callr	r2
   209b0:	00805a0e 	bge	zero,r2,20b1c <__sfvwrite_r+0x204>
   209b4:	a0c00217 	ldw	r3,8(r20)
   209b8:	98a7883a 	add	r19,r19,r2
   209bc:	90a5c83a 	sub	r18,r18,r2
   209c0:	1885c83a 	sub	r2,r3,r2
   209c4:	a0800215 	stw	r2,8(r20)
   209c8:	103fef1e 	bne	r2,zero,20988 <_gp+0xfffd6f08>
   209cc:	0005883a 	mov	r2,zero
   209d0:	dfc00b17 	ldw	ra,44(sp)
   209d4:	df000a17 	ldw	fp,40(sp)
   209d8:	ddc00917 	ldw	r23,36(sp)
   209dc:	dd800817 	ldw	r22,32(sp)
   209e0:	dd400717 	ldw	r21,28(sp)
   209e4:	dd000617 	ldw	r20,24(sp)
   209e8:	dcc00517 	ldw	r19,20(sp)
   209ec:	dc800417 	ldw	r18,16(sp)
   209f0:	dc400317 	ldw	r17,12(sp)
   209f4:	dc000217 	ldw	r16,8(sp)
   209f8:	dec00c04 	addi	sp,sp,48
   209fc:	f800283a 	ret
   20a00:	800b883a 	mov	r5,r16
   20a04:	a809883a 	mov	r4,r21
   20a08:	00223780 	call	22378 <__swsetup_r>
   20a0c:	1000ee1e 	bne	r2,zero,20dc8 <__sfvwrite_r+0x4b0>
   20a10:	80c0030b 	ldhu	r3,12(r16)
   20a14:	a4400017 	ldw	r17,0(r20)
   20a18:	1880008c 	andi	r2,r3,2
   20a1c:	103fd61e 	bne	r2,zero,20978 <_gp+0xfffd6ef8>
   20a20:	1880004c 	andi	r2,r3,1
   20a24:	1000421e 	bne	r2,zero,20b30 <__sfvwrite_r+0x218>
   20a28:	0039883a 	mov	fp,zero
   20a2c:	0025883a 	mov	r18,zero
   20a30:	90001a26 	beq	r18,zero,20a9c <__sfvwrite_r+0x184>
   20a34:	1880800c 	andi	r2,r3,512
   20a38:	84c00217 	ldw	r19,8(r16)
   20a3c:	10002126 	beq	r2,zero,20ac4 <__sfvwrite_r+0x1ac>
   20a40:	982f883a 	mov	r23,r19
   20a44:	94c09636 	bltu	r18,r19,20ca0 <__sfvwrite_r+0x388>
   20a48:	1881200c 	andi	r2,r3,1152
   20a4c:	1000a11e 	bne	r2,zero,20cd4 <__sfvwrite_r+0x3bc>
   20a50:	81000017 	ldw	r4,0(r16)
   20a54:	b80d883a 	mov	r6,r23
   20a58:	e00b883a 	mov	r5,fp
   20a5c:	00219a00 	call	219a0 <memmove>
   20a60:	80c00217 	ldw	r3,8(r16)
   20a64:	81000017 	ldw	r4,0(r16)
   20a68:	9005883a 	mov	r2,r18
   20a6c:	1ce7c83a 	sub	r19,r3,r19
   20a70:	25cf883a 	add	r7,r4,r23
   20a74:	84c00215 	stw	r19,8(r16)
   20a78:	81c00015 	stw	r7,0(r16)
   20a7c:	a0c00217 	ldw	r3,8(r20)
   20a80:	e0b9883a 	add	fp,fp,r2
   20a84:	90a5c83a 	sub	r18,r18,r2
   20a88:	18a7c83a 	sub	r19,r3,r2
   20a8c:	a4c00215 	stw	r19,8(r20)
   20a90:	983fce26 	beq	r19,zero,209cc <_gp+0xfffd6f4c>
   20a94:	80c0030b 	ldhu	r3,12(r16)
   20a98:	903fe61e 	bne	r18,zero,20a34 <_gp+0xfffd6fb4>
   20a9c:	8f000017 	ldw	fp,0(r17)
   20aa0:	8c800117 	ldw	r18,4(r17)
   20aa4:	8c400204 	addi	r17,r17,8
   20aa8:	003fe106 	br	20a30 <_gp+0xfffd6fb0>
   20aac:	8cc00017 	ldw	r19,0(r17)
   20ab0:	8c800117 	ldw	r18,4(r17)
   20ab4:	8c400204 	addi	r17,r17,8
   20ab8:	003fb306 	br	20988 <_gp+0xfffd6f08>
   20abc:	0005883a 	mov	r2,zero
   20ac0:	f800283a 	ret
   20ac4:	81000017 	ldw	r4,0(r16)
   20ac8:	80800417 	ldw	r2,16(r16)
   20acc:	11005a36 	bltu	r2,r4,20c38 <__sfvwrite_r+0x320>
   20ad0:	85c00517 	ldw	r23,20(r16)
   20ad4:	95c05836 	bltu	r18,r23,20c38 <__sfvwrite_r+0x320>
   20ad8:	00a00034 	movhi	r2,32768
   20adc:	10bfffc4 	addi	r2,r2,-1
   20ae0:	9009883a 	mov	r4,r18
   20ae4:	1480012e 	bgeu	r2,r18,20aec <__sfvwrite_r+0x1d4>
   20ae8:	1009883a 	mov	r4,r2
   20aec:	b80b883a 	mov	r5,r23
   20af0:	002302c0 	call	2302c <__divsi3>
   20af4:	b80b883a 	mov	r5,r23
   20af8:	1009883a 	mov	r4,r2
   20afc:	00203d40 	call	203d4 <__mulsi3>
   20b00:	81400717 	ldw	r5,28(r16)
   20b04:	80c00917 	ldw	r3,36(r16)
   20b08:	100f883a 	mov	r7,r2
   20b0c:	e00d883a 	mov	r6,fp
   20b10:	a809883a 	mov	r4,r21
   20b14:	183ee83a 	callr	r3
   20b18:	00bfd816 	blt	zero,r2,20a7c <_gp+0xfffd6ffc>
   20b1c:	8080030b 	ldhu	r2,12(r16)
   20b20:	10801014 	ori	r2,r2,64
   20b24:	8080030d 	sth	r2,12(r16)
   20b28:	00bfffc4 	movi	r2,-1
   20b2c:	003fa806 	br	209d0 <_gp+0xfffd6f50>
   20b30:	0027883a 	mov	r19,zero
   20b34:	0011883a 	mov	r8,zero
   20b38:	0039883a 	mov	fp,zero
   20b3c:	0025883a 	mov	r18,zero
   20b40:	90001f26 	beq	r18,zero,20bc0 <__sfvwrite_r+0x2a8>
   20b44:	40005a26 	beq	r8,zero,20cb0 <__sfvwrite_r+0x398>
   20b48:	982d883a 	mov	r22,r19
   20b4c:	94c0012e 	bgeu	r18,r19,20b54 <__sfvwrite_r+0x23c>
   20b50:	902d883a 	mov	r22,r18
   20b54:	81000017 	ldw	r4,0(r16)
   20b58:	80800417 	ldw	r2,16(r16)
   20b5c:	b02f883a 	mov	r23,r22
   20b60:	81c00517 	ldw	r7,20(r16)
   20b64:	1100032e 	bgeu	r2,r4,20b74 <__sfvwrite_r+0x25c>
   20b68:	80c00217 	ldw	r3,8(r16)
   20b6c:	38c7883a 	add	r3,r7,r3
   20b70:	1d801816 	blt	r3,r22,20bd4 <__sfvwrite_r+0x2bc>
   20b74:	b1c03e16 	blt	r22,r7,20c70 <__sfvwrite_r+0x358>
   20b78:	80800917 	ldw	r2,36(r16)
   20b7c:	81400717 	ldw	r5,28(r16)
   20b80:	e00d883a 	mov	r6,fp
   20b84:	da000115 	stw	r8,4(sp)
   20b88:	a809883a 	mov	r4,r21
   20b8c:	103ee83a 	callr	r2
   20b90:	102f883a 	mov	r23,r2
   20b94:	da000117 	ldw	r8,4(sp)
   20b98:	00bfe00e 	bge	zero,r2,20b1c <_gp+0xfffd709c>
   20b9c:	9de7c83a 	sub	r19,r19,r23
   20ba0:	98001f26 	beq	r19,zero,20c20 <__sfvwrite_r+0x308>
   20ba4:	a0800217 	ldw	r2,8(r20)
   20ba8:	e5f9883a 	add	fp,fp,r23
   20bac:	95e5c83a 	sub	r18,r18,r23
   20bb0:	15efc83a 	sub	r23,r2,r23
   20bb4:	a5c00215 	stw	r23,8(r20)
   20bb8:	b83f8426 	beq	r23,zero,209cc <_gp+0xfffd6f4c>
   20bbc:	903fe11e 	bne	r18,zero,20b44 <_gp+0xfffd70c4>
   20bc0:	8f000017 	ldw	fp,0(r17)
   20bc4:	8c800117 	ldw	r18,4(r17)
   20bc8:	0011883a 	mov	r8,zero
   20bcc:	8c400204 	addi	r17,r17,8
   20bd0:	003fdb06 	br	20b40 <_gp+0xfffd70c0>
   20bd4:	180d883a 	mov	r6,r3
   20bd8:	e00b883a 	mov	r5,fp
   20bdc:	da000115 	stw	r8,4(sp)
   20be0:	d8c00015 	stw	r3,0(sp)
   20be4:	00219a00 	call	219a0 <memmove>
   20be8:	d8c00017 	ldw	r3,0(sp)
   20bec:	80800017 	ldw	r2,0(r16)
   20bf0:	800b883a 	mov	r5,r16
   20bf4:	a809883a 	mov	r4,r21
   20bf8:	10c5883a 	add	r2,r2,r3
   20bfc:	80800015 	stw	r2,0(r16)
   20c00:	d8c00015 	stw	r3,0(sp)
   20c04:	00228400 	call	22840 <_fflush_r>
   20c08:	d8c00017 	ldw	r3,0(sp)
   20c0c:	da000117 	ldw	r8,4(sp)
   20c10:	103fc21e 	bne	r2,zero,20b1c <_gp+0xfffd709c>
   20c14:	182f883a 	mov	r23,r3
   20c18:	9de7c83a 	sub	r19,r19,r23
   20c1c:	983fe11e 	bne	r19,zero,20ba4 <_gp+0xfffd7124>
   20c20:	800b883a 	mov	r5,r16
   20c24:	a809883a 	mov	r4,r21
   20c28:	00228400 	call	22840 <_fflush_r>
   20c2c:	103fbb1e 	bne	r2,zero,20b1c <_gp+0xfffd709c>
   20c30:	0011883a 	mov	r8,zero
   20c34:	003fdb06 	br	20ba4 <_gp+0xfffd7124>
   20c38:	94c0012e 	bgeu	r18,r19,20c40 <__sfvwrite_r+0x328>
   20c3c:	9027883a 	mov	r19,r18
   20c40:	980d883a 	mov	r6,r19
   20c44:	e00b883a 	mov	r5,fp
   20c48:	00219a00 	call	219a0 <memmove>
   20c4c:	80800217 	ldw	r2,8(r16)
   20c50:	80c00017 	ldw	r3,0(r16)
   20c54:	14c5c83a 	sub	r2,r2,r19
   20c58:	1cc7883a 	add	r3,r3,r19
   20c5c:	80800215 	stw	r2,8(r16)
   20c60:	80c00015 	stw	r3,0(r16)
   20c64:	10004326 	beq	r2,zero,20d74 <__sfvwrite_r+0x45c>
   20c68:	9805883a 	mov	r2,r19
   20c6c:	003f8306 	br	20a7c <_gp+0xfffd6ffc>
   20c70:	b00d883a 	mov	r6,r22
   20c74:	e00b883a 	mov	r5,fp
   20c78:	da000115 	stw	r8,4(sp)
   20c7c:	00219a00 	call	219a0 <memmove>
   20c80:	80800217 	ldw	r2,8(r16)
   20c84:	80c00017 	ldw	r3,0(r16)
   20c88:	da000117 	ldw	r8,4(sp)
   20c8c:	1585c83a 	sub	r2,r2,r22
   20c90:	1dad883a 	add	r22,r3,r22
   20c94:	80800215 	stw	r2,8(r16)
   20c98:	85800015 	stw	r22,0(r16)
   20c9c:	003fbf06 	br	20b9c <_gp+0xfffd711c>
   20ca0:	81000017 	ldw	r4,0(r16)
   20ca4:	9027883a 	mov	r19,r18
   20ca8:	902f883a 	mov	r23,r18
   20cac:	003f6906 	br	20a54 <_gp+0xfffd6fd4>
   20cb0:	900d883a 	mov	r6,r18
   20cb4:	01400284 	movi	r5,10
   20cb8:	e009883a 	mov	r4,fp
   20cbc:	00217740 	call	21774 <memchr>
   20cc0:	10003e26 	beq	r2,zero,20dbc <__sfvwrite_r+0x4a4>
   20cc4:	10800044 	addi	r2,r2,1
   20cc8:	1727c83a 	sub	r19,r2,fp
   20ccc:	02000044 	movi	r8,1
   20cd0:	003f9d06 	br	20b48 <_gp+0xfffd70c8>
   20cd4:	80800517 	ldw	r2,20(r16)
   20cd8:	81400417 	ldw	r5,16(r16)
   20cdc:	81c00017 	ldw	r7,0(r16)
   20ce0:	10a7883a 	add	r19,r2,r2
   20ce4:	9885883a 	add	r2,r19,r2
   20ce8:	1026d7fa 	srli	r19,r2,31
   20cec:	396dc83a 	sub	r22,r7,r5
   20cf0:	b1000044 	addi	r4,r22,1
   20cf4:	9885883a 	add	r2,r19,r2
   20cf8:	1027d07a 	srai	r19,r2,1
   20cfc:	2485883a 	add	r2,r4,r18
   20d00:	980d883a 	mov	r6,r19
   20d04:	9880022e 	bgeu	r19,r2,20d10 <__sfvwrite_r+0x3f8>
   20d08:	1027883a 	mov	r19,r2
   20d0c:	100d883a 	mov	r6,r2
   20d10:	18c1000c 	andi	r3,r3,1024
   20d14:	18001c26 	beq	r3,zero,20d88 <__sfvwrite_r+0x470>
   20d18:	300b883a 	mov	r5,r6
   20d1c:	a809883a 	mov	r4,r21
   20d20:	0020f680 	call	20f68 <_malloc_r>
   20d24:	102f883a 	mov	r23,r2
   20d28:	10002926 	beq	r2,zero,20dd0 <__sfvwrite_r+0x4b8>
   20d2c:	81400417 	ldw	r5,16(r16)
   20d30:	b00d883a 	mov	r6,r22
   20d34:	1009883a 	mov	r4,r2
   20d38:	00218580 	call	21858 <memcpy>
   20d3c:	8080030b 	ldhu	r2,12(r16)
   20d40:	00fedfc4 	movi	r3,-1153
   20d44:	10c4703a 	and	r2,r2,r3
   20d48:	10802014 	ori	r2,r2,128
   20d4c:	8080030d 	sth	r2,12(r16)
   20d50:	bd89883a 	add	r4,r23,r22
   20d54:	9d8fc83a 	sub	r7,r19,r22
   20d58:	85c00415 	stw	r23,16(r16)
   20d5c:	84c00515 	stw	r19,20(r16)
   20d60:	81000015 	stw	r4,0(r16)
   20d64:	9027883a 	mov	r19,r18
   20d68:	81c00215 	stw	r7,8(r16)
   20d6c:	902f883a 	mov	r23,r18
   20d70:	003f3806 	br	20a54 <_gp+0xfffd6fd4>
   20d74:	800b883a 	mov	r5,r16
   20d78:	a809883a 	mov	r4,r21
   20d7c:	00228400 	call	22840 <_fflush_r>
   20d80:	103fb926 	beq	r2,zero,20c68 <_gp+0xfffd71e8>
   20d84:	003f6506 	br	20b1c <_gp+0xfffd709c>
   20d88:	a809883a 	mov	r4,r21
   20d8c:	0021c240 	call	21c24 <_realloc_r>
   20d90:	102f883a 	mov	r23,r2
   20d94:	103fee1e 	bne	r2,zero,20d50 <_gp+0xfffd72d0>
   20d98:	81400417 	ldw	r5,16(r16)
   20d9c:	a809883a 	mov	r4,r21
   20da0:	00229f00 	call	229f0 <_free_r>
   20da4:	8080030b 	ldhu	r2,12(r16)
   20da8:	00ffdfc4 	movi	r3,-129
   20dac:	1884703a 	and	r2,r3,r2
   20db0:	00c00304 	movi	r3,12
   20db4:	a8c00015 	stw	r3,0(r21)
   20db8:	003f5906 	br	20b20 <_gp+0xfffd70a0>
   20dbc:	94c00044 	addi	r19,r18,1
   20dc0:	02000044 	movi	r8,1
   20dc4:	003f6006 	br	20b48 <_gp+0xfffd70c8>
   20dc8:	00bfffc4 	movi	r2,-1
   20dcc:	003f0006 	br	209d0 <_gp+0xfffd6f50>
   20dd0:	00800304 	movi	r2,12
   20dd4:	a8800015 	stw	r2,0(r21)
   20dd8:	8080030b 	ldhu	r2,12(r16)
   20ddc:	003f5006 	br	20b20 <_gp+0xfffd70a0>

00020de0 <_fwalk>:
   20de0:	defff704 	addi	sp,sp,-36
   20de4:	dd000415 	stw	r20,16(sp)
   20de8:	dfc00815 	stw	ra,32(sp)
   20dec:	ddc00715 	stw	r23,28(sp)
   20df0:	dd800615 	stw	r22,24(sp)
   20df4:	dd400515 	stw	r21,20(sp)
   20df8:	dcc00315 	stw	r19,12(sp)
   20dfc:	dc800215 	stw	r18,8(sp)
   20e00:	dc400115 	stw	r17,4(sp)
   20e04:	dc000015 	stw	r16,0(sp)
   20e08:	2500b804 	addi	r20,r4,736
   20e0c:	a0002326 	beq	r20,zero,20e9c <_fwalk+0xbc>
   20e10:	282b883a 	mov	r21,r5
   20e14:	002f883a 	mov	r23,zero
   20e18:	05800044 	movi	r22,1
   20e1c:	04ffffc4 	movi	r19,-1
   20e20:	a4400117 	ldw	r17,4(r20)
   20e24:	a4800217 	ldw	r18,8(r20)
   20e28:	8c7fffc4 	addi	r17,r17,-1
   20e2c:	88000d16 	blt	r17,zero,20e64 <_fwalk+0x84>
   20e30:	94000304 	addi	r16,r18,12
   20e34:	94800384 	addi	r18,r18,14
   20e38:	8080000b 	ldhu	r2,0(r16)
   20e3c:	8c7fffc4 	addi	r17,r17,-1
   20e40:	813ffd04 	addi	r4,r16,-12
   20e44:	b080042e 	bgeu	r22,r2,20e58 <_fwalk+0x78>
   20e48:	9080000f 	ldh	r2,0(r18)
   20e4c:	14c00226 	beq	r2,r19,20e58 <_fwalk+0x78>
   20e50:	a83ee83a 	callr	r21
   20e54:	b8aeb03a 	or	r23,r23,r2
   20e58:	84001a04 	addi	r16,r16,104
   20e5c:	94801a04 	addi	r18,r18,104
   20e60:	8cfff51e 	bne	r17,r19,20e38 <_gp+0xfffd73b8>
   20e64:	a5000017 	ldw	r20,0(r20)
   20e68:	a03fed1e 	bne	r20,zero,20e20 <_gp+0xfffd73a0>
   20e6c:	b805883a 	mov	r2,r23
   20e70:	dfc00817 	ldw	ra,32(sp)
   20e74:	ddc00717 	ldw	r23,28(sp)
   20e78:	dd800617 	ldw	r22,24(sp)
   20e7c:	dd400517 	ldw	r21,20(sp)
   20e80:	dd000417 	ldw	r20,16(sp)
   20e84:	dcc00317 	ldw	r19,12(sp)
   20e88:	dc800217 	ldw	r18,8(sp)
   20e8c:	dc400117 	ldw	r17,4(sp)
   20e90:	dc000017 	ldw	r16,0(sp)
   20e94:	dec00904 	addi	sp,sp,36
   20e98:	f800283a 	ret
   20e9c:	002f883a 	mov	r23,zero
   20ea0:	003ff206 	br	20e6c <_gp+0xfffd73ec>

00020ea4 <_fwalk_reent>:
   20ea4:	defff704 	addi	sp,sp,-36
   20ea8:	dd000415 	stw	r20,16(sp)
   20eac:	dfc00815 	stw	ra,32(sp)
   20eb0:	ddc00715 	stw	r23,28(sp)
   20eb4:	dd800615 	stw	r22,24(sp)
   20eb8:	dd400515 	stw	r21,20(sp)
   20ebc:	dcc00315 	stw	r19,12(sp)
   20ec0:	dc800215 	stw	r18,8(sp)
   20ec4:	dc400115 	stw	r17,4(sp)
   20ec8:	dc000015 	stw	r16,0(sp)
   20ecc:	2500b804 	addi	r20,r4,736
   20ed0:	a0002326 	beq	r20,zero,20f60 <_fwalk_reent+0xbc>
   20ed4:	282b883a 	mov	r21,r5
   20ed8:	2027883a 	mov	r19,r4
   20edc:	002f883a 	mov	r23,zero
   20ee0:	05800044 	movi	r22,1
   20ee4:	04bfffc4 	movi	r18,-1
   20ee8:	a4400117 	ldw	r17,4(r20)
   20eec:	a4000217 	ldw	r16,8(r20)
   20ef0:	8c7fffc4 	addi	r17,r17,-1
   20ef4:	88000c16 	blt	r17,zero,20f28 <_fwalk_reent+0x84>
   20ef8:	84000304 	addi	r16,r16,12
   20efc:	8080000b 	ldhu	r2,0(r16)
   20f00:	8c7fffc4 	addi	r17,r17,-1
   20f04:	817ffd04 	addi	r5,r16,-12
   20f08:	b080052e 	bgeu	r22,r2,20f20 <_fwalk_reent+0x7c>
   20f0c:	8080008f 	ldh	r2,2(r16)
   20f10:	9809883a 	mov	r4,r19
   20f14:	14800226 	beq	r2,r18,20f20 <_fwalk_reent+0x7c>
   20f18:	a83ee83a 	callr	r21
   20f1c:	b8aeb03a 	or	r23,r23,r2
   20f20:	84001a04 	addi	r16,r16,104
   20f24:	8cbff51e 	bne	r17,r18,20efc <_gp+0xfffd747c>
   20f28:	a5000017 	ldw	r20,0(r20)
   20f2c:	a03fee1e 	bne	r20,zero,20ee8 <_gp+0xfffd7468>
   20f30:	b805883a 	mov	r2,r23
   20f34:	dfc00817 	ldw	ra,32(sp)
   20f38:	ddc00717 	ldw	r23,28(sp)
   20f3c:	dd800617 	ldw	r22,24(sp)
   20f40:	dd400517 	ldw	r21,20(sp)
   20f44:	dd000417 	ldw	r20,16(sp)
   20f48:	dcc00317 	ldw	r19,12(sp)
   20f4c:	dc800217 	ldw	r18,8(sp)
   20f50:	dc400117 	ldw	r17,4(sp)
   20f54:	dc000017 	ldw	r16,0(sp)
   20f58:	dec00904 	addi	sp,sp,36
   20f5c:	f800283a 	ret
   20f60:	002f883a 	mov	r23,zero
   20f64:	003ff206 	br	20f30 <_gp+0xfffd74b0>

00020f68 <_malloc_r>:
   20f68:	defff504 	addi	sp,sp,-44
   20f6c:	dc800315 	stw	r18,12(sp)
   20f70:	dfc00a15 	stw	ra,40(sp)
   20f74:	df000915 	stw	fp,36(sp)
   20f78:	ddc00815 	stw	r23,32(sp)
   20f7c:	dd800715 	stw	r22,28(sp)
   20f80:	dd400615 	stw	r21,24(sp)
   20f84:	dd000515 	stw	r20,20(sp)
   20f88:	dcc00415 	stw	r19,16(sp)
   20f8c:	dc400215 	stw	r17,8(sp)
   20f90:	dc000115 	stw	r16,4(sp)
   20f94:	288002c4 	addi	r2,r5,11
   20f98:	00c00584 	movi	r3,22
   20f9c:	2025883a 	mov	r18,r4
   20fa0:	18807f2e 	bgeu	r3,r2,211a0 <_malloc_r+0x238>
   20fa4:	047ffe04 	movi	r17,-8
   20fa8:	1462703a 	and	r17,r2,r17
   20fac:	8800a316 	blt	r17,zero,2123c <_malloc_r+0x2d4>
   20fb0:	8940a236 	bltu	r17,r5,2123c <_malloc_r+0x2d4>
   20fb4:	00238fc0 	call	238fc <__malloc_lock>
   20fb8:	00807dc4 	movi	r2,503
   20fbc:	1441e92e 	bgeu	r2,r17,21764 <_malloc_r+0x7fc>
   20fc0:	8804d27a 	srli	r2,r17,9
   20fc4:	1000a126 	beq	r2,zero,2124c <_malloc_r+0x2e4>
   20fc8:	00c00104 	movi	r3,4
   20fcc:	18811e36 	bltu	r3,r2,21448 <_malloc_r+0x4e0>
   20fd0:	8804d1ba 	srli	r2,r17,6
   20fd4:	12000e44 	addi	r8,r2,57
   20fd8:	11c00e04 	addi	r7,r2,56
   20fdc:	4209883a 	add	r4,r8,r8
   20fe0:	04c00134 	movhi	r19,4
   20fe4:	2109883a 	add	r4,r4,r4
   20fe8:	9cc11c04 	addi	r19,r19,1136
   20fec:	2109883a 	add	r4,r4,r4
   20ff0:	9909883a 	add	r4,r19,r4
   20ff4:	24000117 	ldw	r16,4(r4)
   20ff8:	213ffe04 	addi	r4,r4,-8
   20ffc:	24009726 	beq	r4,r16,2125c <_malloc_r+0x2f4>
   21000:	80800117 	ldw	r2,4(r16)
   21004:	01bfff04 	movi	r6,-4
   21008:	014003c4 	movi	r5,15
   2100c:	1184703a 	and	r2,r2,r6
   21010:	1447c83a 	sub	r3,r2,r17
   21014:	28c00716 	blt	r5,r3,21034 <_malloc_r+0xcc>
   21018:	1800920e 	bge	r3,zero,21264 <_malloc_r+0x2fc>
   2101c:	84000317 	ldw	r16,12(r16)
   21020:	24008e26 	beq	r4,r16,2125c <_malloc_r+0x2f4>
   21024:	80800117 	ldw	r2,4(r16)
   21028:	1184703a 	and	r2,r2,r6
   2102c:	1447c83a 	sub	r3,r2,r17
   21030:	28fff90e 	bge	r5,r3,21018 <_gp+0xfffd7598>
   21034:	3809883a 	mov	r4,r7
   21038:	01800134 	movhi	r6,4
   2103c:	9c000417 	ldw	r16,16(r19)
   21040:	31811c04 	addi	r6,r6,1136
   21044:	32000204 	addi	r8,r6,8
   21048:	82013426 	beq	r16,r8,2151c <_malloc_r+0x5b4>
   2104c:	80c00117 	ldw	r3,4(r16)
   21050:	00bfff04 	movi	r2,-4
   21054:	188e703a 	and	r7,r3,r2
   21058:	3c45c83a 	sub	r2,r7,r17
   2105c:	00c003c4 	movi	r3,15
   21060:	18811f16 	blt	r3,r2,214e0 <_malloc_r+0x578>
   21064:	32000515 	stw	r8,20(r6)
   21068:	32000415 	stw	r8,16(r6)
   2106c:	10007f0e 	bge	r2,zero,2126c <_malloc_r+0x304>
   21070:	00807fc4 	movi	r2,511
   21074:	11c0fd36 	bltu	r2,r7,2146c <_malloc_r+0x504>
   21078:	3806d0fa 	srli	r3,r7,3
   2107c:	01c00044 	movi	r7,1
   21080:	30800117 	ldw	r2,4(r6)
   21084:	19400044 	addi	r5,r3,1
   21088:	294b883a 	add	r5,r5,r5
   2108c:	1807d0ba 	srai	r3,r3,2
   21090:	294b883a 	add	r5,r5,r5
   21094:	294b883a 	add	r5,r5,r5
   21098:	298b883a 	add	r5,r5,r6
   2109c:	38c6983a 	sll	r3,r7,r3
   210a0:	29c00017 	ldw	r7,0(r5)
   210a4:	2a7ffe04 	addi	r9,r5,-8
   210a8:	1886b03a 	or	r3,r3,r2
   210ac:	82400315 	stw	r9,12(r16)
   210b0:	81c00215 	stw	r7,8(r16)
   210b4:	30c00115 	stw	r3,4(r6)
   210b8:	2c000015 	stw	r16,0(r5)
   210bc:	3c000315 	stw	r16,12(r7)
   210c0:	2005d0ba 	srai	r2,r4,2
   210c4:	01400044 	movi	r5,1
   210c8:	288a983a 	sll	r5,r5,r2
   210cc:	19406f36 	bltu	r3,r5,2128c <_malloc_r+0x324>
   210d0:	28c4703a 	and	r2,r5,r3
   210d4:	10000a1e 	bne	r2,zero,21100 <_malloc_r+0x198>
   210d8:	00bfff04 	movi	r2,-4
   210dc:	294b883a 	add	r5,r5,r5
   210e0:	2088703a 	and	r4,r4,r2
   210e4:	28c4703a 	and	r2,r5,r3
   210e8:	21000104 	addi	r4,r4,4
   210ec:	1000041e 	bne	r2,zero,21100 <_malloc_r+0x198>
   210f0:	294b883a 	add	r5,r5,r5
   210f4:	28c4703a 	and	r2,r5,r3
   210f8:	21000104 	addi	r4,r4,4
   210fc:	103ffc26 	beq	r2,zero,210f0 <_gp+0xfffd7670>
   21100:	02bfff04 	movi	r10,-4
   21104:	024003c4 	movi	r9,15
   21108:	21800044 	addi	r6,r4,1
   2110c:	318d883a 	add	r6,r6,r6
   21110:	318d883a 	add	r6,r6,r6
   21114:	318d883a 	add	r6,r6,r6
   21118:	998d883a 	add	r6,r19,r6
   2111c:	333ffe04 	addi	r12,r6,-8
   21120:	2017883a 	mov	r11,r4
   21124:	31800104 	addi	r6,r6,4
   21128:	34000017 	ldw	r16,0(r6)
   2112c:	31fffd04 	addi	r7,r6,-12
   21130:	81c0041e 	bne	r16,r7,21144 <_malloc_r+0x1dc>
   21134:	0000fb06 	br	21524 <_malloc_r+0x5bc>
   21138:	1801030e 	bge	r3,zero,21548 <_malloc_r+0x5e0>
   2113c:	84000317 	ldw	r16,12(r16)
   21140:	81c0f826 	beq	r16,r7,21524 <_malloc_r+0x5bc>
   21144:	80800117 	ldw	r2,4(r16)
   21148:	1284703a 	and	r2,r2,r10
   2114c:	1447c83a 	sub	r3,r2,r17
   21150:	48fff90e 	bge	r9,r3,21138 <_gp+0xfffd76b8>
   21154:	80800317 	ldw	r2,12(r16)
   21158:	81000217 	ldw	r4,8(r16)
   2115c:	89400054 	ori	r5,r17,1
   21160:	81400115 	stw	r5,4(r16)
   21164:	20800315 	stw	r2,12(r4)
   21168:	11000215 	stw	r4,8(r2)
   2116c:	8463883a 	add	r17,r16,r17
   21170:	9c400515 	stw	r17,20(r19)
   21174:	9c400415 	stw	r17,16(r19)
   21178:	18800054 	ori	r2,r3,1
   2117c:	88800115 	stw	r2,4(r17)
   21180:	8a000315 	stw	r8,12(r17)
   21184:	8a000215 	stw	r8,8(r17)
   21188:	88e3883a 	add	r17,r17,r3
   2118c:	88c00015 	stw	r3,0(r17)
   21190:	9009883a 	mov	r4,r18
   21194:	00239200 	call	23920 <__malloc_unlock>
   21198:	80800204 	addi	r2,r16,8
   2119c:	00001b06 	br	2120c <_malloc_r+0x2a4>
   211a0:	04400404 	movi	r17,16
   211a4:	89402536 	bltu	r17,r5,2123c <_malloc_r+0x2d4>
   211a8:	00238fc0 	call	238fc <__malloc_lock>
   211ac:	00800184 	movi	r2,6
   211b0:	01000084 	movi	r4,2
   211b4:	04c00134 	movhi	r19,4
   211b8:	1085883a 	add	r2,r2,r2
   211bc:	9cc11c04 	addi	r19,r19,1136
   211c0:	1085883a 	add	r2,r2,r2
   211c4:	9885883a 	add	r2,r19,r2
   211c8:	14000117 	ldw	r16,4(r2)
   211cc:	10fffe04 	addi	r3,r2,-8
   211d0:	80c0d926 	beq	r16,r3,21538 <_malloc_r+0x5d0>
   211d4:	80c00117 	ldw	r3,4(r16)
   211d8:	81000317 	ldw	r4,12(r16)
   211dc:	00bfff04 	movi	r2,-4
   211e0:	1884703a 	and	r2,r3,r2
   211e4:	81400217 	ldw	r5,8(r16)
   211e8:	8085883a 	add	r2,r16,r2
   211ec:	10c00117 	ldw	r3,4(r2)
   211f0:	29000315 	stw	r4,12(r5)
   211f4:	21400215 	stw	r5,8(r4)
   211f8:	18c00054 	ori	r3,r3,1
   211fc:	10c00115 	stw	r3,4(r2)
   21200:	9009883a 	mov	r4,r18
   21204:	00239200 	call	23920 <__malloc_unlock>
   21208:	80800204 	addi	r2,r16,8
   2120c:	dfc00a17 	ldw	ra,40(sp)
   21210:	df000917 	ldw	fp,36(sp)
   21214:	ddc00817 	ldw	r23,32(sp)
   21218:	dd800717 	ldw	r22,28(sp)
   2121c:	dd400617 	ldw	r21,24(sp)
   21220:	dd000517 	ldw	r20,20(sp)
   21224:	dcc00417 	ldw	r19,16(sp)
   21228:	dc800317 	ldw	r18,12(sp)
   2122c:	dc400217 	ldw	r17,8(sp)
   21230:	dc000117 	ldw	r16,4(sp)
   21234:	dec00b04 	addi	sp,sp,44
   21238:	f800283a 	ret
   2123c:	00800304 	movi	r2,12
   21240:	90800015 	stw	r2,0(r18)
   21244:	0005883a 	mov	r2,zero
   21248:	003ff006 	br	2120c <_gp+0xfffd778c>
   2124c:	01002004 	movi	r4,128
   21250:	02001004 	movi	r8,64
   21254:	01c00fc4 	movi	r7,63
   21258:	003f6106 	br	20fe0 <_gp+0xfffd7560>
   2125c:	4009883a 	mov	r4,r8
   21260:	003f7506 	br	21038 <_gp+0xfffd75b8>
   21264:	81000317 	ldw	r4,12(r16)
   21268:	003fde06 	br	211e4 <_gp+0xfffd7764>
   2126c:	81c5883a 	add	r2,r16,r7
   21270:	11400117 	ldw	r5,4(r2)
   21274:	9009883a 	mov	r4,r18
   21278:	29400054 	ori	r5,r5,1
   2127c:	11400115 	stw	r5,4(r2)
   21280:	00239200 	call	23920 <__malloc_unlock>
   21284:	80800204 	addi	r2,r16,8
   21288:	003fe006 	br	2120c <_gp+0xfffd778c>
   2128c:	9c000217 	ldw	r16,8(r19)
   21290:	00bfff04 	movi	r2,-4
   21294:	85800117 	ldw	r22,4(r16)
   21298:	b0ac703a 	and	r22,r22,r2
   2129c:	b4400336 	bltu	r22,r17,212ac <_malloc_r+0x344>
   212a0:	b445c83a 	sub	r2,r22,r17
   212a4:	00c003c4 	movi	r3,15
   212a8:	18805d16 	blt	r3,r2,21420 <_malloc_r+0x4b8>
   212ac:	05c00134 	movhi	r23,4
   212b0:	00800134 	movhi	r2,4
   212b4:	1086b204 	addi	r2,r2,6856
   212b8:	bdc6a204 	addi	r23,r23,6792
   212bc:	15400017 	ldw	r21,0(r2)
   212c0:	b8c00017 	ldw	r3,0(r23)
   212c4:	00bfffc4 	movi	r2,-1
   212c8:	858d883a 	add	r6,r16,r22
   212cc:	8d6b883a 	add	r21,r17,r21
   212d0:	1880ea26 	beq	r3,r2,2167c <_malloc_r+0x714>
   212d4:	ad4403c4 	addi	r21,r21,4111
   212d8:	00bc0004 	movi	r2,-4096
   212dc:	a8aa703a 	and	r21,r21,r2
   212e0:	a80b883a 	mov	r5,r21
   212e4:	9009883a 	mov	r4,r18
   212e8:	d9800015 	stw	r6,0(sp)
   212ec:	00221880 	call	22188 <_sbrk_r>
   212f0:	1029883a 	mov	r20,r2
   212f4:	00bfffc4 	movi	r2,-1
   212f8:	d9800017 	ldw	r6,0(sp)
   212fc:	a080e826 	beq	r20,r2,216a0 <_malloc_r+0x738>
   21300:	a180a636 	bltu	r20,r6,2159c <_malloc_r+0x634>
   21304:	07000134 	movhi	fp,4
   21308:	e706bb04 	addi	fp,fp,6892
   2130c:	e0800017 	ldw	r2,0(fp)
   21310:	a887883a 	add	r3,r21,r2
   21314:	e0c00015 	stw	r3,0(fp)
   21318:	3500e626 	beq	r6,r20,216b4 <_malloc_r+0x74c>
   2131c:	b9000017 	ldw	r4,0(r23)
   21320:	00bfffc4 	movi	r2,-1
   21324:	2080ee26 	beq	r4,r2,216e0 <_malloc_r+0x778>
   21328:	a185c83a 	sub	r2,r20,r6
   2132c:	10c5883a 	add	r2,r2,r3
   21330:	e0800015 	stw	r2,0(fp)
   21334:	a0c001cc 	andi	r3,r20,7
   21338:	1800bc26 	beq	r3,zero,2162c <_malloc_r+0x6c4>
   2133c:	a0e9c83a 	sub	r20,r20,r3
   21340:	00840204 	movi	r2,4104
   21344:	a5000204 	addi	r20,r20,8
   21348:	10c7c83a 	sub	r3,r2,r3
   2134c:	a545883a 	add	r2,r20,r21
   21350:	1083ffcc 	andi	r2,r2,4095
   21354:	18abc83a 	sub	r21,r3,r2
   21358:	a80b883a 	mov	r5,r21
   2135c:	9009883a 	mov	r4,r18
   21360:	00221880 	call	22188 <_sbrk_r>
   21364:	00ffffc4 	movi	r3,-1
   21368:	10c0e126 	beq	r2,r3,216f0 <_malloc_r+0x788>
   2136c:	1505c83a 	sub	r2,r2,r20
   21370:	1545883a 	add	r2,r2,r21
   21374:	10800054 	ori	r2,r2,1
   21378:	e0c00017 	ldw	r3,0(fp)
   2137c:	9d000215 	stw	r20,8(r19)
   21380:	a0800115 	stw	r2,4(r20)
   21384:	a8c7883a 	add	r3,r21,r3
   21388:	e0c00015 	stw	r3,0(fp)
   2138c:	84c00e26 	beq	r16,r19,213c8 <_malloc_r+0x460>
   21390:	018003c4 	movi	r6,15
   21394:	3580a72e 	bgeu	r6,r22,21634 <_malloc_r+0x6cc>
   21398:	81400117 	ldw	r5,4(r16)
   2139c:	013ffe04 	movi	r4,-8
   213a0:	b0bffd04 	addi	r2,r22,-12
   213a4:	1104703a 	and	r2,r2,r4
   213a8:	2900004c 	andi	r4,r5,1
   213ac:	2088b03a 	or	r4,r4,r2
   213b0:	81000115 	stw	r4,4(r16)
   213b4:	01400144 	movi	r5,5
   213b8:	8089883a 	add	r4,r16,r2
   213bc:	21400115 	stw	r5,4(r4)
   213c0:	21400215 	stw	r5,8(r4)
   213c4:	3080cd36 	bltu	r6,r2,216fc <_malloc_r+0x794>
   213c8:	00800134 	movhi	r2,4
   213cc:	1086b104 	addi	r2,r2,6852
   213d0:	11000017 	ldw	r4,0(r2)
   213d4:	20c0012e 	bgeu	r4,r3,213dc <_malloc_r+0x474>
   213d8:	10c00015 	stw	r3,0(r2)
   213dc:	00800134 	movhi	r2,4
   213e0:	1086b004 	addi	r2,r2,6848
   213e4:	11000017 	ldw	r4,0(r2)
   213e8:	9c000217 	ldw	r16,8(r19)
   213ec:	20c0012e 	bgeu	r4,r3,213f4 <_malloc_r+0x48c>
   213f0:	10c00015 	stw	r3,0(r2)
   213f4:	80c00117 	ldw	r3,4(r16)
   213f8:	00bfff04 	movi	r2,-4
   213fc:	1886703a 	and	r3,r3,r2
   21400:	1c45c83a 	sub	r2,r3,r17
   21404:	1c400236 	bltu	r3,r17,21410 <_malloc_r+0x4a8>
   21408:	00c003c4 	movi	r3,15
   2140c:	18800416 	blt	r3,r2,21420 <_malloc_r+0x4b8>
   21410:	9009883a 	mov	r4,r18
   21414:	00239200 	call	23920 <__malloc_unlock>
   21418:	0005883a 	mov	r2,zero
   2141c:	003f7b06 	br	2120c <_gp+0xfffd778c>
   21420:	88c00054 	ori	r3,r17,1
   21424:	80c00115 	stw	r3,4(r16)
   21428:	8463883a 	add	r17,r16,r17
   2142c:	10800054 	ori	r2,r2,1
   21430:	9c400215 	stw	r17,8(r19)
   21434:	88800115 	stw	r2,4(r17)
   21438:	9009883a 	mov	r4,r18
   2143c:	00239200 	call	23920 <__malloc_unlock>
   21440:	80800204 	addi	r2,r16,8
   21444:	003f7106 	br	2120c <_gp+0xfffd778c>
   21448:	00c00504 	movi	r3,20
   2144c:	18804a2e 	bgeu	r3,r2,21578 <_malloc_r+0x610>
   21450:	00c01504 	movi	r3,84
   21454:	18806e36 	bltu	r3,r2,21610 <_malloc_r+0x6a8>
   21458:	8804d33a 	srli	r2,r17,12
   2145c:	12001bc4 	addi	r8,r2,111
   21460:	11c01b84 	addi	r7,r2,110
   21464:	4209883a 	add	r4,r8,r8
   21468:	003edd06 	br	20fe0 <_gp+0xfffd7560>
   2146c:	3804d27a 	srli	r2,r7,9
   21470:	00c00104 	movi	r3,4
   21474:	1880442e 	bgeu	r3,r2,21588 <_malloc_r+0x620>
   21478:	00c00504 	movi	r3,20
   2147c:	18808136 	bltu	r3,r2,21684 <_malloc_r+0x71c>
   21480:	11401704 	addi	r5,r2,92
   21484:	10c016c4 	addi	r3,r2,91
   21488:	294b883a 	add	r5,r5,r5
   2148c:	294b883a 	add	r5,r5,r5
   21490:	294b883a 	add	r5,r5,r5
   21494:	994b883a 	add	r5,r19,r5
   21498:	28800017 	ldw	r2,0(r5)
   2149c:	01800134 	movhi	r6,4
   214a0:	297ffe04 	addi	r5,r5,-8
   214a4:	31811c04 	addi	r6,r6,1136
   214a8:	28806526 	beq	r5,r2,21640 <_malloc_r+0x6d8>
   214ac:	01bfff04 	movi	r6,-4
   214b0:	10c00117 	ldw	r3,4(r2)
   214b4:	1986703a 	and	r3,r3,r6
   214b8:	38c0022e 	bgeu	r7,r3,214c4 <_malloc_r+0x55c>
   214bc:	10800217 	ldw	r2,8(r2)
   214c0:	28bffb1e 	bne	r5,r2,214b0 <_gp+0xfffd7a30>
   214c4:	11400317 	ldw	r5,12(r2)
   214c8:	98c00117 	ldw	r3,4(r19)
   214cc:	81400315 	stw	r5,12(r16)
   214d0:	80800215 	stw	r2,8(r16)
   214d4:	2c000215 	stw	r16,8(r5)
   214d8:	14000315 	stw	r16,12(r2)
   214dc:	003ef806 	br	210c0 <_gp+0xfffd7640>
   214e0:	88c00054 	ori	r3,r17,1
   214e4:	80c00115 	stw	r3,4(r16)
   214e8:	8463883a 	add	r17,r16,r17
   214ec:	34400515 	stw	r17,20(r6)
   214f0:	34400415 	stw	r17,16(r6)
   214f4:	10c00054 	ori	r3,r2,1
   214f8:	8a000315 	stw	r8,12(r17)
   214fc:	8a000215 	stw	r8,8(r17)
   21500:	88c00115 	stw	r3,4(r17)
   21504:	88a3883a 	add	r17,r17,r2
   21508:	88800015 	stw	r2,0(r17)
   2150c:	9009883a 	mov	r4,r18
   21510:	00239200 	call	23920 <__malloc_unlock>
   21514:	80800204 	addi	r2,r16,8
   21518:	003f3c06 	br	2120c <_gp+0xfffd778c>
   2151c:	30c00117 	ldw	r3,4(r6)
   21520:	003ee706 	br	210c0 <_gp+0xfffd7640>
   21524:	5ac00044 	addi	r11,r11,1
   21528:	588000cc 	andi	r2,r11,3
   2152c:	31800204 	addi	r6,r6,8
   21530:	103efd1e 	bne	r2,zero,21128 <_gp+0xfffd76a8>
   21534:	00002406 	br	215c8 <_malloc_r+0x660>
   21538:	14000317 	ldw	r16,12(r2)
   2153c:	143f251e 	bne	r2,r16,211d4 <_gp+0xfffd7754>
   21540:	21000084 	addi	r4,r4,2
   21544:	003ebc06 	br	21038 <_gp+0xfffd75b8>
   21548:	8085883a 	add	r2,r16,r2
   2154c:	10c00117 	ldw	r3,4(r2)
   21550:	81000317 	ldw	r4,12(r16)
   21554:	81400217 	ldw	r5,8(r16)
   21558:	18c00054 	ori	r3,r3,1
   2155c:	10c00115 	stw	r3,4(r2)
   21560:	29000315 	stw	r4,12(r5)
   21564:	21400215 	stw	r5,8(r4)
   21568:	9009883a 	mov	r4,r18
   2156c:	00239200 	call	23920 <__malloc_unlock>
   21570:	80800204 	addi	r2,r16,8
   21574:	003f2506 	br	2120c <_gp+0xfffd778c>
   21578:	12001704 	addi	r8,r2,92
   2157c:	11c016c4 	addi	r7,r2,91
   21580:	4209883a 	add	r4,r8,r8
   21584:	003e9606 	br	20fe0 <_gp+0xfffd7560>
   21588:	3804d1ba 	srli	r2,r7,6
   2158c:	11400e44 	addi	r5,r2,57
   21590:	10c00e04 	addi	r3,r2,56
   21594:	294b883a 	add	r5,r5,r5
   21598:	003fbc06 	br	2148c <_gp+0xfffd7a0c>
   2159c:	84ff5926 	beq	r16,r19,21304 <_gp+0xfffd7884>
   215a0:	00800134 	movhi	r2,4
   215a4:	10811c04 	addi	r2,r2,1136
   215a8:	14000217 	ldw	r16,8(r2)
   215ac:	00bfff04 	movi	r2,-4
   215b0:	80c00117 	ldw	r3,4(r16)
   215b4:	1886703a 	and	r3,r3,r2
   215b8:	003f9106 	br	21400 <_gp+0xfffd7980>
   215bc:	60800217 	ldw	r2,8(r12)
   215c0:	213fffc4 	addi	r4,r4,-1
   215c4:	1300651e 	bne	r2,r12,2175c <_malloc_r+0x7f4>
   215c8:	208000cc 	andi	r2,r4,3
   215cc:	633ffe04 	addi	r12,r12,-8
   215d0:	103ffa1e 	bne	r2,zero,215bc <_gp+0xfffd7b3c>
   215d4:	98800117 	ldw	r2,4(r19)
   215d8:	0146303a 	nor	r3,zero,r5
   215dc:	1884703a 	and	r2,r3,r2
   215e0:	98800115 	stw	r2,4(r19)
   215e4:	294b883a 	add	r5,r5,r5
   215e8:	117f2836 	bltu	r2,r5,2128c <_gp+0xfffd780c>
   215ec:	283f2726 	beq	r5,zero,2128c <_gp+0xfffd780c>
   215f0:	2886703a 	and	r3,r5,r2
   215f4:	5809883a 	mov	r4,r11
   215f8:	183ec31e 	bne	r3,zero,21108 <_gp+0xfffd7688>
   215fc:	294b883a 	add	r5,r5,r5
   21600:	2886703a 	and	r3,r5,r2
   21604:	21000104 	addi	r4,r4,4
   21608:	183ffc26 	beq	r3,zero,215fc <_gp+0xfffd7b7c>
   2160c:	003ebe06 	br	21108 <_gp+0xfffd7688>
   21610:	00c05504 	movi	r3,340
   21614:	18801236 	bltu	r3,r2,21660 <_malloc_r+0x6f8>
   21618:	8804d3fa 	srli	r2,r17,15
   2161c:	12001e04 	addi	r8,r2,120
   21620:	11c01dc4 	addi	r7,r2,119
   21624:	4209883a 	add	r4,r8,r8
   21628:	003e6d06 	br	20fe0 <_gp+0xfffd7560>
   2162c:	00c40004 	movi	r3,4096
   21630:	003f4606 	br	2134c <_gp+0xfffd78cc>
   21634:	00800044 	movi	r2,1
   21638:	a0800115 	stw	r2,4(r20)
   2163c:	003f7406 	br	21410 <_gp+0xfffd7990>
   21640:	1805d0ba 	srai	r2,r3,2
   21644:	01c00044 	movi	r7,1
   21648:	30c00117 	ldw	r3,4(r6)
   2164c:	388e983a 	sll	r7,r7,r2
   21650:	2805883a 	mov	r2,r5
   21654:	38c6b03a 	or	r3,r7,r3
   21658:	30c00115 	stw	r3,4(r6)
   2165c:	003f9b06 	br	214cc <_gp+0xfffd7a4c>
   21660:	00c15504 	movi	r3,1364
   21664:	18801a36 	bltu	r3,r2,216d0 <_malloc_r+0x768>
   21668:	8804d4ba 	srli	r2,r17,18
   2166c:	12001f44 	addi	r8,r2,125
   21670:	11c01f04 	addi	r7,r2,124
   21674:	4209883a 	add	r4,r8,r8
   21678:	003e5906 	br	20fe0 <_gp+0xfffd7560>
   2167c:	ad400404 	addi	r21,r21,16
   21680:	003f1706 	br	212e0 <_gp+0xfffd7860>
   21684:	00c01504 	movi	r3,84
   21688:	18802336 	bltu	r3,r2,21718 <_malloc_r+0x7b0>
   2168c:	3804d33a 	srli	r2,r7,12
   21690:	11401bc4 	addi	r5,r2,111
   21694:	10c01b84 	addi	r3,r2,110
   21698:	294b883a 	add	r5,r5,r5
   2169c:	003f7b06 	br	2148c <_gp+0xfffd7a0c>
   216a0:	9c000217 	ldw	r16,8(r19)
   216a4:	00bfff04 	movi	r2,-4
   216a8:	80c00117 	ldw	r3,4(r16)
   216ac:	1886703a 	and	r3,r3,r2
   216b0:	003f5306 	br	21400 <_gp+0xfffd7980>
   216b4:	3083ffcc 	andi	r2,r6,4095
   216b8:	103f181e 	bne	r2,zero,2131c <_gp+0xfffd789c>
   216bc:	99000217 	ldw	r4,8(r19)
   216c0:	b545883a 	add	r2,r22,r21
   216c4:	10800054 	ori	r2,r2,1
   216c8:	20800115 	stw	r2,4(r4)
   216cc:	003f3e06 	br	213c8 <_gp+0xfffd7948>
   216d0:	01003f84 	movi	r4,254
   216d4:	02001fc4 	movi	r8,127
   216d8:	01c01f84 	movi	r7,126
   216dc:	003e4006 	br	20fe0 <_gp+0xfffd7560>
   216e0:	00800134 	movhi	r2,4
   216e4:	1086a204 	addi	r2,r2,6792
   216e8:	15000015 	stw	r20,0(r2)
   216ec:	003f1106 	br	21334 <_gp+0xfffd78b4>
   216f0:	00800044 	movi	r2,1
   216f4:	002b883a 	mov	r21,zero
   216f8:	003f1f06 	br	21378 <_gp+0xfffd78f8>
   216fc:	81400204 	addi	r5,r16,8
   21700:	9009883a 	mov	r4,r18
   21704:	00229f00 	call	229f0 <_free_r>
   21708:	00800134 	movhi	r2,4
   2170c:	1086bb04 	addi	r2,r2,6892
   21710:	10c00017 	ldw	r3,0(r2)
   21714:	003f2c06 	br	213c8 <_gp+0xfffd7948>
   21718:	00c05504 	movi	r3,340
   2171c:	18800536 	bltu	r3,r2,21734 <_malloc_r+0x7cc>
   21720:	3804d3fa 	srli	r2,r7,15
   21724:	11401e04 	addi	r5,r2,120
   21728:	10c01dc4 	addi	r3,r2,119
   2172c:	294b883a 	add	r5,r5,r5
   21730:	003f5606 	br	2148c <_gp+0xfffd7a0c>
   21734:	00c15504 	movi	r3,1364
   21738:	18800536 	bltu	r3,r2,21750 <_malloc_r+0x7e8>
   2173c:	3804d4ba 	srli	r2,r7,18
   21740:	11401f44 	addi	r5,r2,125
   21744:	10c01f04 	addi	r3,r2,124
   21748:	294b883a 	add	r5,r5,r5
   2174c:	003f4f06 	br	2148c <_gp+0xfffd7a0c>
   21750:	01403f84 	movi	r5,254
   21754:	00c01f84 	movi	r3,126
   21758:	003f4c06 	br	2148c <_gp+0xfffd7a0c>
   2175c:	98800117 	ldw	r2,4(r19)
   21760:	003fa006 	br	215e4 <_gp+0xfffd7b64>
   21764:	8808d0fa 	srli	r4,r17,3
   21768:	20800044 	addi	r2,r4,1
   2176c:	1085883a 	add	r2,r2,r2
   21770:	003e9006 	br	211b4 <_gp+0xfffd7734>

00021774 <memchr>:
   21774:	208000cc 	andi	r2,r4,3
   21778:	280f883a 	mov	r7,r5
   2177c:	10003426 	beq	r2,zero,21850 <memchr+0xdc>
   21780:	30bfffc4 	addi	r2,r6,-1
   21784:	30001a26 	beq	r6,zero,217f0 <memchr+0x7c>
   21788:	20c00003 	ldbu	r3,0(r4)
   2178c:	29803fcc 	andi	r6,r5,255
   21790:	30c0051e 	bne	r6,r3,217a8 <memchr+0x34>
   21794:	00001806 	br	217f8 <memchr+0x84>
   21798:	10001526 	beq	r2,zero,217f0 <memchr+0x7c>
   2179c:	20c00003 	ldbu	r3,0(r4)
   217a0:	10bfffc4 	addi	r2,r2,-1
   217a4:	30c01426 	beq	r6,r3,217f8 <memchr+0x84>
   217a8:	21000044 	addi	r4,r4,1
   217ac:	20c000cc 	andi	r3,r4,3
   217b0:	183ff91e 	bne	r3,zero,21798 <_gp+0xfffd7d18>
   217b4:	020000c4 	movi	r8,3
   217b8:	40801136 	bltu	r8,r2,21800 <memchr+0x8c>
   217bc:	10000c26 	beq	r2,zero,217f0 <memchr+0x7c>
   217c0:	20c00003 	ldbu	r3,0(r4)
   217c4:	29403fcc 	andi	r5,r5,255
   217c8:	28c00b26 	beq	r5,r3,217f8 <memchr+0x84>
   217cc:	20c00044 	addi	r3,r4,1
   217d0:	39803fcc 	andi	r6,r7,255
   217d4:	2089883a 	add	r4,r4,r2
   217d8:	00000306 	br	217e8 <memchr+0x74>
   217dc:	18c00044 	addi	r3,r3,1
   217e0:	197fffc3 	ldbu	r5,-1(r3)
   217e4:	31400526 	beq	r6,r5,217fc <memchr+0x88>
   217e8:	1805883a 	mov	r2,r3
   217ec:	20fffb1e 	bne	r4,r3,217dc <_gp+0xfffd7d5c>
   217f0:	0005883a 	mov	r2,zero
   217f4:	f800283a 	ret
   217f8:	2005883a 	mov	r2,r4
   217fc:	f800283a 	ret
   21800:	28c03fcc 	andi	r3,r5,255
   21804:	1812923a 	slli	r9,r3,8
   21808:	02ffbff4 	movhi	r11,65279
   2180c:	02a02074 	movhi	r10,32897
   21810:	48d2b03a 	or	r9,r9,r3
   21814:	4806943a 	slli	r3,r9,16
   21818:	5affbfc4 	addi	r11,r11,-257
   2181c:	52a02004 	addi	r10,r10,-32640
   21820:	48d2b03a 	or	r9,r9,r3
   21824:	20c00017 	ldw	r3,0(r4)
   21828:	48c6f03a 	xor	r3,r9,r3
   2182c:	1acd883a 	add	r6,r3,r11
   21830:	00c6303a 	nor	r3,zero,r3
   21834:	30c6703a 	and	r3,r6,r3
   21838:	1a86703a 	and	r3,r3,r10
   2183c:	183fe01e 	bne	r3,zero,217c0 <_gp+0xfffd7d40>
   21840:	10bfff04 	addi	r2,r2,-4
   21844:	21000104 	addi	r4,r4,4
   21848:	40bff636 	bltu	r8,r2,21824 <_gp+0xfffd7da4>
   2184c:	003fdb06 	br	217bc <_gp+0xfffd7d3c>
   21850:	3005883a 	mov	r2,r6
   21854:	003fd706 	br	217b4 <_gp+0xfffd7d34>

00021858 <memcpy>:
   21858:	defffd04 	addi	sp,sp,-12
   2185c:	dfc00215 	stw	ra,8(sp)
   21860:	dc400115 	stw	r17,4(sp)
   21864:	dc000015 	stw	r16,0(sp)
   21868:	00c003c4 	movi	r3,15
   2186c:	2005883a 	mov	r2,r4
   21870:	1980452e 	bgeu	r3,r6,21988 <memcpy+0x130>
   21874:	2906b03a 	or	r3,r5,r4
   21878:	18c000cc 	andi	r3,r3,3
   2187c:	1800441e 	bne	r3,zero,21990 <memcpy+0x138>
   21880:	347ffc04 	addi	r17,r6,-16
   21884:	8822d13a 	srli	r17,r17,4
   21888:	28c00104 	addi	r3,r5,4
   2188c:	23400104 	addi	r13,r4,4
   21890:	8820913a 	slli	r16,r17,4
   21894:	2b000204 	addi	r12,r5,8
   21898:	22c00204 	addi	r11,r4,8
   2189c:	84000504 	addi	r16,r16,20
   218a0:	2a800304 	addi	r10,r5,12
   218a4:	22400304 	addi	r9,r4,12
   218a8:	2c21883a 	add	r16,r5,r16
   218ac:	2811883a 	mov	r8,r5
   218b0:	200f883a 	mov	r7,r4
   218b4:	41000017 	ldw	r4,0(r8)
   218b8:	1fc00017 	ldw	ra,0(r3)
   218bc:	63c00017 	ldw	r15,0(r12)
   218c0:	39000015 	stw	r4,0(r7)
   218c4:	53800017 	ldw	r14,0(r10)
   218c8:	6fc00015 	stw	ra,0(r13)
   218cc:	5bc00015 	stw	r15,0(r11)
   218d0:	4b800015 	stw	r14,0(r9)
   218d4:	18c00404 	addi	r3,r3,16
   218d8:	39c00404 	addi	r7,r7,16
   218dc:	42000404 	addi	r8,r8,16
   218e0:	6b400404 	addi	r13,r13,16
   218e4:	63000404 	addi	r12,r12,16
   218e8:	5ac00404 	addi	r11,r11,16
   218ec:	52800404 	addi	r10,r10,16
   218f0:	4a400404 	addi	r9,r9,16
   218f4:	1c3fef1e 	bne	r3,r16,218b4 <_gp+0xfffd7e34>
   218f8:	89c00044 	addi	r7,r17,1
   218fc:	380e913a 	slli	r7,r7,4
   21900:	310003cc 	andi	r4,r6,15
   21904:	02c000c4 	movi	r11,3
   21908:	11c7883a 	add	r3,r2,r7
   2190c:	29cb883a 	add	r5,r5,r7
   21910:	5900212e 	bgeu	r11,r4,21998 <memcpy+0x140>
   21914:	1813883a 	mov	r9,r3
   21918:	2811883a 	mov	r8,r5
   2191c:	200f883a 	mov	r7,r4
   21920:	42800017 	ldw	r10,0(r8)
   21924:	4a400104 	addi	r9,r9,4
   21928:	39ffff04 	addi	r7,r7,-4
   2192c:	4abfff15 	stw	r10,-4(r9)
   21930:	42000104 	addi	r8,r8,4
   21934:	59fffa36 	bltu	r11,r7,21920 <_gp+0xfffd7ea0>
   21938:	213fff04 	addi	r4,r4,-4
   2193c:	2008d0ba 	srli	r4,r4,2
   21940:	318000cc 	andi	r6,r6,3
   21944:	21000044 	addi	r4,r4,1
   21948:	2109883a 	add	r4,r4,r4
   2194c:	2109883a 	add	r4,r4,r4
   21950:	1907883a 	add	r3,r3,r4
   21954:	290b883a 	add	r5,r5,r4
   21958:	30000626 	beq	r6,zero,21974 <memcpy+0x11c>
   2195c:	198d883a 	add	r6,r3,r6
   21960:	29c00003 	ldbu	r7,0(r5)
   21964:	18c00044 	addi	r3,r3,1
   21968:	29400044 	addi	r5,r5,1
   2196c:	19ffffc5 	stb	r7,-1(r3)
   21970:	19bffb1e 	bne	r3,r6,21960 <_gp+0xfffd7ee0>
   21974:	dfc00217 	ldw	ra,8(sp)
   21978:	dc400117 	ldw	r17,4(sp)
   2197c:	dc000017 	ldw	r16,0(sp)
   21980:	dec00304 	addi	sp,sp,12
   21984:	f800283a 	ret
   21988:	2007883a 	mov	r3,r4
   2198c:	003ff206 	br	21958 <_gp+0xfffd7ed8>
   21990:	2007883a 	mov	r3,r4
   21994:	003ff106 	br	2195c <_gp+0xfffd7edc>
   21998:	200d883a 	mov	r6,r4
   2199c:	003fee06 	br	21958 <_gp+0xfffd7ed8>

000219a0 <memmove>:
   219a0:	2005883a 	mov	r2,r4
   219a4:	29000b2e 	bgeu	r5,r4,219d4 <memmove+0x34>
   219a8:	298f883a 	add	r7,r5,r6
   219ac:	21c0092e 	bgeu	r4,r7,219d4 <memmove+0x34>
   219b0:	2187883a 	add	r3,r4,r6
   219b4:	198bc83a 	sub	r5,r3,r6
   219b8:	30004826 	beq	r6,zero,21adc <memmove+0x13c>
   219bc:	39ffffc4 	addi	r7,r7,-1
   219c0:	39000003 	ldbu	r4,0(r7)
   219c4:	18ffffc4 	addi	r3,r3,-1
   219c8:	19000005 	stb	r4,0(r3)
   219cc:	28fffb1e 	bne	r5,r3,219bc <_gp+0xfffd7f3c>
   219d0:	f800283a 	ret
   219d4:	00c003c4 	movi	r3,15
   219d8:	1980412e 	bgeu	r3,r6,21ae0 <memmove+0x140>
   219dc:	2886b03a 	or	r3,r5,r2
   219e0:	18c000cc 	andi	r3,r3,3
   219e4:	1800401e 	bne	r3,zero,21ae8 <memmove+0x148>
   219e8:	33fffc04 	addi	r15,r6,-16
   219ec:	781ed13a 	srli	r15,r15,4
   219f0:	28c00104 	addi	r3,r5,4
   219f4:	13400104 	addi	r13,r2,4
   219f8:	781c913a 	slli	r14,r15,4
   219fc:	2b000204 	addi	r12,r5,8
   21a00:	12c00204 	addi	r11,r2,8
   21a04:	73800504 	addi	r14,r14,20
   21a08:	2a800304 	addi	r10,r5,12
   21a0c:	12400304 	addi	r9,r2,12
   21a10:	2b9d883a 	add	r14,r5,r14
   21a14:	2811883a 	mov	r8,r5
   21a18:	100f883a 	mov	r7,r2
   21a1c:	41000017 	ldw	r4,0(r8)
   21a20:	39c00404 	addi	r7,r7,16
   21a24:	18c00404 	addi	r3,r3,16
   21a28:	393ffc15 	stw	r4,-16(r7)
   21a2c:	193ffc17 	ldw	r4,-16(r3)
   21a30:	6b400404 	addi	r13,r13,16
   21a34:	5ac00404 	addi	r11,r11,16
   21a38:	693ffc15 	stw	r4,-16(r13)
   21a3c:	61000017 	ldw	r4,0(r12)
   21a40:	4a400404 	addi	r9,r9,16
   21a44:	42000404 	addi	r8,r8,16
   21a48:	593ffc15 	stw	r4,-16(r11)
   21a4c:	51000017 	ldw	r4,0(r10)
   21a50:	63000404 	addi	r12,r12,16
   21a54:	52800404 	addi	r10,r10,16
   21a58:	493ffc15 	stw	r4,-16(r9)
   21a5c:	1bbfef1e 	bne	r3,r14,21a1c <_gp+0xfffd7f9c>
   21a60:	79000044 	addi	r4,r15,1
   21a64:	2008913a 	slli	r4,r4,4
   21a68:	328003cc 	andi	r10,r6,15
   21a6c:	02c000c4 	movi	r11,3
   21a70:	1107883a 	add	r3,r2,r4
   21a74:	290b883a 	add	r5,r5,r4
   21a78:	5a801e2e 	bgeu	r11,r10,21af4 <memmove+0x154>
   21a7c:	1813883a 	mov	r9,r3
   21a80:	2811883a 	mov	r8,r5
   21a84:	500f883a 	mov	r7,r10
   21a88:	41000017 	ldw	r4,0(r8)
   21a8c:	4a400104 	addi	r9,r9,4
   21a90:	39ffff04 	addi	r7,r7,-4
   21a94:	493fff15 	stw	r4,-4(r9)
   21a98:	42000104 	addi	r8,r8,4
   21a9c:	59fffa36 	bltu	r11,r7,21a88 <_gp+0xfffd8008>
   21aa0:	513fff04 	addi	r4,r10,-4
   21aa4:	2008d0ba 	srli	r4,r4,2
   21aa8:	318000cc 	andi	r6,r6,3
   21aac:	21000044 	addi	r4,r4,1
   21ab0:	2109883a 	add	r4,r4,r4
   21ab4:	2109883a 	add	r4,r4,r4
   21ab8:	1907883a 	add	r3,r3,r4
   21abc:	290b883a 	add	r5,r5,r4
   21ac0:	30000b26 	beq	r6,zero,21af0 <memmove+0x150>
   21ac4:	198d883a 	add	r6,r3,r6
   21ac8:	29c00003 	ldbu	r7,0(r5)
   21acc:	18c00044 	addi	r3,r3,1
   21ad0:	29400044 	addi	r5,r5,1
   21ad4:	19ffffc5 	stb	r7,-1(r3)
   21ad8:	19bffb1e 	bne	r3,r6,21ac8 <_gp+0xfffd8048>
   21adc:	f800283a 	ret
   21ae0:	1007883a 	mov	r3,r2
   21ae4:	003ff606 	br	21ac0 <_gp+0xfffd8040>
   21ae8:	1007883a 	mov	r3,r2
   21aec:	003ff506 	br	21ac4 <_gp+0xfffd8044>
   21af0:	f800283a 	ret
   21af4:	500d883a 	mov	r6,r10
   21af8:	003ff106 	br	21ac0 <_gp+0xfffd8040>

00021afc <memset>:
   21afc:	20c000cc 	andi	r3,r4,3
   21b00:	2005883a 	mov	r2,r4
   21b04:	18004426 	beq	r3,zero,21c18 <memset+0x11c>
   21b08:	31ffffc4 	addi	r7,r6,-1
   21b0c:	30004026 	beq	r6,zero,21c10 <memset+0x114>
   21b10:	2813883a 	mov	r9,r5
   21b14:	200d883a 	mov	r6,r4
   21b18:	2007883a 	mov	r3,r4
   21b1c:	00000406 	br	21b30 <memset+0x34>
   21b20:	3a3fffc4 	addi	r8,r7,-1
   21b24:	31800044 	addi	r6,r6,1
   21b28:	38003926 	beq	r7,zero,21c10 <memset+0x114>
   21b2c:	400f883a 	mov	r7,r8
   21b30:	18c00044 	addi	r3,r3,1
   21b34:	32400005 	stb	r9,0(r6)
   21b38:	1a0000cc 	andi	r8,r3,3
   21b3c:	403ff81e 	bne	r8,zero,21b20 <_gp+0xfffd80a0>
   21b40:	010000c4 	movi	r4,3
   21b44:	21c02d2e 	bgeu	r4,r7,21bfc <memset+0x100>
   21b48:	29003fcc 	andi	r4,r5,255
   21b4c:	200c923a 	slli	r6,r4,8
   21b50:	3108b03a 	or	r4,r6,r4
   21b54:	200c943a 	slli	r6,r4,16
   21b58:	218cb03a 	or	r6,r4,r6
   21b5c:	010003c4 	movi	r4,15
   21b60:	21c0182e 	bgeu	r4,r7,21bc4 <memset+0xc8>
   21b64:	3b3ffc04 	addi	r12,r7,-16
   21b68:	6018d13a 	srli	r12,r12,4
   21b6c:	1a000104 	addi	r8,r3,4
   21b70:	1ac00204 	addi	r11,r3,8
   21b74:	6008913a 	slli	r4,r12,4
   21b78:	1a800304 	addi	r10,r3,12
   21b7c:	1813883a 	mov	r9,r3
   21b80:	21000504 	addi	r4,r4,20
   21b84:	1909883a 	add	r4,r3,r4
   21b88:	49800015 	stw	r6,0(r9)
   21b8c:	41800015 	stw	r6,0(r8)
   21b90:	59800015 	stw	r6,0(r11)
   21b94:	51800015 	stw	r6,0(r10)
   21b98:	42000404 	addi	r8,r8,16
   21b9c:	4a400404 	addi	r9,r9,16
   21ba0:	5ac00404 	addi	r11,r11,16
   21ba4:	52800404 	addi	r10,r10,16
   21ba8:	413ff71e 	bne	r8,r4,21b88 <_gp+0xfffd8108>
   21bac:	63000044 	addi	r12,r12,1
   21bb0:	6018913a 	slli	r12,r12,4
   21bb4:	39c003cc 	andi	r7,r7,15
   21bb8:	010000c4 	movi	r4,3
   21bbc:	1b07883a 	add	r3,r3,r12
   21bc0:	21c00e2e 	bgeu	r4,r7,21bfc <memset+0x100>
   21bc4:	1813883a 	mov	r9,r3
   21bc8:	3811883a 	mov	r8,r7
   21bcc:	010000c4 	movi	r4,3
   21bd0:	49800015 	stw	r6,0(r9)
   21bd4:	423fff04 	addi	r8,r8,-4
   21bd8:	4a400104 	addi	r9,r9,4
   21bdc:	223ffc36 	bltu	r4,r8,21bd0 <_gp+0xfffd8150>
   21be0:	393fff04 	addi	r4,r7,-4
   21be4:	2008d0ba 	srli	r4,r4,2
   21be8:	39c000cc 	andi	r7,r7,3
   21bec:	21000044 	addi	r4,r4,1
   21bf0:	2109883a 	add	r4,r4,r4
   21bf4:	2109883a 	add	r4,r4,r4
   21bf8:	1907883a 	add	r3,r3,r4
   21bfc:	38000526 	beq	r7,zero,21c14 <memset+0x118>
   21c00:	19cf883a 	add	r7,r3,r7
   21c04:	19400005 	stb	r5,0(r3)
   21c08:	18c00044 	addi	r3,r3,1
   21c0c:	38fffd1e 	bne	r7,r3,21c04 <_gp+0xfffd8184>
   21c10:	f800283a 	ret
   21c14:	f800283a 	ret
   21c18:	2007883a 	mov	r3,r4
   21c1c:	300f883a 	mov	r7,r6
   21c20:	003fc706 	br	21b40 <_gp+0xfffd80c0>

00021c24 <_realloc_r>:
   21c24:	defff604 	addi	sp,sp,-40
   21c28:	dc800215 	stw	r18,8(sp)
   21c2c:	dfc00915 	stw	ra,36(sp)
   21c30:	df000815 	stw	fp,32(sp)
   21c34:	ddc00715 	stw	r23,28(sp)
   21c38:	dd800615 	stw	r22,24(sp)
   21c3c:	dd400515 	stw	r21,20(sp)
   21c40:	dd000415 	stw	r20,16(sp)
   21c44:	dcc00315 	stw	r19,12(sp)
   21c48:	dc400115 	stw	r17,4(sp)
   21c4c:	dc000015 	stw	r16,0(sp)
   21c50:	3025883a 	mov	r18,r6
   21c54:	2800b726 	beq	r5,zero,21f34 <_realloc_r+0x310>
   21c58:	282b883a 	mov	r21,r5
   21c5c:	2029883a 	mov	r20,r4
   21c60:	00238fc0 	call	238fc <__malloc_lock>
   21c64:	a8bfff17 	ldw	r2,-4(r21)
   21c68:	043fff04 	movi	r16,-4
   21c6c:	90c002c4 	addi	r3,r18,11
   21c70:	01000584 	movi	r4,22
   21c74:	acfffe04 	addi	r19,r21,-8
   21c78:	1420703a 	and	r16,r2,r16
   21c7c:	20c0332e 	bgeu	r4,r3,21d4c <_realloc_r+0x128>
   21c80:	047ffe04 	movi	r17,-8
   21c84:	1c62703a 	and	r17,r3,r17
   21c88:	8807883a 	mov	r3,r17
   21c8c:	88005816 	blt	r17,zero,21df0 <_realloc_r+0x1cc>
   21c90:	8c805736 	bltu	r17,r18,21df0 <_realloc_r+0x1cc>
   21c94:	80c0300e 	bge	r16,r3,21d58 <_realloc_r+0x134>
   21c98:	07000134 	movhi	fp,4
   21c9c:	e7011c04 	addi	fp,fp,1136
   21ca0:	e1c00217 	ldw	r7,8(fp)
   21ca4:	9c09883a 	add	r4,r19,r16
   21ca8:	22000117 	ldw	r8,4(r4)
   21cac:	21c06326 	beq	r4,r7,21e3c <_realloc_r+0x218>
   21cb0:	017fff84 	movi	r5,-2
   21cb4:	414a703a 	and	r5,r8,r5
   21cb8:	214b883a 	add	r5,r4,r5
   21cbc:	29800117 	ldw	r6,4(r5)
   21cc0:	3180004c 	andi	r6,r6,1
   21cc4:	30003f26 	beq	r6,zero,21dc4 <_realloc_r+0x1a0>
   21cc8:	1080004c 	andi	r2,r2,1
   21ccc:	10008326 	beq	r2,zero,21edc <_realloc_r+0x2b8>
   21cd0:	900b883a 	mov	r5,r18
   21cd4:	a009883a 	mov	r4,r20
   21cd8:	0020f680 	call	20f68 <_malloc_r>
   21cdc:	1025883a 	mov	r18,r2
   21ce0:	10011e26 	beq	r2,zero,2215c <_realloc_r+0x538>
   21ce4:	a93fff17 	ldw	r4,-4(r21)
   21ce8:	10fffe04 	addi	r3,r2,-8
   21cec:	00bfff84 	movi	r2,-2
   21cf0:	2084703a 	and	r2,r4,r2
   21cf4:	9885883a 	add	r2,r19,r2
   21cf8:	1880ee26 	beq	r3,r2,220b4 <_realloc_r+0x490>
   21cfc:	81bfff04 	addi	r6,r16,-4
   21d00:	00800904 	movi	r2,36
   21d04:	1180b836 	bltu	r2,r6,21fe8 <_realloc_r+0x3c4>
   21d08:	00c004c4 	movi	r3,19
   21d0c:	19809636 	bltu	r3,r6,21f68 <_realloc_r+0x344>
   21d10:	9005883a 	mov	r2,r18
   21d14:	a807883a 	mov	r3,r21
   21d18:	19000017 	ldw	r4,0(r3)
   21d1c:	11000015 	stw	r4,0(r2)
   21d20:	19000117 	ldw	r4,4(r3)
   21d24:	11000115 	stw	r4,4(r2)
   21d28:	18c00217 	ldw	r3,8(r3)
   21d2c:	10c00215 	stw	r3,8(r2)
   21d30:	a80b883a 	mov	r5,r21
   21d34:	a009883a 	mov	r4,r20
   21d38:	00229f00 	call	229f0 <_free_r>
   21d3c:	a009883a 	mov	r4,r20
   21d40:	00239200 	call	23920 <__malloc_unlock>
   21d44:	9005883a 	mov	r2,r18
   21d48:	00001206 	br	21d94 <_realloc_r+0x170>
   21d4c:	00c00404 	movi	r3,16
   21d50:	1823883a 	mov	r17,r3
   21d54:	003fce06 	br	21c90 <_gp+0xfffd8210>
   21d58:	a825883a 	mov	r18,r21
   21d5c:	8445c83a 	sub	r2,r16,r17
   21d60:	00c003c4 	movi	r3,15
   21d64:	18802636 	bltu	r3,r2,21e00 <_realloc_r+0x1dc>
   21d68:	99800117 	ldw	r6,4(r19)
   21d6c:	9c07883a 	add	r3,r19,r16
   21d70:	3180004c 	andi	r6,r6,1
   21d74:	3420b03a 	or	r16,r6,r16
   21d78:	9c000115 	stw	r16,4(r19)
   21d7c:	18800117 	ldw	r2,4(r3)
   21d80:	10800054 	ori	r2,r2,1
   21d84:	18800115 	stw	r2,4(r3)
   21d88:	a009883a 	mov	r4,r20
   21d8c:	00239200 	call	23920 <__malloc_unlock>
   21d90:	9005883a 	mov	r2,r18
   21d94:	dfc00917 	ldw	ra,36(sp)
   21d98:	df000817 	ldw	fp,32(sp)
   21d9c:	ddc00717 	ldw	r23,28(sp)
   21da0:	dd800617 	ldw	r22,24(sp)
   21da4:	dd400517 	ldw	r21,20(sp)
   21da8:	dd000417 	ldw	r20,16(sp)
   21dac:	dcc00317 	ldw	r19,12(sp)
   21db0:	dc800217 	ldw	r18,8(sp)
   21db4:	dc400117 	ldw	r17,4(sp)
   21db8:	dc000017 	ldw	r16,0(sp)
   21dbc:	dec00a04 	addi	sp,sp,40
   21dc0:	f800283a 	ret
   21dc4:	017fff04 	movi	r5,-4
   21dc8:	414a703a 	and	r5,r8,r5
   21dcc:	814d883a 	add	r6,r16,r5
   21dd0:	30c01f16 	blt	r6,r3,21e50 <_realloc_r+0x22c>
   21dd4:	20800317 	ldw	r2,12(r4)
   21dd8:	20c00217 	ldw	r3,8(r4)
   21ddc:	a825883a 	mov	r18,r21
   21de0:	3021883a 	mov	r16,r6
   21de4:	18800315 	stw	r2,12(r3)
   21de8:	10c00215 	stw	r3,8(r2)
   21dec:	003fdb06 	br	21d5c <_gp+0xfffd82dc>
   21df0:	00800304 	movi	r2,12
   21df4:	a0800015 	stw	r2,0(r20)
   21df8:	0005883a 	mov	r2,zero
   21dfc:	003fe506 	br	21d94 <_gp+0xfffd8314>
   21e00:	98c00117 	ldw	r3,4(r19)
   21e04:	9c4b883a 	add	r5,r19,r17
   21e08:	11000054 	ori	r4,r2,1
   21e0c:	18c0004c 	andi	r3,r3,1
   21e10:	1c62b03a 	or	r17,r3,r17
   21e14:	9c400115 	stw	r17,4(r19)
   21e18:	29000115 	stw	r4,4(r5)
   21e1c:	2885883a 	add	r2,r5,r2
   21e20:	10c00117 	ldw	r3,4(r2)
   21e24:	29400204 	addi	r5,r5,8
   21e28:	a009883a 	mov	r4,r20
   21e2c:	18c00054 	ori	r3,r3,1
   21e30:	10c00115 	stw	r3,4(r2)
   21e34:	00229f00 	call	229f0 <_free_r>
   21e38:	003fd306 	br	21d88 <_gp+0xfffd8308>
   21e3c:	017fff04 	movi	r5,-4
   21e40:	414a703a 	and	r5,r8,r5
   21e44:	89800404 	addi	r6,r17,16
   21e48:	8151883a 	add	r8,r16,r5
   21e4c:	4180590e 	bge	r8,r6,21fb4 <_realloc_r+0x390>
   21e50:	1080004c 	andi	r2,r2,1
   21e54:	103f9e1e 	bne	r2,zero,21cd0 <_gp+0xfffd8250>
   21e58:	adbffe17 	ldw	r22,-8(r21)
   21e5c:	00bfff04 	movi	r2,-4
   21e60:	9dadc83a 	sub	r22,r19,r22
   21e64:	b1800117 	ldw	r6,4(r22)
   21e68:	3084703a 	and	r2,r6,r2
   21e6c:	20002026 	beq	r4,zero,21ef0 <_realloc_r+0x2cc>
   21e70:	80af883a 	add	r23,r16,r2
   21e74:	b96f883a 	add	r23,r23,r5
   21e78:	21c05f26 	beq	r4,r7,21ff8 <_realloc_r+0x3d4>
   21e7c:	b8c01c16 	blt	r23,r3,21ef0 <_realloc_r+0x2cc>
   21e80:	20800317 	ldw	r2,12(r4)
   21e84:	20c00217 	ldw	r3,8(r4)
   21e88:	81bfff04 	addi	r6,r16,-4
   21e8c:	01000904 	movi	r4,36
   21e90:	18800315 	stw	r2,12(r3)
   21e94:	10c00215 	stw	r3,8(r2)
   21e98:	b0c00217 	ldw	r3,8(r22)
   21e9c:	b0800317 	ldw	r2,12(r22)
   21ea0:	b4800204 	addi	r18,r22,8
   21ea4:	18800315 	stw	r2,12(r3)
   21ea8:	10c00215 	stw	r3,8(r2)
   21eac:	21801b36 	bltu	r4,r6,21f1c <_realloc_r+0x2f8>
   21eb0:	008004c4 	movi	r2,19
   21eb4:	1180352e 	bgeu	r2,r6,21f8c <_realloc_r+0x368>
   21eb8:	a8800017 	ldw	r2,0(r21)
   21ebc:	b0800215 	stw	r2,8(r22)
   21ec0:	a8800117 	ldw	r2,4(r21)
   21ec4:	b0800315 	stw	r2,12(r22)
   21ec8:	008006c4 	movi	r2,27
   21ecc:	11807f36 	bltu	r2,r6,220cc <_realloc_r+0x4a8>
   21ed0:	b0800404 	addi	r2,r22,16
   21ed4:	ad400204 	addi	r21,r21,8
   21ed8:	00002d06 	br	21f90 <_realloc_r+0x36c>
   21edc:	adbffe17 	ldw	r22,-8(r21)
   21ee0:	00bfff04 	movi	r2,-4
   21ee4:	9dadc83a 	sub	r22,r19,r22
   21ee8:	b1000117 	ldw	r4,4(r22)
   21eec:	2084703a 	and	r2,r4,r2
   21ef0:	b03f7726 	beq	r22,zero,21cd0 <_gp+0xfffd8250>
   21ef4:	80af883a 	add	r23,r16,r2
   21ef8:	b8ff7516 	blt	r23,r3,21cd0 <_gp+0xfffd8250>
   21efc:	b0800317 	ldw	r2,12(r22)
   21f00:	b0c00217 	ldw	r3,8(r22)
   21f04:	81bfff04 	addi	r6,r16,-4
   21f08:	01000904 	movi	r4,36
   21f0c:	18800315 	stw	r2,12(r3)
   21f10:	10c00215 	stw	r3,8(r2)
   21f14:	b4800204 	addi	r18,r22,8
   21f18:	21bfe52e 	bgeu	r4,r6,21eb0 <_gp+0xfffd8430>
   21f1c:	a80b883a 	mov	r5,r21
   21f20:	9009883a 	mov	r4,r18
   21f24:	00219a00 	call	219a0 <memmove>
   21f28:	b821883a 	mov	r16,r23
   21f2c:	b027883a 	mov	r19,r22
   21f30:	003f8a06 	br	21d5c <_gp+0xfffd82dc>
   21f34:	300b883a 	mov	r5,r6
   21f38:	dfc00917 	ldw	ra,36(sp)
   21f3c:	df000817 	ldw	fp,32(sp)
   21f40:	ddc00717 	ldw	r23,28(sp)
   21f44:	dd800617 	ldw	r22,24(sp)
   21f48:	dd400517 	ldw	r21,20(sp)
   21f4c:	dd000417 	ldw	r20,16(sp)
   21f50:	dcc00317 	ldw	r19,12(sp)
   21f54:	dc800217 	ldw	r18,8(sp)
   21f58:	dc400117 	ldw	r17,4(sp)
   21f5c:	dc000017 	ldw	r16,0(sp)
   21f60:	dec00a04 	addi	sp,sp,40
   21f64:	0020f681 	jmpi	20f68 <_malloc_r>
   21f68:	a8c00017 	ldw	r3,0(r21)
   21f6c:	90c00015 	stw	r3,0(r18)
   21f70:	a8c00117 	ldw	r3,4(r21)
   21f74:	90c00115 	stw	r3,4(r18)
   21f78:	00c006c4 	movi	r3,27
   21f7c:	19804536 	bltu	r3,r6,22094 <_realloc_r+0x470>
   21f80:	90800204 	addi	r2,r18,8
   21f84:	a8c00204 	addi	r3,r21,8
   21f88:	003f6306 	br	21d18 <_gp+0xfffd8298>
   21f8c:	9005883a 	mov	r2,r18
   21f90:	a8c00017 	ldw	r3,0(r21)
   21f94:	b821883a 	mov	r16,r23
   21f98:	b027883a 	mov	r19,r22
   21f9c:	10c00015 	stw	r3,0(r2)
   21fa0:	a8c00117 	ldw	r3,4(r21)
   21fa4:	10c00115 	stw	r3,4(r2)
   21fa8:	a8c00217 	ldw	r3,8(r21)
   21fac:	10c00215 	stw	r3,8(r2)
   21fb0:	003f6a06 	br	21d5c <_gp+0xfffd82dc>
   21fb4:	9c67883a 	add	r19,r19,r17
   21fb8:	4445c83a 	sub	r2,r8,r17
   21fbc:	e4c00215 	stw	r19,8(fp)
   21fc0:	10800054 	ori	r2,r2,1
   21fc4:	98800115 	stw	r2,4(r19)
   21fc8:	a8bfff17 	ldw	r2,-4(r21)
   21fcc:	a009883a 	mov	r4,r20
   21fd0:	1080004c 	andi	r2,r2,1
   21fd4:	1462b03a 	or	r17,r2,r17
   21fd8:	ac7fff15 	stw	r17,-4(r21)
   21fdc:	00239200 	call	23920 <__malloc_unlock>
   21fe0:	a805883a 	mov	r2,r21
   21fe4:	003f6b06 	br	21d94 <_gp+0xfffd8314>
   21fe8:	a80b883a 	mov	r5,r21
   21fec:	9009883a 	mov	r4,r18
   21ff0:	00219a00 	call	219a0 <memmove>
   21ff4:	003f4e06 	br	21d30 <_gp+0xfffd82b0>
   21ff8:	89000404 	addi	r4,r17,16
   21ffc:	b93fbc16 	blt	r23,r4,21ef0 <_gp+0xfffd8470>
   22000:	b0800317 	ldw	r2,12(r22)
   22004:	b0c00217 	ldw	r3,8(r22)
   22008:	81bfff04 	addi	r6,r16,-4
   2200c:	01000904 	movi	r4,36
   22010:	18800315 	stw	r2,12(r3)
   22014:	10c00215 	stw	r3,8(r2)
   22018:	b4800204 	addi	r18,r22,8
   2201c:	21804336 	bltu	r4,r6,2212c <_realloc_r+0x508>
   22020:	008004c4 	movi	r2,19
   22024:	11803f2e 	bgeu	r2,r6,22124 <_realloc_r+0x500>
   22028:	a8800017 	ldw	r2,0(r21)
   2202c:	b0800215 	stw	r2,8(r22)
   22030:	a8800117 	ldw	r2,4(r21)
   22034:	b0800315 	stw	r2,12(r22)
   22038:	008006c4 	movi	r2,27
   2203c:	11803f36 	bltu	r2,r6,2213c <_realloc_r+0x518>
   22040:	b0800404 	addi	r2,r22,16
   22044:	ad400204 	addi	r21,r21,8
   22048:	a8c00017 	ldw	r3,0(r21)
   2204c:	10c00015 	stw	r3,0(r2)
   22050:	a8c00117 	ldw	r3,4(r21)
   22054:	10c00115 	stw	r3,4(r2)
   22058:	a8c00217 	ldw	r3,8(r21)
   2205c:	10c00215 	stw	r3,8(r2)
   22060:	b447883a 	add	r3,r22,r17
   22064:	bc45c83a 	sub	r2,r23,r17
   22068:	e0c00215 	stw	r3,8(fp)
   2206c:	10800054 	ori	r2,r2,1
   22070:	18800115 	stw	r2,4(r3)
   22074:	b0800117 	ldw	r2,4(r22)
   22078:	a009883a 	mov	r4,r20
   2207c:	1080004c 	andi	r2,r2,1
   22080:	1462b03a 	or	r17,r2,r17
   22084:	b4400115 	stw	r17,4(r22)
   22088:	00239200 	call	23920 <__malloc_unlock>
   2208c:	9005883a 	mov	r2,r18
   22090:	003f4006 	br	21d94 <_gp+0xfffd8314>
   22094:	a8c00217 	ldw	r3,8(r21)
   22098:	90c00215 	stw	r3,8(r18)
   2209c:	a8c00317 	ldw	r3,12(r21)
   220a0:	90c00315 	stw	r3,12(r18)
   220a4:	30801126 	beq	r6,r2,220ec <_realloc_r+0x4c8>
   220a8:	90800404 	addi	r2,r18,16
   220ac:	a8c00404 	addi	r3,r21,16
   220b0:	003f1906 	br	21d18 <_gp+0xfffd8298>
   220b4:	90ffff17 	ldw	r3,-4(r18)
   220b8:	00bfff04 	movi	r2,-4
   220bc:	a825883a 	mov	r18,r21
   220c0:	1884703a 	and	r2,r3,r2
   220c4:	80a1883a 	add	r16,r16,r2
   220c8:	003f2406 	br	21d5c <_gp+0xfffd82dc>
   220cc:	a8800217 	ldw	r2,8(r21)
   220d0:	b0800415 	stw	r2,16(r22)
   220d4:	a8800317 	ldw	r2,12(r21)
   220d8:	b0800515 	stw	r2,20(r22)
   220dc:	31000a26 	beq	r6,r4,22108 <_realloc_r+0x4e4>
   220e0:	b0800604 	addi	r2,r22,24
   220e4:	ad400404 	addi	r21,r21,16
   220e8:	003fa906 	br	21f90 <_gp+0xfffd8510>
   220ec:	a9000417 	ldw	r4,16(r21)
   220f0:	90800604 	addi	r2,r18,24
   220f4:	a8c00604 	addi	r3,r21,24
   220f8:	91000415 	stw	r4,16(r18)
   220fc:	a9000517 	ldw	r4,20(r21)
   22100:	91000515 	stw	r4,20(r18)
   22104:	003f0406 	br	21d18 <_gp+0xfffd8298>
   22108:	a8c00417 	ldw	r3,16(r21)
   2210c:	ad400604 	addi	r21,r21,24
   22110:	b0800804 	addi	r2,r22,32
   22114:	b0c00615 	stw	r3,24(r22)
   22118:	a8ffff17 	ldw	r3,-4(r21)
   2211c:	b0c00715 	stw	r3,28(r22)
   22120:	003f9b06 	br	21f90 <_gp+0xfffd8510>
   22124:	9005883a 	mov	r2,r18
   22128:	003fc706 	br	22048 <_gp+0xfffd85c8>
   2212c:	a80b883a 	mov	r5,r21
   22130:	9009883a 	mov	r4,r18
   22134:	00219a00 	call	219a0 <memmove>
   22138:	003fc906 	br	22060 <_gp+0xfffd85e0>
   2213c:	a8800217 	ldw	r2,8(r21)
   22140:	b0800415 	stw	r2,16(r22)
   22144:	a8800317 	ldw	r2,12(r21)
   22148:	b0800515 	stw	r2,20(r22)
   2214c:	31000726 	beq	r6,r4,2216c <_realloc_r+0x548>
   22150:	b0800604 	addi	r2,r22,24
   22154:	ad400404 	addi	r21,r21,16
   22158:	003fbb06 	br	22048 <_gp+0xfffd85c8>
   2215c:	a009883a 	mov	r4,r20
   22160:	00239200 	call	23920 <__malloc_unlock>
   22164:	0005883a 	mov	r2,zero
   22168:	003f0a06 	br	21d94 <_gp+0xfffd8314>
   2216c:	a8c00417 	ldw	r3,16(r21)
   22170:	ad400604 	addi	r21,r21,24
   22174:	b0800804 	addi	r2,r22,32
   22178:	b0c00615 	stw	r3,24(r22)
   2217c:	a8ffff17 	ldw	r3,-4(r21)
   22180:	b0c00715 	stw	r3,28(r22)
   22184:	003fb006 	br	22048 <_gp+0xfffd85c8>

00022188 <_sbrk_r>:
   22188:	defffd04 	addi	sp,sp,-12
   2218c:	dc000015 	stw	r16,0(sp)
   22190:	04000134 	movhi	r16,4
   22194:	dc400115 	stw	r17,4(sp)
   22198:	8406b304 	addi	r16,r16,6860
   2219c:	2023883a 	mov	r17,r4
   221a0:	2809883a 	mov	r4,r5
   221a4:	dfc00215 	stw	ra,8(sp)
   221a8:	80000015 	stw	zero,0(r16)
   221ac:	0023b080 	call	23b08 <sbrk>
   221b0:	00ffffc4 	movi	r3,-1
   221b4:	10c00526 	beq	r2,r3,221cc <_sbrk_r+0x44>
   221b8:	dfc00217 	ldw	ra,8(sp)
   221bc:	dc400117 	ldw	r17,4(sp)
   221c0:	dc000017 	ldw	r16,0(sp)
   221c4:	dec00304 	addi	sp,sp,12
   221c8:	f800283a 	ret
   221cc:	80c00017 	ldw	r3,0(r16)
   221d0:	183ff926 	beq	r3,zero,221b8 <_gp+0xfffd8738>
   221d4:	88c00015 	stw	r3,0(r17)
   221d8:	003ff706 	br	221b8 <_gp+0xfffd8738>

000221dc <__sread>:
   221dc:	defffe04 	addi	sp,sp,-8
   221e0:	dc000015 	stw	r16,0(sp)
   221e4:	2821883a 	mov	r16,r5
   221e8:	2940038f 	ldh	r5,14(r5)
   221ec:	dfc00115 	stw	ra,4(sp)
   221f0:	0022f1c0 	call	22f1c <_read_r>
   221f4:	10000716 	blt	r2,zero,22214 <__sread+0x38>
   221f8:	80c01417 	ldw	r3,80(r16)
   221fc:	1887883a 	add	r3,r3,r2
   22200:	80c01415 	stw	r3,80(r16)
   22204:	dfc00117 	ldw	ra,4(sp)
   22208:	dc000017 	ldw	r16,0(sp)
   2220c:	dec00204 	addi	sp,sp,8
   22210:	f800283a 	ret
   22214:	80c0030b 	ldhu	r3,12(r16)
   22218:	18fbffcc 	andi	r3,r3,61439
   2221c:	80c0030d 	sth	r3,12(r16)
   22220:	dfc00117 	ldw	ra,4(sp)
   22224:	dc000017 	ldw	r16,0(sp)
   22228:	dec00204 	addi	sp,sp,8
   2222c:	f800283a 	ret

00022230 <__seofread>:
   22230:	0005883a 	mov	r2,zero
   22234:	f800283a 	ret

00022238 <__swrite>:
   22238:	2880030b 	ldhu	r2,12(r5)
   2223c:	defffb04 	addi	sp,sp,-20
   22240:	dcc00315 	stw	r19,12(sp)
   22244:	dc800215 	stw	r18,8(sp)
   22248:	dc400115 	stw	r17,4(sp)
   2224c:	dc000015 	stw	r16,0(sp)
   22250:	dfc00415 	stw	ra,16(sp)
   22254:	10c0400c 	andi	r3,r2,256
   22258:	2821883a 	mov	r16,r5
   2225c:	2023883a 	mov	r17,r4
   22260:	3025883a 	mov	r18,r6
   22264:	3827883a 	mov	r19,r7
   22268:	18000526 	beq	r3,zero,22280 <__swrite+0x48>
   2226c:	2940038f 	ldh	r5,14(r5)
   22270:	01c00084 	movi	r7,2
   22274:	000d883a 	mov	r6,zero
   22278:	0022d000 	call	22d00 <_lseek_r>
   2227c:	8080030b 	ldhu	r2,12(r16)
   22280:	8140038f 	ldh	r5,14(r16)
   22284:	10bbffcc 	andi	r2,r2,61439
   22288:	980f883a 	mov	r7,r19
   2228c:	900d883a 	mov	r6,r18
   22290:	8809883a 	mov	r4,r17
   22294:	8080030d 	sth	r2,12(r16)
   22298:	dfc00417 	ldw	ra,16(sp)
   2229c:	dcc00317 	ldw	r19,12(sp)
   222a0:	dc800217 	ldw	r18,8(sp)
   222a4:	dc400117 	ldw	r17,4(sp)
   222a8:	dc000017 	ldw	r16,0(sp)
   222ac:	dec00504 	addi	sp,sp,20
   222b0:	00223181 	jmpi	22318 <_write_r>

000222b4 <__sseek>:
   222b4:	defffe04 	addi	sp,sp,-8
   222b8:	dc000015 	stw	r16,0(sp)
   222bc:	2821883a 	mov	r16,r5
   222c0:	2940038f 	ldh	r5,14(r5)
   222c4:	dfc00115 	stw	ra,4(sp)
   222c8:	0022d000 	call	22d00 <_lseek_r>
   222cc:	00ffffc4 	movi	r3,-1
   222d0:	10c00826 	beq	r2,r3,222f4 <__sseek+0x40>
   222d4:	80c0030b 	ldhu	r3,12(r16)
   222d8:	80801415 	stw	r2,80(r16)
   222dc:	18c40014 	ori	r3,r3,4096
   222e0:	80c0030d 	sth	r3,12(r16)
   222e4:	dfc00117 	ldw	ra,4(sp)
   222e8:	dc000017 	ldw	r16,0(sp)
   222ec:	dec00204 	addi	sp,sp,8
   222f0:	f800283a 	ret
   222f4:	80c0030b 	ldhu	r3,12(r16)
   222f8:	18fbffcc 	andi	r3,r3,61439
   222fc:	80c0030d 	sth	r3,12(r16)
   22300:	dfc00117 	ldw	ra,4(sp)
   22304:	dc000017 	ldw	r16,0(sp)
   22308:	dec00204 	addi	sp,sp,8
   2230c:	f800283a 	ret

00022310 <__sclose>:
   22310:	2940038f 	ldh	r5,14(r5)
   22314:	00224cc1 	jmpi	224cc <_close_r>

00022318 <_write_r>:
   22318:	defffd04 	addi	sp,sp,-12
   2231c:	2805883a 	mov	r2,r5
   22320:	dc000015 	stw	r16,0(sp)
   22324:	04000134 	movhi	r16,4
   22328:	dc400115 	stw	r17,4(sp)
   2232c:	300b883a 	mov	r5,r6
   22330:	8406b304 	addi	r16,r16,6860
   22334:	2023883a 	mov	r17,r4
   22338:	380d883a 	mov	r6,r7
   2233c:	1009883a 	mov	r4,r2
   22340:	dfc00215 	stw	ra,8(sp)
   22344:	80000015 	stw	zero,0(r16)
   22348:	0023c240 	call	23c24 <write>
   2234c:	00ffffc4 	movi	r3,-1
   22350:	10c00526 	beq	r2,r3,22368 <_write_r+0x50>
   22354:	dfc00217 	ldw	ra,8(sp)
   22358:	dc400117 	ldw	r17,4(sp)
   2235c:	dc000017 	ldw	r16,0(sp)
   22360:	dec00304 	addi	sp,sp,12
   22364:	f800283a 	ret
   22368:	80c00017 	ldw	r3,0(r16)
   2236c:	183ff926 	beq	r3,zero,22354 <_gp+0xfffd88d4>
   22370:	88c00015 	stw	r3,0(r17)
   22374:	003ff706 	br	22354 <_gp+0xfffd88d4>

00022378 <__swsetup_r>:
   22378:	00800134 	movhi	r2,4
   2237c:	defffd04 	addi	sp,sp,-12
   22380:	1086a104 	addi	r2,r2,6788
   22384:	dc400115 	stw	r17,4(sp)
   22388:	2023883a 	mov	r17,r4
   2238c:	11000017 	ldw	r4,0(r2)
   22390:	dc000015 	stw	r16,0(sp)
   22394:	dfc00215 	stw	ra,8(sp)
   22398:	2821883a 	mov	r16,r5
   2239c:	20000226 	beq	r4,zero,223a8 <__swsetup_r+0x30>
   223a0:	20800e17 	ldw	r2,56(r4)
   223a4:	10003126 	beq	r2,zero,2246c <__swsetup_r+0xf4>
   223a8:	8080030b 	ldhu	r2,12(r16)
   223ac:	10c0020c 	andi	r3,r2,8
   223b0:	1009883a 	mov	r4,r2
   223b4:	18000f26 	beq	r3,zero,223f4 <__swsetup_r+0x7c>
   223b8:	80c00417 	ldw	r3,16(r16)
   223bc:	18001526 	beq	r3,zero,22414 <__swsetup_r+0x9c>
   223c0:	1100004c 	andi	r4,r2,1
   223c4:	20001c1e 	bne	r4,zero,22438 <__swsetup_r+0xc0>
   223c8:	1080008c 	andi	r2,r2,2
   223cc:	1000291e 	bne	r2,zero,22474 <__swsetup_r+0xfc>
   223d0:	80800517 	ldw	r2,20(r16)
   223d4:	80800215 	stw	r2,8(r16)
   223d8:	18001c26 	beq	r3,zero,2244c <__swsetup_r+0xd4>
   223dc:	0005883a 	mov	r2,zero
   223e0:	dfc00217 	ldw	ra,8(sp)
   223e4:	dc400117 	ldw	r17,4(sp)
   223e8:	dc000017 	ldw	r16,0(sp)
   223ec:	dec00304 	addi	sp,sp,12
   223f0:	f800283a 	ret
   223f4:	2080040c 	andi	r2,r4,16
   223f8:	10002e26 	beq	r2,zero,224b4 <__swsetup_r+0x13c>
   223fc:	2080010c 	andi	r2,r4,4
   22400:	10001e1e 	bne	r2,zero,2247c <__swsetup_r+0x104>
   22404:	80c00417 	ldw	r3,16(r16)
   22408:	20800214 	ori	r2,r4,8
   2240c:	8080030d 	sth	r2,12(r16)
   22410:	183feb1e 	bne	r3,zero,223c0 <_gp+0xfffd8940>
   22414:	1100a00c 	andi	r4,r2,640
   22418:	01408004 	movi	r5,512
   2241c:	217fe826 	beq	r4,r5,223c0 <_gp+0xfffd8940>
   22420:	800b883a 	mov	r5,r16
   22424:	8809883a 	mov	r4,r17
   22428:	0022d600 	call	22d60 <__smakebuf_r>
   2242c:	8080030b 	ldhu	r2,12(r16)
   22430:	80c00417 	ldw	r3,16(r16)
   22434:	003fe206 	br	223c0 <_gp+0xfffd8940>
   22438:	80800517 	ldw	r2,20(r16)
   2243c:	80000215 	stw	zero,8(r16)
   22440:	0085c83a 	sub	r2,zero,r2
   22444:	80800615 	stw	r2,24(r16)
   22448:	183fe41e 	bne	r3,zero,223dc <_gp+0xfffd895c>
   2244c:	80c0030b 	ldhu	r3,12(r16)
   22450:	0005883a 	mov	r2,zero
   22454:	1900200c 	andi	r4,r3,128
   22458:	203fe126 	beq	r4,zero,223e0 <_gp+0xfffd8960>
   2245c:	18c01014 	ori	r3,r3,64
   22460:	80c0030d 	sth	r3,12(r16)
   22464:	00bfffc4 	movi	r2,-1
   22468:	003fdd06 	br	223e0 <_gp+0xfffd8960>
   2246c:	00208c80 	call	208c8 <__sinit>
   22470:	003fcd06 	br	223a8 <_gp+0xfffd8928>
   22474:	0005883a 	mov	r2,zero
   22478:	003fd606 	br	223d4 <_gp+0xfffd8954>
   2247c:	81400c17 	ldw	r5,48(r16)
   22480:	28000626 	beq	r5,zero,2249c <__swsetup_r+0x124>
   22484:	80801004 	addi	r2,r16,64
   22488:	28800326 	beq	r5,r2,22498 <__swsetup_r+0x120>
   2248c:	8809883a 	mov	r4,r17
   22490:	00229f00 	call	229f0 <_free_r>
   22494:	8100030b 	ldhu	r4,12(r16)
   22498:	80000c15 	stw	zero,48(r16)
   2249c:	80c00417 	ldw	r3,16(r16)
   224a0:	00bff6c4 	movi	r2,-37
   224a4:	1108703a 	and	r4,r2,r4
   224a8:	80000115 	stw	zero,4(r16)
   224ac:	80c00015 	stw	r3,0(r16)
   224b0:	003fd506 	br	22408 <_gp+0xfffd8988>
   224b4:	00800244 	movi	r2,9
   224b8:	88800015 	stw	r2,0(r17)
   224bc:	20801014 	ori	r2,r4,64
   224c0:	8080030d 	sth	r2,12(r16)
   224c4:	00bfffc4 	movi	r2,-1
   224c8:	003fc506 	br	223e0 <_gp+0xfffd8960>

000224cc <_close_r>:
   224cc:	defffd04 	addi	sp,sp,-12
   224d0:	dc000015 	stw	r16,0(sp)
   224d4:	04000134 	movhi	r16,4
   224d8:	dc400115 	stw	r17,4(sp)
   224dc:	8406b304 	addi	r16,r16,6860
   224e0:	2023883a 	mov	r17,r4
   224e4:	2809883a 	mov	r4,r5
   224e8:	dfc00215 	stw	ra,8(sp)
   224ec:	80000015 	stw	zero,0(r16)
   224f0:	002321c0 	call	2321c <close>
   224f4:	00ffffc4 	movi	r3,-1
   224f8:	10c00526 	beq	r2,r3,22510 <_close_r+0x44>
   224fc:	dfc00217 	ldw	ra,8(sp)
   22500:	dc400117 	ldw	r17,4(sp)
   22504:	dc000017 	ldw	r16,0(sp)
   22508:	dec00304 	addi	sp,sp,12
   2250c:	f800283a 	ret
   22510:	80c00017 	ldw	r3,0(r16)
   22514:	183ff926 	beq	r3,zero,224fc <_gp+0xfffd8a7c>
   22518:	88c00015 	stw	r3,0(r17)
   2251c:	003ff706 	br	224fc <_gp+0xfffd8a7c>

00022520 <_fclose_r>:
   22520:	28003926 	beq	r5,zero,22608 <_fclose_r+0xe8>
   22524:	defffc04 	addi	sp,sp,-16
   22528:	dc400115 	stw	r17,4(sp)
   2252c:	dc000015 	stw	r16,0(sp)
   22530:	dfc00315 	stw	ra,12(sp)
   22534:	dc800215 	stw	r18,8(sp)
   22538:	2023883a 	mov	r17,r4
   2253c:	2821883a 	mov	r16,r5
   22540:	20000226 	beq	r4,zero,2254c <_fclose_r+0x2c>
   22544:	20800e17 	ldw	r2,56(r4)
   22548:	10002726 	beq	r2,zero,225e8 <_fclose_r+0xc8>
   2254c:	8080030f 	ldh	r2,12(r16)
   22550:	1000071e 	bne	r2,zero,22570 <_fclose_r+0x50>
   22554:	0005883a 	mov	r2,zero
   22558:	dfc00317 	ldw	ra,12(sp)
   2255c:	dc800217 	ldw	r18,8(sp)
   22560:	dc400117 	ldw	r17,4(sp)
   22564:	dc000017 	ldw	r16,0(sp)
   22568:	dec00404 	addi	sp,sp,16
   2256c:	f800283a 	ret
   22570:	800b883a 	mov	r5,r16
   22574:	8809883a 	mov	r4,r17
   22578:	00226240 	call	22624 <__sflush_r>
   2257c:	1025883a 	mov	r18,r2
   22580:	80800b17 	ldw	r2,44(r16)
   22584:	10000426 	beq	r2,zero,22598 <_fclose_r+0x78>
   22588:	81400717 	ldw	r5,28(r16)
   2258c:	8809883a 	mov	r4,r17
   22590:	103ee83a 	callr	r2
   22594:	10001616 	blt	r2,zero,225f0 <_fclose_r+0xd0>
   22598:	8080030b 	ldhu	r2,12(r16)
   2259c:	1080200c 	andi	r2,r2,128
   225a0:	1000151e 	bne	r2,zero,225f8 <_fclose_r+0xd8>
   225a4:	81400c17 	ldw	r5,48(r16)
   225a8:	28000526 	beq	r5,zero,225c0 <_fclose_r+0xa0>
   225ac:	80801004 	addi	r2,r16,64
   225b0:	28800226 	beq	r5,r2,225bc <_fclose_r+0x9c>
   225b4:	8809883a 	mov	r4,r17
   225b8:	00229f00 	call	229f0 <_free_r>
   225bc:	80000c15 	stw	zero,48(r16)
   225c0:	81401117 	ldw	r5,68(r16)
   225c4:	28000326 	beq	r5,zero,225d4 <_fclose_r+0xb4>
   225c8:	8809883a 	mov	r4,r17
   225cc:	00229f00 	call	229f0 <_free_r>
   225d0:	80001115 	stw	zero,68(r16)
   225d4:	00208d80 	call	208d8 <__sfp_lock_acquire>
   225d8:	8000030d 	sth	zero,12(r16)
   225dc:	00208dc0 	call	208dc <__sfp_lock_release>
   225e0:	9005883a 	mov	r2,r18
   225e4:	003fdc06 	br	22558 <_gp+0xfffd8ad8>
   225e8:	00208c80 	call	208c8 <__sinit>
   225ec:	003fd706 	br	2254c <_gp+0xfffd8acc>
   225f0:	04bfffc4 	movi	r18,-1
   225f4:	003fe806 	br	22598 <_gp+0xfffd8b18>
   225f8:	81400417 	ldw	r5,16(r16)
   225fc:	8809883a 	mov	r4,r17
   22600:	00229f00 	call	229f0 <_free_r>
   22604:	003fe706 	br	225a4 <_gp+0xfffd8b24>
   22608:	0005883a 	mov	r2,zero
   2260c:	f800283a 	ret

00022610 <fclose>:
   22610:	00800134 	movhi	r2,4
   22614:	1086a104 	addi	r2,r2,6788
   22618:	200b883a 	mov	r5,r4
   2261c:	11000017 	ldw	r4,0(r2)
   22620:	00225201 	jmpi	22520 <_fclose_r>

00022624 <__sflush_r>:
   22624:	2880030b 	ldhu	r2,12(r5)
   22628:	defffb04 	addi	sp,sp,-20
   2262c:	dcc00315 	stw	r19,12(sp)
   22630:	dc400115 	stw	r17,4(sp)
   22634:	dfc00415 	stw	ra,16(sp)
   22638:	dc800215 	stw	r18,8(sp)
   2263c:	dc000015 	stw	r16,0(sp)
   22640:	10c0020c 	andi	r3,r2,8
   22644:	2823883a 	mov	r17,r5
   22648:	2027883a 	mov	r19,r4
   2264c:	1800311e 	bne	r3,zero,22714 <__sflush_r+0xf0>
   22650:	28c00117 	ldw	r3,4(r5)
   22654:	10820014 	ori	r2,r2,2048
   22658:	2880030d 	sth	r2,12(r5)
   2265c:	00c04b0e 	bge	zero,r3,2278c <__sflush_r+0x168>
   22660:	8a000a17 	ldw	r8,40(r17)
   22664:	40002326 	beq	r8,zero,226f4 <__sflush_r+0xd0>
   22668:	9c000017 	ldw	r16,0(r19)
   2266c:	10c4000c 	andi	r3,r2,4096
   22670:	98000015 	stw	zero,0(r19)
   22674:	18004826 	beq	r3,zero,22798 <__sflush_r+0x174>
   22678:	89801417 	ldw	r6,80(r17)
   2267c:	10c0010c 	andi	r3,r2,4
   22680:	18000626 	beq	r3,zero,2269c <__sflush_r+0x78>
   22684:	88c00117 	ldw	r3,4(r17)
   22688:	88800c17 	ldw	r2,48(r17)
   2268c:	30cdc83a 	sub	r6,r6,r3
   22690:	10000226 	beq	r2,zero,2269c <__sflush_r+0x78>
   22694:	88800f17 	ldw	r2,60(r17)
   22698:	308dc83a 	sub	r6,r6,r2
   2269c:	89400717 	ldw	r5,28(r17)
   226a0:	000f883a 	mov	r7,zero
   226a4:	9809883a 	mov	r4,r19
   226a8:	403ee83a 	callr	r8
   226ac:	00ffffc4 	movi	r3,-1
   226b0:	10c04426 	beq	r2,r3,227c4 <__sflush_r+0x1a0>
   226b4:	88c0030b 	ldhu	r3,12(r17)
   226b8:	89000417 	ldw	r4,16(r17)
   226bc:	88000115 	stw	zero,4(r17)
   226c0:	197dffcc 	andi	r5,r3,63487
   226c4:	8940030d 	sth	r5,12(r17)
   226c8:	89000015 	stw	r4,0(r17)
   226cc:	18c4000c 	andi	r3,r3,4096
   226d0:	18002c1e 	bne	r3,zero,22784 <__sflush_r+0x160>
   226d4:	89400c17 	ldw	r5,48(r17)
   226d8:	9c000015 	stw	r16,0(r19)
   226dc:	28000526 	beq	r5,zero,226f4 <__sflush_r+0xd0>
   226e0:	88801004 	addi	r2,r17,64
   226e4:	28800226 	beq	r5,r2,226f0 <__sflush_r+0xcc>
   226e8:	9809883a 	mov	r4,r19
   226ec:	00229f00 	call	229f0 <_free_r>
   226f0:	88000c15 	stw	zero,48(r17)
   226f4:	0005883a 	mov	r2,zero
   226f8:	dfc00417 	ldw	ra,16(sp)
   226fc:	dcc00317 	ldw	r19,12(sp)
   22700:	dc800217 	ldw	r18,8(sp)
   22704:	dc400117 	ldw	r17,4(sp)
   22708:	dc000017 	ldw	r16,0(sp)
   2270c:	dec00504 	addi	sp,sp,20
   22710:	f800283a 	ret
   22714:	2c800417 	ldw	r18,16(r5)
   22718:	903ff626 	beq	r18,zero,226f4 <_gp+0xfffd8c74>
   2271c:	2c000017 	ldw	r16,0(r5)
   22720:	108000cc 	andi	r2,r2,3
   22724:	2c800015 	stw	r18,0(r5)
   22728:	84a1c83a 	sub	r16,r16,r18
   2272c:	1000131e 	bne	r2,zero,2277c <__sflush_r+0x158>
   22730:	28800517 	ldw	r2,20(r5)
   22734:	88800215 	stw	r2,8(r17)
   22738:	04000316 	blt	zero,r16,22748 <__sflush_r+0x124>
   2273c:	003fed06 	br	226f4 <_gp+0xfffd8c74>
   22740:	90a5883a 	add	r18,r18,r2
   22744:	043feb0e 	bge	zero,r16,226f4 <_gp+0xfffd8c74>
   22748:	88800917 	ldw	r2,36(r17)
   2274c:	89400717 	ldw	r5,28(r17)
   22750:	800f883a 	mov	r7,r16
   22754:	900d883a 	mov	r6,r18
   22758:	9809883a 	mov	r4,r19
   2275c:	103ee83a 	callr	r2
   22760:	80a1c83a 	sub	r16,r16,r2
   22764:	00bff616 	blt	zero,r2,22740 <_gp+0xfffd8cc0>
   22768:	88c0030b 	ldhu	r3,12(r17)
   2276c:	00bfffc4 	movi	r2,-1
   22770:	18c01014 	ori	r3,r3,64
   22774:	88c0030d 	sth	r3,12(r17)
   22778:	003fdf06 	br	226f8 <_gp+0xfffd8c78>
   2277c:	0005883a 	mov	r2,zero
   22780:	003fec06 	br	22734 <_gp+0xfffd8cb4>
   22784:	88801415 	stw	r2,80(r17)
   22788:	003fd206 	br	226d4 <_gp+0xfffd8c54>
   2278c:	28c00f17 	ldw	r3,60(r5)
   22790:	00ffb316 	blt	zero,r3,22660 <_gp+0xfffd8be0>
   22794:	003fd706 	br	226f4 <_gp+0xfffd8c74>
   22798:	89400717 	ldw	r5,28(r17)
   2279c:	000d883a 	mov	r6,zero
   227a0:	01c00044 	movi	r7,1
   227a4:	9809883a 	mov	r4,r19
   227a8:	403ee83a 	callr	r8
   227ac:	100d883a 	mov	r6,r2
   227b0:	00bfffc4 	movi	r2,-1
   227b4:	30801426 	beq	r6,r2,22808 <__sflush_r+0x1e4>
   227b8:	8880030b 	ldhu	r2,12(r17)
   227bc:	8a000a17 	ldw	r8,40(r17)
   227c0:	003fae06 	br	2267c <_gp+0xfffd8bfc>
   227c4:	98c00017 	ldw	r3,0(r19)
   227c8:	183fba26 	beq	r3,zero,226b4 <_gp+0xfffd8c34>
   227cc:	01000744 	movi	r4,29
   227d0:	19000626 	beq	r3,r4,227ec <__sflush_r+0x1c8>
   227d4:	01000584 	movi	r4,22
   227d8:	19000426 	beq	r3,r4,227ec <__sflush_r+0x1c8>
   227dc:	88c0030b 	ldhu	r3,12(r17)
   227e0:	18c01014 	ori	r3,r3,64
   227e4:	88c0030d 	sth	r3,12(r17)
   227e8:	003fc306 	br	226f8 <_gp+0xfffd8c78>
   227ec:	8880030b 	ldhu	r2,12(r17)
   227f0:	88c00417 	ldw	r3,16(r17)
   227f4:	88000115 	stw	zero,4(r17)
   227f8:	10bdffcc 	andi	r2,r2,63487
   227fc:	8880030d 	sth	r2,12(r17)
   22800:	88c00015 	stw	r3,0(r17)
   22804:	003fb306 	br	226d4 <_gp+0xfffd8c54>
   22808:	98800017 	ldw	r2,0(r19)
   2280c:	103fea26 	beq	r2,zero,227b8 <_gp+0xfffd8d38>
   22810:	00c00744 	movi	r3,29
   22814:	10c00226 	beq	r2,r3,22820 <__sflush_r+0x1fc>
   22818:	00c00584 	movi	r3,22
   2281c:	10c0031e 	bne	r2,r3,2282c <__sflush_r+0x208>
   22820:	9c000015 	stw	r16,0(r19)
   22824:	0005883a 	mov	r2,zero
   22828:	003fb306 	br	226f8 <_gp+0xfffd8c78>
   2282c:	88c0030b 	ldhu	r3,12(r17)
   22830:	3005883a 	mov	r2,r6
   22834:	18c01014 	ori	r3,r3,64
   22838:	88c0030d 	sth	r3,12(r17)
   2283c:	003fae06 	br	226f8 <_gp+0xfffd8c78>

00022840 <_fflush_r>:
   22840:	defffd04 	addi	sp,sp,-12
   22844:	dc000115 	stw	r16,4(sp)
   22848:	dfc00215 	stw	ra,8(sp)
   2284c:	2021883a 	mov	r16,r4
   22850:	20000226 	beq	r4,zero,2285c <_fflush_r+0x1c>
   22854:	20800e17 	ldw	r2,56(r4)
   22858:	10000c26 	beq	r2,zero,2288c <_fflush_r+0x4c>
   2285c:	2880030f 	ldh	r2,12(r5)
   22860:	1000051e 	bne	r2,zero,22878 <_fflush_r+0x38>
   22864:	0005883a 	mov	r2,zero
   22868:	dfc00217 	ldw	ra,8(sp)
   2286c:	dc000117 	ldw	r16,4(sp)
   22870:	dec00304 	addi	sp,sp,12
   22874:	f800283a 	ret
   22878:	8009883a 	mov	r4,r16
   2287c:	dfc00217 	ldw	ra,8(sp)
   22880:	dc000117 	ldw	r16,4(sp)
   22884:	dec00304 	addi	sp,sp,12
   22888:	00226241 	jmpi	22624 <__sflush_r>
   2288c:	d9400015 	stw	r5,0(sp)
   22890:	00208c80 	call	208c8 <__sinit>
   22894:	d9400017 	ldw	r5,0(sp)
   22898:	003ff006 	br	2285c <_gp+0xfffd8ddc>

0002289c <fflush>:
   2289c:	20000526 	beq	r4,zero,228b4 <fflush+0x18>
   228a0:	00800134 	movhi	r2,4
   228a4:	1086a104 	addi	r2,r2,6788
   228a8:	200b883a 	mov	r5,r4
   228ac:	11000017 	ldw	r4,0(r2)
   228b0:	00228401 	jmpi	22840 <_fflush_r>
   228b4:	00800134 	movhi	r2,4
   228b8:	1086a004 	addi	r2,r2,6784
   228bc:	11000017 	ldw	r4,0(r2)
   228c0:	014000b4 	movhi	r5,2
   228c4:	294a1004 	addi	r5,r5,10304
   228c8:	0020ea41 	jmpi	20ea4 <_fwalk_reent>

000228cc <_malloc_trim_r>:
   228cc:	defffb04 	addi	sp,sp,-20
   228d0:	dcc00315 	stw	r19,12(sp)
   228d4:	04c00134 	movhi	r19,4
   228d8:	dc800215 	stw	r18,8(sp)
   228dc:	dc400115 	stw	r17,4(sp)
   228e0:	dc000015 	stw	r16,0(sp)
   228e4:	dfc00415 	stw	ra,16(sp)
   228e8:	2821883a 	mov	r16,r5
   228ec:	9cc11c04 	addi	r19,r19,1136
   228f0:	2025883a 	mov	r18,r4
   228f4:	00238fc0 	call	238fc <__malloc_lock>
   228f8:	98800217 	ldw	r2,8(r19)
   228fc:	14400117 	ldw	r17,4(r2)
   22900:	00bfff04 	movi	r2,-4
   22904:	88a2703a 	and	r17,r17,r2
   22908:	8c21c83a 	sub	r16,r17,r16
   2290c:	8403fbc4 	addi	r16,r16,4079
   22910:	8020d33a 	srli	r16,r16,12
   22914:	0083ffc4 	movi	r2,4095
   22918:	843fffc4 	addi	r16,r16,-1
   2291c:	8020933a 	slli	r16,r16,12
   22920:	1400060e 	bge	r2,r16,2293c <_malloc_trim_r+0x70>
   22924:	000b883a 	mov	r5,zero
   22928:	9009883a 	mov	r4,r18
   2292c:	00221880 	call	22188 <_sbrk_r>
   22930:	98c00217 	ldw	r3,8(r19)
   22934:	1c47883a 	add	r3,r3,r17
   22938:	10c00a26 	beq	r2,r3,22964 <_malloc_trim_r+0x98>
   2293c:	9009883a 	mov	r4,r18
   22940:	00239200 	call	23920 <__malloc_unlock>
   22944:	0005883a 	mov	r2,zero
   22948:	dfc00417 	ldw	ra,16(sp)
   2294c:	dcc00317 	ldw	r19,12(sp)
   22950:	dc800217 	ldw	r18,8(sp)
   22954:	dc400117 	ldw	r17,4(sp)
   22958:	dc000017 	ldw	r16,0(sp)
   2295c:	dec00504 	addi	sp,sp,20
   22960:	f800283a 	ret
   22964:	040bc83a 	sub	r5,zero,r16
   22968:	9009883a 	mov	r4,r18
   2296c:	00221880 	call	22188 <_sbrk_r>
   22970:	00ffffc4 	movi	r3,-1
   22974:	10c00d26 	beq	r2,r3,229ac <_malloc_trim_r+0xe0>
   22978:	00c00134 	movhi	r3,4
   2297c:	18c6bb04 	addi	r3,r3,6892
   22980:	18800017 	ldw	r2,0(r3)
   22984:	99000217 	ldw	r4,8(r19)
   22988:	8c23c83a 	sub	r17,r17,r16
   2298c:	8c400054 	ori	r17,r17,1
   22990:	1421c83a 	sub	r16,r2,r16
   22994:	24400115 	stw	r17,4(r4)
   22998:	9009883a 	mov	r4,r18
   2299c:	1c000015 	stw	r16,0(r3)
   229a0:	00239200 	call	23920 <__malloc_unlock>
   229a4:	00800044 	movi	r2,1
   229a8:	003fe706 	br	22948 <_gp+0xfffd8ec8>
   229ac:	000b883a 	mov	r5,zero
   229b0:	9009883a 	mov	r4,r18
   229b4:	00221880 	call	22188 <_sbrk_r>
   229b8:	99000217 	ldw	r4,8(r19)
   229bc:	014003c4 	movi	r5,15
   229c0:	1107c83a 	sub	r3,r2,r4
   229c4:	28ffdd0e 	bge	r5,r3,2293c <_gp+0xfffd8ebc>
   229c8:	01400134 	movhi	r5,4
   229cc:	2946a204 	addi	r5,r5,6792
   229d0:	29400017 	ldw	r5,0(r5)
   229d4:	18c00054 	ori	r3,r3,1
   229d8:	20c00115 	stw	r3,4(r4)
   229dc:	00c00134 	movhi	r3,4
   229e0:	1145c83a 	sub	r2,r2,r5
   229e4:	18c6bb04 	addi	r3,r3,6892
   229e8:	18800015 	stw	r2,0(r3)
   229ec:	003fd306 	br	2293c <_gp+0xfffd8ebc>

000229f0 <_free_r>:
   229f0:	28004126 	beq	r5,zero,22af8 <_free_r+0x108>
   229f4:	defffd04 	addi	sp,sp,-12
   229f8:	dc400115 	stw	r17,4(sp)
   229fc:	dc000015 	stw	r16,0(sp)
   22a00:	2023883a 	mov	r17,r4
   22a04:	2821883a 	mov	r16,r5
   22a08:	dfc00215 	stw	ra,8(sp)
   22a0c:	00238fc0 	call	238fc <__malloc_lock>
   22a10:	81ffff17 	ldw	r7,-4(r16)
   22a14:	00bfff84 	movi	r2,-2
   22a18:	01000134 	movhi	r4,4
   22a1c:	81bffe04 	addi	r6,r16,-8
   22a20:	3884703a 	and	r2,r7,r2
   22a24:	21011c04 	addi	r4,r4,1136
   22a28:	308b883a 	add	r5,r6,r2
   22a2c:	2a400117 	ldw	r9,4(r5)
   22a30:	22000217 	ldw	r8,8(r4)
   22a34:	00ffff04 	movi	r3,-4
   22a38:	48c6703a 	and	r3,r9,r3
   22a3c:	2a005726 	beq	r5,r8,22b9c <_free_r+0x1ac>
   22a40:	28c00115 	stw	r3,4(r5)
   22a44:	39c0004c 	andi	r7,r7,1
   22a48:	3800091e 	bne	r7,zero,22a70 <_free_r+0x80>
   22a4c:	823ffe17 	ldw	r8,-8(r16)
   22a50:	22400204 	addi	r9,r4,8
   22a54:	320dc83a 	sub	r6,r6,r8
   22a58:	31c00217 	ldw	r7,8(r6)
   22a5c:	1205883a 	add	r2,r2,r8
   22a60:	3a406526 	beq	r7,r9,22bf8 <_free_r+0x208>
   22a64:	32000317 	ldw	r8,12(r6)
   22a68:	3a000315 	stw	r8,12(r7)
   22a6c:	41c00215 	stw	r7,8(r8)
   22a70:	28cf883a 	add	r7,r5,r3
   22a74:	39c00117 	ldw	r7,4(r7)
   22a78:	39c0004c 	andi	r7,r7,1
   22a7c:	38003a26 	beq	r7,zero,22b68 <_free_r+0x178>
   22a80:	10c00054 	ori	r3,r2,1
   22a84:	30c00115 	stw	r3,4(r6)
   22a88:	3087883a 	add	r3,r6,r2
   22a8c:	18800015 	stw	r2,0(r3)
   22a90:	00c07fc4 	movi	r3,511
   22a94:	18801936 	bltu	r3,r2,22afc <_free_r+0x10c>
   22a98:	1004d0fa 	srli	r2,r2,3
   22a9c:	01c00044 	movi	r7,1
   22aa0:	21400117 	ldw	r5,4(r4)
   22aa4:	10c00044 	addi	r3,r2,1
   22aa8:	18c7883a 	add	r3,r3,r3
   22aac:	1005d0ba 	srai	r2,r2,2
   22ab0:	18c7883a 	add	r3,r3,r3
   22ab4:	18c7883a 	add	r3,r3,r3
   22ab8:	1907883a 	add	r3,r3,r4
   22abc:	3884983a 	sll	r2,r7,r2
   22ac0:	19c00017 	ldw	r7,0(r3)
   22ac4:	1a3ffe04 	addi	r8,r3,-8
   22ac8:	1144b03a 	or	r2,r2,r5
   22acc:	32000315 	stw	r8,12(r6)
   22ad0:	31c00215 	stw	r7,8(r6)
   22ad4:	20800115 	stw	r2,4(r4)
   22ad8:	19800015 	stw	r6,0(r3)
   22adc:	39800315 	stw	r6,12(r7)
   22ae0:	8809883a 	mov	r4,r17
   22ae4:	dfc00217 	ldw	ra,8(sp)
   22ae8:	dc400117 	ldw	r17,4(sp)
   22aec:	dc000017 	ldw	r16,0(sp)
   22af0:	dec00304 	addi	sp,sp,12
   22af4:	00239201 	jmpi	23920 <__malloc_unlock>
   22af8:	f800283a 	ret
   22afc:	100ad27a 	srli	r5,r2,9
   22b00:	00c00104 	movi	r3,4
   22b04:	19404a36 	bltu	r3,r5,22c30 <_free_r+0x240>
   22b08:	100ad1ba 	srli	r5,r2,6
   22b0c:	28c00e44 	addi	r3,r5,57
   22b10:	18c7883a 	add	r3,r3,r3
   22b14:	29400e04 	addi	r5,r5,56
   22b18:	18c7883a 	add	r3,r3,r3
   22b1c:	18c7883a 	add	r3,r3,r3
   22b20:	1909883a 	add	r4,r3,r4
   22b24:	20c00017 	ldw	r3,0(r4)
   22b28:	01c00134 	movhi	r7,4
   22b2c:	213ffe04 	addi	r4,r4,-8
   22b30:	39c11c04 	addi	r7,r7,1136
   22b34:	20c04426 	beq	r4,r3,22c48 <_free_r+0x258>
   22b38:	01ffff04 	movi	r7,-4
   22b3c:	19400117 	ldw	r5,4(r3)
   22b40:	29ca703a 	and	r5,r5,r7
   22b44:	1140022e 	bgeu	r2,r5,22b50 <_free_r+0x160>
   22b48:	18c00217 	ldw	r3,8(r3)
   22b4c:	20fffb1e 	bne	r4,r3,22b3c <_gp+0xfffd90bc>
   22b50:	19000317 	ldw	r4,12(r3)
   22b54:	31000315 	stw	r4,12(r6)
   22b58:	30c00215 	stw	r3,8(r6)
   22b5c:	21800215 	stw	r6,8(r4)
   22b60:	19800315 	stw	r6,12(r3)
   22b64:	003fde06 	br	22ae0 <_gp+0xfffd9060>
   22b68:	29c00217 	ldw	r7,8(r5)
   22b6c:	10c5883a 	add	r2,r2,r3
   22b70:	00c00134 	movhi	r3,4
   22b74:	18c11e04 	addi	r3,r3,1144
   22b78:	38c03b26 	beq	r7,r3,22c68 <_free_r+0x278>
   22b7c:	2a000317 	ldw	r8,12(r5)
   22b80:	11400054 	ori	r5,r2,1
   22b84:	3087883a 	add	r3,r6,r2
   22b88:	3a000315 	stw	r8,12(r7)
   22b8c:	41c00215 	stw	r7,8(r8)
   22b90:	31400115 	stw	r5,4(r6)
   22b94:	18800015 	stw	r2,0(r3)
   22b98:	003fbd06 	br	22a90 <_gp+0xfffd9010>
   22b9c:	39c0004c 	andi	r7,r7,1
   22ba0:	10c5883a 	add	r2,r2,r3
   22ba4:	3800071e 	bne	r7,zero,22bc4 <_free_r+0x1d4>
   22ba8:	81fffe17 	ldw	r7,-8(r16)
   22bac:	31cdc83a 	sub	r6,r6,r7
   22bb0:	30c00317 	ldw	r3,12(r6)
   22bb4:	31400217 	ldw	r5,8(r6)
   22bb8:	11c5883a 	add	r2,r2,r7
   22bbc:	28c00315 	stw	r3,12(r5)
   22bc0:	19400215 	stw	r5,8(r3)
   22bc4:	10c00054 	ori	r3,r2,1
   22bc8:	30c00115 	stw	r3,4(r6)
   22bcc:	00c00134 	movhi	r3,4
   22bd0:	18c6a304 	addi	r3,r3,6796
   22bd4:	18c00017 	ldw	r3,0(r3)
   22bd8:	21800215 	stw	r6,8(r4)
   22bdc:	10ffc036 	bltu	r2,r3,22ae0 <_gp+0xfffd9060>
   22be0:	00800134 	movhi	r2,4
   22be4:	1086b204 	addi	r2,r2,6856
   22be8:	11400017 	ldw	r5,0(r2)
   22bec:	8809883a 	mov	r4,r17
   22bf0:	00228cc0 	call	228cc <_malloc_trim_r>
   22bf4:	003fba06 	br	22ae0 <_gp+0xfffd9060>
   22bf8:	28c9883a 	add	r4,r5,r3
   22bfc:	21000117 	ldw	r4,4(r4)
   22c00:	2100004c 	andi	r4,r4,1
   22c04:	2000391e 	bne	r4,zero,22cec <_free_r+0x2fc>
   22c08:	29c00217 	ldw	r7,8(r5)
   22c0c:	29000317 	ldw	r4,12(r5)
   22c10:	1885883a 	add	r2,r3,r2
   22c14:	10c00054 	ori	r3,r2,1
   22c18:	39000315 	stw	r4,12(r7)
   22c1c:	21c00215 	stw	r7,8(r4)
   22c20:	30c00115 	stw	r3,4(r6)
   22c24:	308d883a 	add	r6,r6,r2
   22c28:	30800015 	stw	r2,0(r6)
   22c2c:	003fac06 	br	22ae0 <_gp+0xfffd9060>
   22c30:	00c00504 	movi	r3,20
   22c34:	19401536 	bltu	r3,r5,22c8c <_free_r+0x29c>
   22c38:	28c01704 	addi	r3,r5,92
   22c3c:	18c7883a 	add	r3,r3,r3
   22c40:	294016c4 	addi	r5,r5,91
   22c44:	003fb406 	br	22b18 <_gp+0xfffd9098>
   22c48:	280bd0ba 	srai	r5,r5,2
   22c4c:	00c00044 	movi	r3,1
   22c50:	38800117 	ldw	r2,4(r7)
   22c54:	194a983a 	sll	r5,r3,r5
   22c58:	2007883a 	mov	r3,r4
   22c5c:	2884b03a 	or	r2,r5,r2
   22c60:	38800115 	stw	r2,4(r7)
   22c64:	003fbb06 	br	22b54 <_gp+0xfffd90d4>
   22c68:	21800515 	stw	r6,20(r4)
   22c6c:	21800415 	stw	r6,16(r4)
   22c70:	10c00054 	ori	r3,r2,1
   22c74:	31c00315 	stw	r7,12(r6)
   22c78:	31c00215 	stw	r7,8(r6)
   22c7c:	30c00115 	stw	r3,4(r6)
   22c80:	308d883a 	add	r6,r6,r2
   22c84:	30800015 	stw	r2,0(r6)
   22c88:	003f9506 	br	22ae0 <_gp+0xfffd9060>
   22c8c:	00c01504 	movi	r3,84
   22c90:	19400536 	bltu	r3,r5,22ca8 <_free_r+0x2b8>
   22c94:	100ad33a 	srli	r5,r2,12
   22c98:	28c01bc4 	addi	r3,r5,111
   22c9c:	18c7883a 	add	r3,r3,r3
   22ca0:	29401b84 	addi	r5,r5,110
   22ca4:	003f9c06 	br	22b18 <_gp+0xfffd9098>
   22ca8:	00c05504 	movi	r3,340
   22cac:	19400536 	bltu	r3,r5,22cc4 <_free_r+0x2d4>
   22cb0:	100ad3fa 	srli	r5,r2,15
   22cb4:	28c01e04 	addi	r3,r5,120
   22cb8:	18c7883a 	add	r3,r3,r3
   22cbc:	29401dc4 	addi	r5,r5,119
   22cc0:	003f9506 	br	22b18 <_gp+0xfffd9098>
   22cc4:	00c15504 	movi	r3,1364
   22cc8:	19400536 	bltu	r3,r5,22ce0 <_free_r+0x2f0>
   22ccc:	100ad4ba 	srli	r5,r2,18
   22cd0:	28c01f44 	addi	r3,r5,125
   22cd4:	18c7883a 	add	r3,r3,r3
   22cd8:	29401f04 	addi	r5,r5,124
   22cdc:	003f8e06 	br	22b18 <_gp+0xfffd9098>
   22ce0:	00c03f84 	movi	r3,254
   22ce4:	01401f84 	movi	r5,126
   22ce8:	003f8b06 	br	22b18 <_gp+0xfffd9098>
   22cec:	10c00054 	ori	r3,r2,1
   22cf0:	30c00115 	stw	r3,4(r6)
   22cf4:	308d883a 	add	r6,r6,r2
   22cf8:	30800015 	stw	r2,0(r6)
   22cfc:	003f7806 	br	22ae0 <_gp+0xfffd9060>

00022d00 <_lseek_r>:
   22d00:	defffd04 	addi	sp,sp,-12
   22d04:	2805883a 	mov	r2,r5
   22d08:	dc000015 	stw	r16,0(sp)
   22d0c:	04000134 	movhi	r16,4
   22d10:	dc400115 	stw	r17,4(sp)
   22d14:	300b883a 	mov	r5,r6
   22d18:	8406b304 	addi	r16,r16,6860
   22d1c:	2023883a 	mov	r17,r4
   22d20:	380d883a 	mov	r6,r7
   22d24:	1009883a 	mov	r4,r2
   22d28:	dfc00215 	stw	ra,8(sp)
   22d2c:	80000015 	stw	zero,0(r16)
   22d30:	00237a40 	call	237a4 <lseek>
   22d34:	00ffffc4 	movi	r3,-1
   22d38:	10c00526 	beq	r2,r3,22d50 <_lseek_r+0x50>
   22d3c:	dfc00217 	ldw	ra,8(sp)
   22d40:	dc400117 	ldw	r17,4(sp)
   22d44:	dc000017 	ldw	r16,0(sp)
   22d48:	dec00304 	addi	sp,sp,12
   22d4c:	f800283a 	ret
   22d50:	80c00017 	ldw	r3,0(r16)
   22d54:	183ff926 	beq	r3,zero,22d3c <_gp+0xfffd92bc>
   22d58:	88c00015 	stw	r3,0(r17)
   22d5c:	003ff706 	br	22d3c <_gp+0xfffd92bc>

00022d60 <__smakebuf_r>:
   22d60:	2880030b 	ldhu	r2,12(r5)
   22d64:	10c0008c 	andi	r3,r2,2
   22d68:	1800411e 	bne	r3,zero,22e70 <__smakebuf_r+0x110>
   22d6c:	deffec04 	addi	sp,sp,-80
   22d70:	dc000f15 	stw	r16,60(sp)
   22d74:	2821883a 	mov	r16,r5
   22d78:	2940038f 	ldh	r5,14(r5)
   22d7c:	dc401015 	stw	r17,64(sp)
   22d80:	dfc01315 	stw	ra,76(sp)
   22d84:	dcc01215 	stw	r19,72(sp)
   22d88:	dc801115 	stw	r18,68(sp)
   22d8c:	2023883a 	mov	r17,r4
   22d90:	28001c16 	blt	r5,zero,22e04 <__smakebuf_r+0xa4>
   22d94:	d80d883a 	mov	r6,sp
   22d98:	0022f7c0 	call	22f7c <_fstat_r>
   22d9c:	10001816 	blt	r2,zero,22e00 <__smakebuf_r+0xa0>
   22da0:	d8800117 	ldw	r2,4(sp)
   22da4:	00e00014 	movui	r3,32768
   22da8:	10bc000c 	andi	r2,r2,61440
   22dac:	14c80020 	cmpeqi	r19,r2,8192
   22db0:	10c03726 	beq	r2,r3,22e90 <__smakebuf_r+0x130>
   22db4:	80c0030b 	ldhu	r3,12(r16)
   22db8:	18c20014 	ori	r3,r3,2048
   22dbc:	80c0030d 	sth	r3,12(r16)
   22dc0:	00c80004 	movi	r3,8192
   22dc4:	10c0521e 	bne	r2,r3,22f10 <__smakebuf_r+0x1b0>
   22dc8:	8140038f 	ldh	r5,14(r16)
   22dcc:	8809883a 	mov	r4,r17
   22dd0:	0022fd80 	call	22fd8 <_isatty_r>
   22dd4:	10004c26 	beq	r2,zero,22f08 <__smakebuf_r+0x1a8>
   22dd8:	8080030b 	ldhu	r2,12(r16)
   22ddc:	80c010c4 	addi	r3,r16,67
   22de0:	80c00015 	stw	r3,0(r16)
   22de4:	10800054 	ori	r2,r2,1
   22de8:	8080030d 	sth	r2,12(r16)
   22dec:	00800044 	movi	r2,1
   22df0:	80c00415 	stw	r3,16(r16)
   22df4:	80800515 	stw	r2,20(r16)
   22df8:	04810004 	movi	r18,1024
   22dfc:	00000706 	br	22e1c <__smakebuf_r+0xbc>
   22e00:	8080030b 	ldhu	r2,12(r16)
   22e04:	10c0200c 	andi	r3,r2,128
   22e08:	18001f1e 	bne	r3,zero,22e88 <__smakebuf_r+0x128>
   22e0c:	04810004 	movi	r18,1024
   22e10:	10820014 	ori	r2,r2,2048
   22e14:	8080030d 	sth	r2,12(r16)
   22e18:	0027883a 	mov	r19,zero
   22e1c:	900b883a 	mov	r5,r18
   22e20:	8809883a 	mov	r4,r17
   22e24:	0020f680 	call	20f68 <_malloc_r>
   22e28:	10002c26 	beq	r2,zero,22edc <__smakebuf_r+0x17c>
   22e2c:	80c0030b 	ldhu	r3,12(r16)
   22e30:	010000b4 	movhi	r4,2
   22e34:	21015c04 	addi	r4,r4,1392
   22e38:	89000f15 	stw	r4,60(r17)
   22e3c:	18c02014 	ori	r3,r3,128
   22e40:	80c0030d 	sth	r3,12(r16)
   22e44:	80800015 	stw	r2,0(r16)
   22e48:	80800415 	stw	r2,16(r16)
   22e4c:	84800515 	stw	r18,20(r16)
   22e50:	98001a1e 	bne	r19,zero,22ebc <__smakebuf_r+0x15c>
   22e54:	dfc01317 	ldw	ra,76(sp)
   22e58:	dcc01217 	ldw	r19,72(sp)
   22e5c:	dc801117 	ldw	r18,68(sp)
   22e60:	dc401017 	ldw	r17,64(sp)
   22e64:	dc000f17 	ldw	r16,60(sp)
   22e68:	dec01404 	addi	sp,sp,80
   22e6c:	f800283a 	ret
   22e70:	288010c4 	addi	r2,r5,67
   22e74:	28800015 	stw	r2,0(r5)
   22e78:	28800415 	stw	r2,16(r5)
   22e7c:	00800044 	movi	r2,1
   22e80:	28800515 	stw	r2,20(r5)
   22e84:	f800283a 	ret
   22e88:	04801004 	movi	r18,64
   22e8c:	003fe006 	br	22e10 <_gp+0xfffd9390>
   22e90:	81000a17 	ldw	r4,40(r16)
   22e94:	00c000b4 	movhi	r3,2
   22e98:	18c8ad04 	addi	r3,r3,8884
   22e9c:	20ffc51e 	bne	r4,r3,22db4 <_gp+0xfffd9334>
   22ea0:	8080030b 	ldhu	r2,12(r16)
   22ea4:	04810004 	movi	r18,1024
   22ea8:	84801315 	stw	r18,76(r16)
   22eac:	1484b03a 	or	r2,r2,r18
   22eb0:	8080030d 	sth	r2,12(r16)
   22eb4:	0027883a 	mov	r19,zero
   22eb8:	003fd806 	br	22e1c <_gp+0xfffd939c>
   22ebc:	8140038f 	ldh	r5,14(r16)
   22ec0:	8809883a 	mov	r4,r17
   22ec4:	0022fd80 	call	22fd8 <_isatty_r>
   22ec8:	103fe226 	beq	r2,zero,22e54 <_gp+0xfffd93d4>
   22ecc:	8080030b 	ldhu	r2,12(r16)
   22ed0:	10800054 	ori	r2,r2,1
   22ed4:	8080030d 	sth	r2,12(r16)
   22ed8:	003fde06 	br	22e54 <_gp+0xfffd93d4>
   22edc:	8080030b 	ldhu	r2,12(r16)
   22ee0:	10c0800c 	andi	r3,r2,512
   22ee4:	183fdb1e 	bne	r3,zero,22e54 <_gp+0xfffd93d4>
   22ee8:	10800094 	ori	r2,r2,2
   22eec:	80c010c4 	addi	r3,r16,67
   22ef0:	8080030d 	sth	r2,12(r16)
   22ef4:	00800044 	movi	r2,1
   22ef8:	80c00015 	stw	r3,0(r16)
   22efc:	80c00415 	stw	r3,16(r16)
   22f00:	80800515 	stw	r2,20(r16)
   22f04:	003fd306 	br	22e54 <_gp+0xfffd93d4>
   22f08:	04810004 	movi	r18,1024
   22f0c:	003fc306 	br	22e1c <_gp+0xfffd939c>
   22f10:	0027883a 	mov	r19,zero
   22f14:	04810004 	movi	r18,1024
   22f18:	003fc006 	br	22e1c <_gp+0xfffd939c>

00022f1c <_read_r>:
   22f1c:	defffd04 	addi	sp,sp,-12
   22f20:	2805883a 	mov	r2,r5
   22f24:	dc000015 	stw	r16,0(sp)
   22f28:	04000134 	movhi	r16,4
   22f2c:	dc400115 	stw	r17,4(sp)
   22f30:	300b883a 	mov	r5,r6
   22f34:	8406b304 	addi	r16,r16,6860
   22f38:	2023883a 	mov	r17,r4
   22f3c:	380d883a 	mov	r6,r7
   22f40:	1009883a 	mov	r4,r2
   22f44:	dfc00215 	stw	ra,8(sp)
   22f48:	80000015 	stw	zero,0(r16)
   22f4c:	00239800 	call	23980 <read>
   22f50:	00ffffc4 	movi	r3,-1
   22f54:	10c00526 	beq	r2,r3,22f6c <_read_r+0x50>
   22f58:	dfc00217 	ldw	ra,8(sp)
   22f5c:	dc400117 	ldw	r17,4(sp)
   22f60:	dc000017 	ldw	r16,0(sp)
   22f64:	dec00304 	addi	sp,sp,12
   22f68:	f800283a 	ret
   22f6c:	80c00017 	ldw	r3,0(r16)
   22f70:	183ff926 	beq	r3,zero,22f58 <_gp+0xfffd94d8>
   22f74:	88c00015 	stw	r3,0(r17)
   22f78:	003ff706 	br	22f58 <_gp+0xfffd94d8>

00022f7c <_fstat_r>:
   22f7c:	defffd04 	addi	sp,sp,-12
   22f80:	2805883a 	mov	r2,r5
   22f84:	dc000015 	stw	r16,0(sp)
   22f88:	04000134 	movhi	r16,4
   22f8c:	dc400115 	stw	r17,4(sp)
   22f90:	8406b304 	addi	r16,r16,6860
   22f94:	2023883a 	mov	r17,r4
   22f98:	300b883a 	mov	r5,r6
   22f9c:	1009883a 	mov	r4,r2
   22fa0:	dfc00215 	stw	ra,8(sp)
   22fa4:	80000015 	stw	zero,0(r16)
   22fa8:	002335c0 	call	2335c <fstat>
   22fac:	00ffffc4 	movi	r3,-1
   22fb0:	10c00526 	beq	r2,r3,22fc8 <_fstat_r+0x4c>
   22fb4:	dfc00217 	ldw	ra,8(sp)
   22fb8:	dc400117 	ldw	r17,4(sp)
   22fbc:	dc000017 	ldw	r16,0(sp)
   22fc0:	dec00304 	addi	sp,sp,12
   22fc4:	f800283a 	ret
   22fc8:	80c00017 	ldw	r3,0(r16)
   22fcc:	183ff926 	beq	r3,zero,22fb4 <_gp+0xfffd9534>
   22fd0:	88c00015 	stw	r3,0(r17)
   22fd4:	003ff706 	br	22fb4 <_gp+0xfffd9534>

00022fd8 <_isatty_r>:
   22fd8:	defffd04 	addi	sp,sp,-12
   22fdc:	dc000015 	stw	r16,0(sp)
   22fe0:	04000134 	movhi	r16,4
   22fe4:	dc400115 	stw	r17,4(sp)
   22fe8:	8406b304 	addi	r16,r16,6860
   22fec:	2023883a 	mov	r17,r4
   22ff0:	2809883a 	mov	r4,r5
   22ff4:	dfc00215 	stw	ra,8(sp)
   22ff8:	80000015 	stw	zero,0(r16)
   22ffc:	00235d00 	call	235d0 <isatty>
   23000:	00ffffc4 	movi	r3,-1
   23004:	10c00526 	beq	r2,r3,2301c <_isatty_r+0x44>
   23008:	dfc00217 	ldw	ra,8(sp)
   2300c:	dc400117 	ldw	r17,4(sp)
   23010:	dc000017 	ldw	r16,0(sp)
   23014:	dec00304 	addi	sp,sp,12
   23018:	f800283a 	ret
   2301c:	80c00017 	ldw	r3,0(r16)
   23020:	183ff926 	beq	r3,zero,23008 <_gp+0xfffd9588>
   23024:	88c00015 	stw	r3,0(r17)
   23028:	003ff706 	br	23008 <_gp+0xfffd9588>

0002302c <__divsi3>:
   2302c:	20001b16 	blt	r4,zero,2309c <__divsi3+0x70>
   23030:	000f883a 	mov	r7,zero
   23034:	28001616 	blt	r5,zero,23090 <__divsi3+0x64>
   23038:	200d883a 	mov	r6,r4
   2303c:	29001a2e 	bgeu	r5,r4,230a8 <__divsi3+0x7c>
   23040:	00800804 	movi	r2,32
   23044:	00c00044 	movi	r3,1
   23048:	00000106 	br	23050 <__divsi3+0x24>
   2304c:	10000d26 	beq	r2,zero,23084 <__divsi3+0x58>
   23050:	294b883a 	add	r5,r5,r5
   23054:	10bfffc4 	addi	r2,r2,-1
   23058:	18c7883a 	add	r3,r3,r3
   2305c:	293ffb36 	bltu	r5,r4,2304c <_gp+0xfffd95cc>
   23060:	0005883a 	mov	r2,zero
   23064:	18000726 	beq	r3,zero,23084 <__divsi3+0x58>
   23068:	0005883a 	mov	r2,zero
   2306c:	31400236 	bltu	r6,r5,23078 <__divsi3+0x4c>
   23070:	314dc83a 	sub	r6,r6,r5
   23074:	10c4b03a 	or	r2,r2,r3
   23078:	1806d07a 	srli	r3,r3,1
   2307c:	280ad07a 	srli	r5,r5,1
   23080:	183ffa1e 	bne	r3,zero,2306c <_gp+0xfffd95ec>
   23084:	38000126 	beq	r7,zero,2308c <__divsi3+0x60>
   23088:	0085c83a 	sub	r2,zero,r2
   2308c:	f800283a 	ret
   23090:	014bc83a 	sub	r5,zero,r5
   23094:	39c0005c 	xori	r7,r7,1
   23098:	003fe706 	br	23038 <_gp+0xfffd95b8>
   2309c:	0109c83a 	sub	r4,zero,r4
   230a0:	01c00044 	movi	r7,1
   230a4:	003fe306 	br	23034 <_gp+0xfffd95b4>
   230a8:	00c00044 	movi	r3,1
   230ac:	003fee06 	br	23068 <_gp+0xfffd95e8>

000230b0 <__modsi3>:
   230b0:	20001716 	blt	r4,zero,23110 <__modsi3+0x60>
   230b4:	000f883a 	mov	r7,zero
   230b8:	2005883a 	mov	r2,r4
   230bc:	28001216 	blt	r5,zero,23108 <__modsi3+0x58>
   230c0:	2900162e 	bgeu	r5,r4,2311c <__modsi3+0x6c>
   230c4:	01800804 	movi	r6,32
   230c8:	00c00044 	movi	r3,1
   230cc:	00000106 	br	230d4 <__modsi3+0x24>
   230d0:	30000a26 	beq	r6,zero,230fc <__modsi3+0x4c>
   230d4:	294b883a 	add	r5,r5,r5
   230d8:	31bfffc4 	addi	r6,r6,-1
   230dc:	18c7883a 	add	r3,r3,r3
   230e0:	293ffb36 	bltu	r5,r4,230d0 <_gp+0xfffd9650>
   230e4:	18000526 	beq	r3,zero,230fc <__modsi3+0x4c>
   230e8:	1806d07a 	srli	r3,r3,1
   230ec:	11400136 	bltu	r2,r5,230f4 <__modsi3+0x44>
   230f0:	1145c83a 	sub	r2,r2,r5
   230f4:	280ad07a 	srli	r5,r5,1
   230f8:	183ffb1e 	bne	r3,zero,230e8 <_gp+0xfffd9668>
   230fc:	38000126 	beq	r7,zero,23104 <__modsi3+0x54>
   23100:	0085c83a 	sub	r2,zero,r2
   23104:	f800283a 	ret
   23108:	014bc83a 	sub	r5,zero,r5
   2310c:	003fec06 	br	230c0 <_gp+0xfffd9640>
   23110:	0109c83a 	sub	r4,zero,r4
   23114:	01c00044 	movi	r7,1
   23118:	003fe706 	br	230b8 <_gp+0xfffd9638>
   2311c:	00c00044 	movi	r3,1
   23120:	003ff106 	br	230e8 <_gp+0xfffd9668>

00023124 <__udivsi3>:
   23124:	200d883a 	mov	r6,r4
   23128:	2900152e 	bgeu	r5,r4,23180 <__udivsi3+0x5c>
   2312c:	28001416 	blt	r5,zero,23180 <__udivsi3+0x5c>
   23130:	00800804 	movi	r2,32
   23134:	00c00044 	movi	r3,1
   23138:	00000206 	br	23144 <__udivsi3+0x20>
   2313c:	10000e26 	beq	r2,zero,23178 <__udivsi3+0x54>
   23140:	28000516 	blt	r5,zero,23158 <__udivsi3+0x34>
   23144:	294b883a 	add	r5,r5,r5
   23148:	10bfffc4 	addi	r2,r2,-1
   2314c:	18c7883a 	add	r3,r3,r3
   23150:	293ffa36 	bltu	r5,r4,2313c <_gp+0xfffd96bc>
   23154:	18000826 	beq	r3,zero,23178 <__udivsi3+0x54>
   23158:	0005883a 	mov	r2,zero
   2315c:	31400236 	bltu	r6,r5,23168 <__udivsi3+0x44>
   23160:	314dc83a 	sub	r6,r6,r5
   23164:	10c4b03a 	or	r2,r2,r3
   23168:	1806d07a 	srli	r3,r3,1
   2316c:	280ad07a 	srli	r5,r5,1
   23170:	183ffa1e 	bne	r3,zero,2315c <_gp+0xfffd96dc>
   23174:	f800283a 	ret
   23178:	0005883a 	mov	r2,zero
   2317c:	f800283a 	ret
   23180:	00c00044 	movi	r3,1
   23184:	003ff406 	br	23158 <_gp+0xfffd96d8>

00023188 <__umodsi3>:
   23188:	2005883a 	mov	r2,r4
   2318c:	2900122e 	bgeu	r5,r4,231d8 <__umodsi3+0x50>
   23190:	28001116 	blt	r5,zero,231d8 <__umodsi3+0x50>
   23194:	01800804 	movi	r6,32
   23198:	00c00044 	movi	r3,1
   2319c:	00000206 	br	231a8 <__umodsi3+0x20>
   231a0:	30000c26 	beq	r6,zero,231d4 <__umodsi3+0x4c>
   231a4:	28000516 	blt	r5,zero,231bc <__umodsi3+0x34>
   231a8:	294b883a 	add	r5,r5,r5
   231ac:	31bfffc4 	addi	r6,r6,-1
   231b0:	18c7883a 	add	r3,r3,r3
   231b4:	293ffa36 	bltu	r5,r4,231a0 <_gp+0xfffd9720>
   231b8:	18000626 	beq	r3,zero,231d4 <__umodsi3+0x4c>
   231bc:	1806d07a 	srli	r3,r3,1
   231c0:	11400136 	bltu	r2,r5,231c8 <__umodsi3+0x40>
   231c4:	1145c83a 	sub	r2,r2,r5
   231c8:	280ad07a 	srli	r5,r5,1
   231cc:	183ffb1e 	bne	r3,zero,231bc <_gp+0xfffd973c>
   231d0:	f800283a 	ret
   231d4:	f800283a 	ret
   231d8:	00c00044 	movi	r3,1
   231dc:	003ff706 	br	231bc <_gp+0xfffd973c>

000231e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231e0:	defffe04 	addi	sp,sp,-8
   231e4:	dfc00115 	stw	ra,4(sp)
   231e8:	df000015 	stw	fp,0(sp)
   231ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231f0:	d0a00917 	ldw	r2,-32732(gp)
   231f4:	10000326 	beq	r2,zero,23204 <alt_get_errno+0x24>
   231f8:	d0a00917 	ldw	r2,-32732(gp)
   231fc:	103ee83a 	callr	r2
   23200:	00000106 	br	23208 <alt_get_errno+0x28>
   23204:	d0a01304 	addi	r2,gp,-32692
}
   23208:	e037883a 	mov	sp,fp
   2320c:	dfc00117 	ldw	ra,4(sp)
   23210:	df000017 	ldw	fp,0(sp)
   23214:	dec00204 	addi	sp,sp,8
   23218:	f800283a 	ret

0002321c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2321c:	defffb04 	addi	sp,sp,-20
   23220:	dfc00415 	stw	ra,16(sp)
   23224:	df000315 	stw	fp,12(sp)
   23228:	df000304 	addi	fp,sp,12
   2322c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23230:	e0bfff17 	ldw	r2,-4(fp)
   23234:	10000816 	blt	r2,zero,23258 <close+0x3c>
   23238:	01400304 	movi	r5,12
   2323c:	e13fff17 	ldw	r4,-4(fp)
   23240:	00203d40 	call	203d4 <__mulsi3>
   23244:	1007883a 	mov	r3,r2
   23248:	00800134 	movhi	r2,4
   2324c:	10822804 	addi	r2,r2,2208
   23250:	1885883a 	add	r2,r3,r2
   23254:	00000106 	br	2325c <close+0x40>
   23258:	0005883a 	mov	r2,zero
   2325c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23260:	e0bffd17 	ldw	r2,-12(fp)
   23264:	10001926 	beq	r2,zero,232cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23268:	e0bffd17 	ldw	r2,-12(fp)
   2326c:	10800017 	ldw	r2,0(r2)
   23270:	10800417 	ldw	r2,16(r2)
   23274:	10000626 	beq	r2,zero,23290 <close+0x74>
   23278:	e0bffd17 	ldw	r2,-12(fp)
   2327c:	10800017 	ldw	r2,0(r2)
   23280:	10800417 	ldw	r2,16(r2)
   23284:	e13ffd17 	ldw	r4,-12(fp)
   23288:	103ee83a 	callr	r2
   2328c:	00000106 	br	23294 <close+0x78>
   23290:	0005883a 	mov	r2,zero
   23294:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23298:	e13fff17 	ldw	r4,-4(fp)
   2329c:	0023a840 	call	23a84 <alt_release_fd>
    if (rval < 0)
   232a0:	e0bffe17 	ldw	r2,-8(fp)
   232a4:	1000070e 	bge	r2,zero,232c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   232a8:	00231e00 	call	231e0 <alt_get_errno>
   232ac:	1007883a 	mov	r3,r2
   232b0:	e0bffe17 	ldw	r2,-8(fp)
   232b4:	0085c83a 	sub	r2,zero,r2
   232b8:	18800015 	stw	r2,0(r3)
      return -1;
   232bc:	00bfffc4 	movi	r2,-1
   232c0:	00000706 	br	232e0 <close+0xc4>
    }
    return 0;
   232c4:	0005883a 	mov	r2,zero
   232c8:	00000506 	br	232e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   232cc:	00231e00 	call	231e0 <alt_get_errno>
   232d0:	1007883a 	mov	r3,r2
   232d4:	00801444 	movi	r2,81
   232d8:	18800015 	stw	r2,0(r3)
    return -1;
   232dc:	00bfffc4 	movi	r2,-1
  }
}
   232e0:	e037883a 	mov	sp,fp
   232e4:	dfc00117 	ldw	ra,4(sp)
   232e8:	df000017 	ldw	fp,0(sp)
   232ec:	dec00204 	addi	sp,sp,8
   232f0:	f800283a 	ret

000232f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   232f4:	defffc04 	addi	sp,sp,-16
   232f8:	df000315 	stw	fp,12(sp)
   232fc:	df000304 	addi	fp,sp,12
   23300:	e13ffd15 	stw	r4,-12(fp)
   23304:	e17ffe15 	stw	r5,-8(fp)
   23308:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2330c:	e0bfff17 	ldw	r2,-4(fp)
}
   23310:	e037883a 	mov	sp,fp
   23314:	df000017 	ldw	fp,0(sp)
   23318:	dec00104 	addi	sp,sp,4
   2331c:	f800283a 	ret

00023320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23320:	defffe04 	addi	sp,sp,-8
   23324:	dfc00115 	stw	ra,4(sp)
   23328:	df000015 	stw	fp,0(sp)
   2332c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23330:	d0a00917 	ldw	r2,-32732(gp)
   23334:	10000326 	beq	r2,zero,23344 <alt_get_errno+0x24>
   23338:	d0a00917 	ldw	r2,-32732(gp)
   2333c:	103ee83a 	callr	r2
   23340:	00000106 	br	23348 <alt_get_errno+0x28>
   23344:	d0a01304 	addi	r2,gp,-32692
}
   23348:	e037883a 	mov	sp,fp
   2334c:	dfc00117 	ldw	ra,4(sp)
   23350:	df000017 	ldw	fp,0(sp)
   23354:	dec00204 	addi	sp,sp,8
   23358:	f800283a 	ret

0002335c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2335c:	defffb04 	addi	sp,sp,-20
   23360:	dfc00415 	stw	ra,16(sp)
   23364:	df000315 	stw	fp,12(sp)
   23368:	df000304 	addi	fp,sp,12
   2336c:	e13ffe15 	stw	r4,-8(fp)
   23370:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23374:	e0bffe17 	ldw	r2,-8(fp)
   23378:	10000816 	blt	r2,zero,2339c <fstat+0x40>
   2337c:	01400304 	movi	r5,12
   23380:	e13ffe17 	ldw	r4,-8(fp)
   23384:	00203d40 	call	203d4 <__mulsi3>
   23388:	1007883a 	mov	r3,r2
   2338c:	00800134 	movhi	r2,4
   23390:	10822804 	addi	r2,r2,2208
   23394:	1885883a 	add	r2,r3,r2
   23398:	00000106 	br	233a0 <fstat+0x44>
   2339c:	0005883a 	mov	r2,zero
   233a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   233a4:	e0bffd17 	ldw	r2,-12(fp)
   233a8:	10001026 	beq	r2,zero,233ec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   233ac:	e0bffd17 	ldw	r2,-12(fp)
   233b0:	10800017 	ldw	r2,0(r2)
   233b4:	10800817 	ldw	r2,32(r2)
   233b8:	10000726 	beq	r2,zero,233d8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   233bc:	e0bffd17 	ldw	r2,-12(fp)
   233c0:	10800017 	ldw	r2,0(r2)
   233c4:	10800817 	ldw	r2,32(r2)
   233c8:	e17fff17 	ldw	r5,-4(fp)
   233cc:	e13ffd17 	ldw	r4,-12(fp)
   233d0:	103ee83a 	callr	r2
   233d4:	00000a06 	br	23400 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   233d8:	e0bfff17 	ldw	r2,-4(fp)
   233dc:	00c80004 	movi	r3,8192
   233e0:	10c00115 	stw	r3,4(r2)
      return 0;
   233e4:	0005883a 	mov	r2,zero
   233e8:	00000506 	br	23400 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   233ec:	00233200 	call	23320 <alt_get_errno>
   233f0:	1007883a 	mov	r3,r2
   233f4:	00801444 	movi	r2,81
   233f8:	18800015 	stw	r2,0(r3)
    return -1;
   233fc:	00bfffc4 	movi	r2,-1
  }
}
   23400:	e037883a 	mov	sp,fp
   23404:	dfc00117 	ldw	ra,4(sp)
   23408:	df000017 	ldw	fp,0(sp)
   2340c:	dec00204 	addi	sp,sp,8
   23410:	f800283a 	ret

00023414 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   23414:	defff004 	addi	sp,sp,-64
   23418:	df000f15 	stw	fp,60(sp)
   2341c:	df000f04 	addi	fp,sp,60
   23420:	e13ffd15 	stw	r4,-12(fp)
   23424:	e17ffe15 	stw	r5,-8(fp)
   23428:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   2342c:	00bffa84 	movi	r2,-22
   23430:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23434:	e0bffd17 	ldw	r2,-12(fp)
   23438:	10800828 	cmpgeui	r2,r2,32
   2343c:	1000501e 	bne	r2,zero,23580 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23440:	0005303a 	rdctl	r2,status
   23444:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23448:	e0fff617 	ldw	r3,-40(fp)
   2344c:	00bfff84 	movi	r2,-2
   23450:	1884703a 	and	r2,r3,r2
   23454:	1001703a 	wrctl	status,r2
  
  return context;
   23458:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   2345c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   23460:	00800134 	movhi	r2,4
   23464:	1086c504 	addi	r2,r2,6932
   23468:	e0fffd17 	ldw	r3,-12(fp)
   2346c:	180690fa 	slli	r3,r3,3
   23470:	10c5883a 	add	r2,r2,r3
   23474:	e0ffff17 	ldw	r3,-4(fp)
   23478:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   2347c:	00800134 	movhi	r2,4
   23480:	1086c504 	addi	r2,r2,6932
   23484:	e0fffd17 	ldw	r3,-12(fp)
   23488:	180690fa 	slli	r3,r3,3
   2348c:	10c5883a 	add	r2,r2,r3
   23490:	10800104 	addi	r2,r2,4
   23494:	e0fffe17 	ldw	r3,-8(fp)
   23498:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   2349c:	e0bfff17 	ldw	r2,-4(fp)
   234a0:	10001926 	beq	r2,zero,23508 <alt_irq_register+0xf4>
   234a4:	e0bffd17 	ldw	r2,-12(fp)
   234a8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234ac:	0005303a 	rdctl	r2,status
   234b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234b4:	e0fff717 	ldw	r3,-36(fp)
   234b8:	00bfff84 	movi	r2,-2
   234bc:	1884703a 	and	r2,r3,r2
   234c0:	1001703a 	wrctl	status,r2
  
  return context;
   234c4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   234c8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   234cc:	00c00044 	movi	r3,1
   234d0:	e0bff217 	ldw	r2,-56(fp)
   234d4:	1884983a 	sll	r2,r3,r2
   234d8:	1007883a 	mov	r3,r2
   234dc:	d0a01417 	ldw	r2,-32688(gp)
   234e0:	1884b03a 	or	r2,r3,r2
   234e4:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   234e8:	d0a01417 	ldw	r2,-32688(gp)
   234ec:	100170fa 	wrctl	ienable,r2
   234f0:	e0bff817 	ldw	r2,-32(fp)
   234f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234f8:	e0bff917 	ldw	r2,-28(fp)
   234fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23500:	0005883a 	mov	r2,zero
   23504:	00001906 	br	2356c <alt_irq_register+0x158>
   23508:	e0bffd17 	ldw	r2,-12(fp)
   2350c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23510:	0005303a 	rdctl	r2,status
   23514:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23518:	e0fffa17 	ldw	r3,-24(fp)
   2351c:	00bfff84 	movi	r2,-2
   23520:	1884703a 	and	r2,r3,r2
   23524:	1001703a 	wrctl	status,r2
  
  return context;
   23528:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2352c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   23530:	00c00044 	movi	r3,1
   23534:	e0bff417 	ldw	r2,-48(fp)
   23538:	1884983a 	sll	r2,r3,r2
   2353c:	0084303a 	nor	r2,zero,r2
   23540:	1007883a 	mov	r3,r2
   23544:	d0a01417 	ldw	r2,-32688(gp)
   23548:	1884703a 	and	r2,r3,r2
   2354c:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23550:	d0a01417 	ldw	r2,-32688(gp)
   23554:	100170fa 	wrctl	ienable,r2
   23558:	e0bffb17 	ldw	r2,-20(fp)
   2355c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23560:	e0bffc17 	ldw	r2,-16(fp)
   23564:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23568:	0005883a 	mov	r2,zero
   2356c:	e0bff115 	stw	r2,-60(fp)
   23570:	e0bff317 	ldw	r2,-52(fp)
   23574:	e0bff515 	stw	r2,-44(fp)
   23578:	e0bff517 	ldw	r2,-44(fp)
   2357c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   23580:	e0bff117 	ldw	r2,-60(fp)
}
   23584:	e037883a 	mov	sp,fp
   23588:	df000017 	ldw	fp,0(sp)
   2358c:	dec00104 	addi	sp,sp,4
   23590:	f800283a 	ret

00023594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23594:	defffe04 	addi	sp,sp,-8
   23598:	dfc00115 	stw	ra,4(sp)
   2359c:	df000015 	stw	fp,0(sp)
   235a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235a4:	d0a00917 	ldw	r2,-32732(gp)
   235a8:	10000326 	beq	r2,zero,235b8 <alt_get_errno+0x24>
   235ac:	d0a00917 	ldw	r2,-32732(gp)
   235b0:	103ee83a 	callr	r2
   235b4:	00000106 	br	235bc <alt_get_errno+0x28>
   235b8:	d0a01304 	addi	r2,gp,-32692
}
   235bc:	e037883a 	mov	sp,fp
   235c0:	dfc00117 	ldw	ra,4(sp)
   235c4:	df000017 	ldw	fp,0(sp)
   235c8:	dec00204 	addi	sp,sp,8
   235cc:	f800283a 	ret

000235d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   235d0:	deffed04 	addi	sp,sp,-76
   235d4:	dfc01215 	stw	ra,72(sp)
   235d8:	df001115 	stw	fp,68(sp)
   235dc:	df001104 	addi	fp,sp,68
   235e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   235e4:	e0bfff17 	ldw	r2,-4(fp)
   235e8:	10000816 	blt	r2,zero,2360c <isatty+0x3c>
   235ec:	01400304 	movi	r5,12
   235f0:	e13fff17 	ldw	r4,-4(fp)
   235f4:	00203d40 	call	203d4 <__mulsi3>
   235f8:	1007883a 	mov	r3,r2
   235fc:	00800134 	movhi	r2,4
   23600:	10822804 	addi	r2,r2,2208
   23604:	1885883a 	add	r2,r3,r2
   23608:	00000106 	br	23610 <isatty+0x40>
   2360c:	0005883a 	mov	r2,zero
   23610:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23614:	e0bfef17 	ldw	r2,-68(fp)
   23618:	10000e26 	beq	r2,zero,23654 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2361c:	e0bfef17 	ldw	r2,-68(fp)
   23620:	10800017 	ldw	r2,0(r2)
   23624:	10800817 	ldw	r2,32(r2)
   23628:	1000021e 	bne	r2,zero,23634 <isatty+0x64>
    {
      return 1;
   2362c:	00800044 	movi	r2,1
   23630:	00000d06 	br	23668 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23634:	e0bff004 	addi	r2,fp,-64
   23638:	100b883a 	mov	r5,r2
   2363c:	e13fff17 	ldw	r4,-4(fp)
   23640:	002335c0 	call	2335c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23644:	e0bff117 	ldw	r2,-60(fp)
   23648:	10880020 	cmpeqi	r2,r2,8192
   2364c:	10803fcc 	andi	r2,r2,255
   23650:	00000506 	br	23668 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23654:	00235940 	call	23594 <alt_get_errno>
   23658:	1007883a 	mov	r3,r2
   2365c:	00801444 	movi	r2,81
   23660:	18800015 	stw	r2,0(r3)
    return 0;
   23664:	0005883a 	mov	r2,zero
  }
}
   23668:	e037883a 	mov	sp,fp
   2366c:	dfc00117 	ldw	ra,4(sp)
   23670:	df000017 	ldw	fp,0(sp)
   23674:	dec00204 	addi	sp,sp,8
   23678:	f800283a 	ret

0002367c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2367c:	defffc04 	addi	sp,sp,-16
   23680:	df000315 	stw	fp,12(sp)
   23684:	df000304 	addi	fp,sp,12
   23688:	e13ffd15 	stw	r4,-12(fp)
   2368c:	e17ffe15 	stw	r5,-8(fp)
   23690:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23694:	e0fffe17 	ldw	r3,-8(fp)
   23698:	e0bffd17 	ldw	r2,-12(fp)
   2369c:	18800c26 	beq	r3,r2,236d0 <alt_load_section+0x54>
  {
    while( to != end )
   236a0:	00000806 	br	236c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   236a4:	e0bffe17 	ldw	r2,-8(fp)
   236a8:	10c00104 	addi	r3,r2,4
   236ac:	e0fffe15 	stw	r3,-8(fp)
   236b0:	e0fffd17 	ldw	r3,-12(fp)
   236b4:	19000104 	addi	r4,r3,4
   236b8:	e13ffd15 	stw	r4,-12(fp)
   236bc:	18c00017 	ldw	r3,0(r3)
   236c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   236c4:	e0fffe17 	ldw	r3,-8(fp)
   236c8:	e0bfff17 	ldw	r2,-4(fp)
   236cc:	18bff51e 	bne	r3,r2,236a4 <_gp+0xfffd9c24>
    {
      *to++ = *from++;
    }
  }
}
   236d0:	0001883a 	nop
   236d4:	e037883a 	mov	sp,fp
   236d8:	df000017 	ldw	fp,0(sp)
   236dc:	dec00104 	addi	sp,sp,4
   236e0:	f800283a 	ret

000236e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   236e4:	defffe04 	addi	sp,sp,-8
   236e8:	dfc00115 	stw	ra,4(sp)
   236ec:	df000015 	stw	fp,0(sp)
   236f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   236f4:	01800134 	movhi	r6,4
   236f8:	3186ae04 	addi	r6,r6,6840
   236fc:	01400134 	movhi	r5,4
   23700:	29401304 	addi	r5,r5,76
   23704:	010000b4 	movhi	r4,2
   23708:	2116df04 	addi	r4,r4,23420
   2370c:	002367c0 	call	2367c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23710:	018000b4 	movhi	r6,2
   23714:	31808c04 	addi	r6,r6,560
   23718:	014000b4 	movhi	r5,2
   2371c:	29400804 	addi	r5,r5,32
   23720:	010000b4 	movhi	r4,2
   23724:	21000804 	addi	r4,r4,32
   23728:	002367c0 	call	2367c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2372c:	01800134 	movhi	r6,4
   23730:	31801304 	addi	r6,r6,76
   23734:	01400134 	movhi	r5,4
   23738:	29400004 	addi	r5,r5,0
   2373c:	01000134 	movhi	r4,4
   23740:	21000004 	addi	r4,r4,0
   23744:	002367c0 	call	2367c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23748:	0024ac40 	call	24ac4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2374c:	0024c840 	call	24c84 <alt_icache_flush_all>
}
   23750:	0001883a 	nop
   23754:	e037883a 	mov	sp,fp
   23758:	dfc00117 	ldw	ra,4(sp)
   2375c:	df000017 	ldw	fp,0(sp)
   23760:	dec00204 	addi	sp,sp,8
   23764:	f800283a 	ret

00023768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23768:	defffe04 	addi	sp,sp,-8
   2376c:	dfc00115 	stw	ra,4(sp)
   23770:	df000015 	stw	fp,0(sp)
   23774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23778:	d0a00917 	ldw	r2,-32732(gp)
   2377c:	10000326 	beq	r2,zero,2378c <alt_get_errno+0x24>
   23780:	d0a00917 	ldw	r2,-32732(gp)
   23784:	103ee83a 	callr	r2
   23788:	00000106 	br	23790 <alt_get_errno+0x28>
   2378c:	d0a01304 	addi	r2,gp,-32692
}
   23790:	e037883a 	mov	sp,fp
   23794:	dfc00117 	ldw	ra,4(sp)
   23798:	df000017 	ldw	fp,0(sp)
   2379c:	dec00204 	addi	sp,sp,8
   237a0:	f800283a 	ret

000237a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   237a4:	defff904 	addi	sp,sp,-28
   237a8:	dfc00615 	stw	ra,24(sp)
   237ac:	df000515 	stw	fp,20(sp)
   237b0:	df000504 	addi	fp,sp,20
   237b4:	e13ffd15 	stw	r4,-12(fp)
   237b8:	e17ffe15 	stw	r5,-8(fp)
   237bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   237c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237c4:	e0bffd17 	ldw	r2,-12(fp)
   237c8:	10000816 	blt	r2,zero,237ec <lseek+0x48>
   237cc:	01400304 	movi	r5,12
   237d0:	e13ffd17 	ldw	r4,-12(fp)
   237d4:	00203d40 	call	203d4 <__mulsi3>
   237d8:	1007883a 	mov	r3,r2
   237dc:	00800134 	movhi	r2,4
   237e0:	10822804 	addi	r2,r2,2208
   237e4:	1885883a 	add	r2,r3,r2
   237e8:	00000106 	br	237f0 <lseek+0x4c>
   237ec:	0005883a 	mov	r2,zero
   237f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   237f4:	e0bffc17 	ldw	r2,-16(fp)
   237f8:	10001026 	beq	r2,zero,2383c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   237fc:	e0bffc17 	ldw	r2,-16(fp)
   23800:	10800017 	ldw	r2,0(r2)
   23804:	10800717 	ldw	r2,28(r2)
   23808:	10000926 	beq	r2,zero,23830 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2380c:	e0bffc17 	ldw	r2,-16(fp)
   23810:	10800017 	ldw	r2,0(r2)
   23814:	10800717 	ldw	r2,28(r2)
   23818:	e1bfff17 	ldw	r6,-4(fp)
   2381c:	e17ffe17 	ldw	r5,-8(fp)
   23820:	e13ffc17 	ldw	r4,-16(fp)
   23824:	103ee83a 	callr	r2
   23828:	e0bffb15 	stw	r2,-20(fp)
   2382c:	00000506 	br	23844 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23830:	00bfde84 	movi	r2,-134
   23834:	e0bffb15 	stw	r2,-20(fp)
   23838:	00000206 	br	23844 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2383c:	00bfebc4 	movi	r2,-81
   23840:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23844:	e0bffb17 	ldw	r2,-20(fp)
   23848:	1000070e 	bge	r2,zero,23868 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2384c:	00237680 	call	23768 <alt_get_errno>
   23850:	1007883a 	mov	r3,r2
   23854:	e0bffb17 	ldw	r2,-20(fp)
   23858:	0085c83a 	sub	r2,zero,r2
   2385c:	18800015 	stw	r2,0(r3)
    rc = -1;
   23860:	00bfffc4 	movi	r2,-1
   23864:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23868:	e0bffb17 	ldw	r2,-20(fp)
}
   2386c:	e037883a 	mov	sp,fp
   23870:	dfc00117 	ldw	ra,4(sp)
   23874:	df000017 	ldw	fp,0(sp)
   23878:	dec00204 	addi	sp,sp,8
   2387c:	f800283a 	ret

00023880 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23880:	defffd04 	addi	sp,sp,-12
   23884:	dfc00215 	stw	ra,8(sp)
   23888:	df000115 	stw	fp,4(sp)
   2388c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23890:	0009883a 	mov	r4,zero
   23894:	0023d580 	call	23d58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23898:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2389c:	0023d900 	call	23d90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   238a0:	01800134 	movhi	r6,4
   238a4:	31800904 	addi	r6,r6,36
   238a8:	01400134 	movhi	r5,4
   238ac:	29400904 	addi	r5,r5,36
   238b0:	01000134 	movhi	r4,4
   238b4:	21000904 	addi	r4,r4,36
   238b8:	00250280 	call	25028 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   238bc:	0024bc40 	call	24bc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   238c0:	010000b4 	movhi	r4,2
   238c4:	21130904 	addi	r4,r4,19492
   238c8:	00257e80 	call	257e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   238cc:	d0a01517 	ldw	r2,-32684(gp)
   238d0:	d0e01617 	ldw	r3,-32680(gp)
   238d4:	d1201717 	ldw	r4,-32676(gp)
   238d8:	200d883a 	mov	r6,r4
   238dc:	180b883a 	mov	r5,r3
   238e0:	1009883a 	mov	r4,r2
   238e4:	00203300 	call	20330 <main>
   238e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   238ec:	01000044 	movi	r4,1
   238f0:	002321c0 	call	2321c <close>
  exit (result);
   238f4:	e13fff17 	ldw	r4,-4(fp)
   238f8:	00257fc0 	call	257fc <exit>

000238fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   238fc:	defffe04 	addi	sp,sp,-8
   23900:	df000115 	stw	fp,4(sp)
   23904:	df000104 	addi	fp,sp,4
   23908:	e13fff15 	stw	r4,-4(fp)
}
   2390c:	0001883a 	nop
   23910:	e037883a 	mov	sp,fp
   23914:	df000017 	ldw	fp,0(sp)
   23918:	dec00104 	addi	sp,sp,4
   2391c:	f800283a 	ret

00023920 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23920:	defffe04 	addi	sp,sp,-8
   23924:	df000115 	stw	fp,4(sp)
   23928:	df000104 	addi	fp,sp,4
   2392c:	e13fff15 	stw	r4,-4(fp)
}
   23930:	0001883a 	nop
   23934:	e037883a 	mov	sp,fp
   23938:	df000017 	ldw	fp,0(sp)
   2393c:	dec00104 	addi	sp,sp,4
   23940:	f800283a 	ret

00023944 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23944:	defffe04 	addi	sp,sp,-8
   23948:	dfc00115 	stw	ra,4(sp)
   2394c:	df000015 	stw	fp,0(sp)
   23950:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23954:	d0a00917 	ldw	r2,-32732(gp)
   23958:	10000326 	beq	r2,zero,23968 <alt_get_errno+0x24>
   2395c:	d0a00917 	ldw	r2,-32732(gp)
   23960:	103ee83a 	callr	r2
   23964:	00000106 	br	2396c <alt_get_errno+0x28>
   23968:	d0a01304 	addi	r2,gp,-32692
}
   2396c:	e037883a 	mov	sp,fp
   23970:	dfc00117 	ldw	ra,4(sp)
   23974:	df000017 	ldw	fp,0(sp)
   23978:	dec00204 	addi	sp,sp,8
   2397c:	f800283a 	ret

00023980 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23980:	defff904 	addi	sp,sp,-28
   23984:	dfc00615 	stw	ra,24(sp)
   23988:	df000515 	stw	fp,20(sp)
   2398c:	df000504 	addi	fp,sp,20
   23990:	e13ffd15 	stw	r4,-12(fp)
   23994:	e17ffe15 	stw	r5,-8(fp)
   23998:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2399c:	e0bffd17 	ldw	r2,-12(fp)
   239a0:	10000816 	blt	r2,zero,239c4 <read+0x44>
   239a4:	01400304 	movi	r5,12
   239a8:	e13ffd17 	ldw	r4,-12(fp)
   239ac:	00203d40 	call	203d4 <__mulsi3>
   239b0:	1007883a 	mov	r3,r2
   239b4:	00800134 	movhi	r2,4
   239b8:	10822804 	addi	r2,r2,2208
   239bc:	1885883a 	add	r2,r3,r2
   239c0:	00000106 	br	239c8 <read+0x48>
   239c4:	0005883a 	mov	r2,zero
   239c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   239cc:	e0bffb17 	ldw	r2,-20(fp)
   239d0:	10002226 	beq	r2,zero,23a5c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   239d4:	e0bffb17 	ldw	r2,-20(fp)
   239d8:	10800217 	ldw	r2,8(r2)
   239dc:	108000cc 	andi	r2,r2,3
   239e0:	10800060 	cmpeqi	r2,r2,1
   239e4:	1000181e 	bne	r2,zero,23a48 <read+0xc8>
        (fd->dev->read))
   239e8:	e0bffb17 	ldw	r2,-20(fp)
   239ec:	10800017 	ldw	r2,0(r2)
   239f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   239f4:	10001426 	beq	r2,zero,23a48 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   239f8:	e0bffb17 	ldw	r2,-20(fp)
   239fc:	10800017 	ldw	r2,0(r2)
   23a00:	10800517 	ldw	r2,20(r2)
   23a04:	e0ffff17 	ldw	r3,-4(fp)
   23a08:	180d883a 	mov	r6,r3
   23a0c:	e17ffe17 	ldw	r5,-8(fp)
   23a10:	e13ffb17 	ldw	r4,-20(fp)
   23a14:	103ee83a 	callr	r2
   23a18:	e0bffc15 	stw	r2,-16(fp)
   23a1c:	e0bffc17 	ldw	r2,-16(fp)
   23a20:	1000070e 	bge	r2,zero,23a40 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23a24:	00239440 	call	23944 <alt_get_errno>
   23a28:	1007883a 	mov	r3,r2
   23a2c:	e0bffc17 	ldw	r2,-16(fp)
   23a30:	0085c83a 	sub	r2,zero,r2
   23a34:	18800015 	stw	r2,0(r3)
          return -1;
   23a38:	00bfffc4 	movi	r2,-1
   23a3c:	00000c06 	br	23a70 <read+0xf0>
        }
        return rval;
   23a40:	e0bffc17 	ldw	r2,-16(fp)
   23a44:	00000a06 	br	23a70 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23a48:	00239440 	call	23944 <alt_get_errno>
   23a4c:	1007883a 	mov	r3,r2
   23a50:	00800344 	movi	r2,13
   23a54:	18800015 	stw	r2,0(r3)
   23a58:	00000406 	br	23a6c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23a5c:	00239440 	call	23944 <alt_get_errno>
   23a60:	1007883a 	mov	r3,r2
   23a64:	00801444 	movi	r2,81
   23a68:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a6c:	00bfffc4 	movi	r2,-1
}
   23a70:	e037883a 	mov	sp,fp
   23a74:	dfc00117 	ldw	ra,4(sp)
   23a78:	df000017 	ldw	fp,0(sp)
   23a7c:	dec00204 	addi	sp,sp,8
   23a80:	f800283a 	ret

00023a84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23a84:	defffc04 	addi	sp,sp,-16
   23a88:	dfc00315 	stw	ra,12(sp)
   23a8c:	df000215 	stw	fp,8(sp)
   23a90:	dc000115 	stw	r16,4(sp)
   23a94:	df000204 	addi	fp,sp,8
   23a98:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23a9c:	e0bffe17 	ldw	r2,-8(fp)
   23aa0:	108000d0 	cmplti	r2,r2,3
   23aa4:	1000111e 	bne	r2,zero,23aec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23aa8:	04000134 	movhi	r16,4
   23aac:	84022804 	addi	r16,r16,2208
   23ab0:	e0bffe17 	ldw	r2,-8(fp)
   23ab4:	01400304 	movi	r5,12
   23ab8:	1009883a 	mov	r4,r2
   23abc:	00203d40 	call	203d4 <__mulsi3>
   23ac0:	8085883a 	add	r2,r16,r2
   23ac4:	10800204 	addi	r2,r2,8
   23ac8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23acc:	04000134 	movhi	r16,4
   23ad0:	84022804 	addi	r16,r16,2208
   23ad4:	e0bffe17 	ldw	r2,-8(fp)
   23ad8:	01400304 	movi	r5,12
   23adc:	1009883a 	mov	r4,r2
   23ae0:	00203d40 	call	203d4 <__mulsi3>
   23ae4:	8085883a 	add	r2,r16,r2
   23ae8:	10000015 	stw	zero,0(r2)
  }
}
   23aec:	0001883a 	nop
   23af0:	e6ffff04 	addi	sp,fp,-4
   23af4:	dfc00217 	ldw	ra,8(sp)
   23af8:	df000117 	ldw	fp,4(sp)
   23afc:	dc000017 	ldw	r16,0(sp)
   23b00:	dec00304 	addi	sp,sp,12
   23b04:	f800283a 	ret

00023b08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23b08:	defff904 	addi	sp,sp,-28
   23b0c:	df000615 	stw	fp,24(sp)
   23b10:	df000604 	addi	fp,sp,24
   23b14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b18:	0005303a 	rdctl	r2,status
   23b1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b20:	e0fffe17 	ldw	r3,-8(fp)
   23b24:	00bfff84 	movi	r2,-2
   23b28:	1884703a 	and	r2,r3,r2
   23b2c:	1001703a 	wrctl	status,r2
  
  return context;
   23b30:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23b34:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23b38:	d0a00b17 	ldw	r2,-32724(gp)
   23b3c:	10c000c4 	addi	r3,r2,3
   23b40:	00bfff04 	movi	r2,-4
   23b44:	1884703a 	and	r2,r3,r2
   23b48:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23b4c:	d0e00b17 	ldw	r3,-32724(gp)
   23b50:	e0bfff17 	ldw	r2,-4(fp)
   23b54:	1887883a 	add	r3,r3,r2
   23b58:	00800174 	movhi	r2,5
   23b5c:	10a00004 	addi	r2,r2,-32768
   23b60:	10c0062e 	bgeu	r2,r3,23b7c <sbrk+0x74>
   23b64:	e0bffb17 	ldw	r2,-20(fp)
   23b68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b6c:	e0bffa17 	ldw	r2,-24(fp)
   23b70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23b74:	00bfffc4 	movi	r2,-1
   23b78:	00000b06 	br	23ba8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23b7c:	d0a00b17 	ldw	r2,-32724(gp)
   23b80:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23b84:	d0e00b17 	ldw	r3,-32724(gp)
   23b88:	e0bfff17 	ldw	r2,-4(fp)
   23b8c:	1885883a 	add	r2,r3,r2
   23b90:	d0a00b15 	stw	r2,-32724(gp)
   23b94:	e0bffb17 	ldw	r2,-20(fp)
   23b98:	e0bffc15 	stw	r2,-16(fp)
   23b9c:	e0bffc17 	ldw	r2,-16(fp)
   23ba0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23ba4:	e0bffd17 	ldw	r2,-12(fp)
} 
   23ba8:	e037883a 	mov	sp,fp
   23bac:	df000017 	ldw	fp,0(sp)
   23bb0:	dec00104 	addi	sp,sp,4
   23bb4:	f800283a 	ret

00023bb8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23bb8:	defffd04 	addi	sp,sp,-12
   23bbc:	dfc00215 	stw	ra,8(sp)
   23bc0:	df000115 	stw	fp,4(sp)
   23bc4:	df000104 	addi	fp,sp,4
   23bc8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23bcc:	e13fff17 	ldw	r4,-4(fp)
   23bd0:	002496c0 	call	2496c <alt_busy_sleep>
}
   23bd4:	e037883a 	mov	sp,fp
   23bd8:	dfc00117 	ldw	ra,4(sp)
   23bdc:	df000017 	ldw	fp,0(sp)
   23be0:	dec00204 	addi	sp,sp,8
   23be4:	f800283a 	ret

00023be8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23be8:	defffe04 	addi	sp,sp,-8
   23bec:	dfc00115 	stw	ra,4(sp)
   23bf0:	df000015 	stw	fp,0(sp)
   23bf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23bf8:	d0a00917 	ldw	r2,-32732(gp)
   23bfc:	10000326 	beq	r2,zero,23c0c <alt_get_errno+0x24>
   23c00:	d0a00917 	ldw	r2,-32732(gp)
   23c04:	103ee83a 	callr	r2
   23c08:	00000106 	br	23c10 <alt_get_errno+0x28>
   23c0c:	d0a01304 	addi	r2,gp,-32692
}
   23c10:	e037883a 	mov	sp,fp
   23c14:	dfc00117 	ldw	ra,4(sp)
   23c18:	df000017 	ldw	fp,0(sp)
   23c1c:	dec00204 	addi	sp,sp,8
   23c20:	f800283a 	ret

00023c24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23c24:	defff904 	addi	sp,sp,-28
   23c28:	dfc00615 	stw	ra,24(sp)
   23c2c:	df000515 	stw	fp,20(sp)
   23c30:	df000504 	addi	fp,sp,20
   23c34:	e13ffd15 	stw	r4,-12(fp)
   23c38:	e17ffe15 	stw	r5,-8(fp)
   23c3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c40:	e0bffd17 	ldw	r2,-12(fp)
   23c44:	10000816 	blt	r2,zero,23c68 <write+0x44>
   23c48:	01400304 	movi	r5,12
   23c4c:	e13ffd17 	ldw	r4,-12(fp)
   23c50:	00203d40 	call	203d4 <__mulsi3>
   23c54:	1007883a 	mov	r3,r2
   23c58:	00800134 	movhi	r2,4
   23c5c:	10822804 	addi	r2,r2,2208
   23c60:	1885883a 	add	r2,r3,r2
   23c64:	00000106 	br	23c6c <write+0x48>
   23c68:	0005883a 	mov	r2,zero
   23c6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23c70:	e0bffb17 	ldw	r2,-20(fp)
   23c74:	10002126 	beq	r2,zero,23cfc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23c78:	e0bffb17 	ldw	r2,-20(fp)
   23c7c:	10800217 	ldw	r2,8(r2)
   23c80:	108000cc 	andi	r2,r2,3
   23c84:	10001826 	beq	r2,zero,23ce8 <write+0xc4>
   23c88:	e0bffb17 	ldw	r2,-20(fp)
   23c8c:	10800017 	ldw	r2,0(r2)
   23c90:	10800617 	ldw	r2,24(r2)
   23c94:	10001426 	beq	r2,zero,23ce8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23c98:	e0bffb17 	ldw	r2,-20(fp)
   23c9c:	10800017 	ldw	r2,0(r2)
   23ca0:	10800617 	ldw	r2,24(r2)
   23ca4:	e0ffff17 	ldw	r3,-4(fp)
   23ca8:	180d883a 	mov	r6,r3
   23cac:	e17ffe17 	ldw	r5,-8(fp)
   23cb0:	e13ffb17 	ldw	r4,-20(fp)
   23cb4:	103ee83a 	callr	r2
   23cb8:	e0bffc15 	stw	r2,-16(fp)
   23cbc:	e0bffc17 	ldw	r2,-16(fp)
   23cc0:	1000070e 	bge	r2,zero,23ce0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23cc4:	0023be80 	call	23be8 <alt_get_errno>
   23cc8:	1007883a 	mov	r3,r2
   23ccc:	e0bffc17 	ldw	r2,-16(fp)
   23cd0:	0085c83a 	sub	r2,zero,r2
   23cd4:	18800015 	stw	r2,0(r3)
        return -1;
   23cd8:	00bfffc4 	movi	r2,-1
   23cdc:	00000c06 	br	23d10 <write+0xec>
      }
      return rval;
   23ce0:	e0bffc17 	ldw	r2,-16(fp)
   23ce4:	00000a06 	br	23d10 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23ce8:	0023be80 	call	23be8 <alt_get_errno>
   23cec:	1007883a 	mov	r3,r2
   23cf0:	00800344 	movi	r2,13
   23cf4:	18800015 	stw	r2,0(r3)
   23cf8:	00000406 	br	23d0c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23cfc:	0023be80 	call	23be8 <alt_get_errno>
   23d00:	1007883a 	mov	r3,r2
   23d04:	00801444 	movi	r2,81
   23d08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d0c:	00bfffc4 	movi	r2,-1
}
   23d10:	e037883a 	mov	sp,fp
   23d14:	dfc00117 	ldw	ra,4(sp)
   23d18:	df000017 	ldw	fp,0(sp)
   23d1c:	dec00204 	addi	sp,sp,8
   23d20:	f800283a 	ret

00023d24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23d24:	defffd04 	addi	sp,sp,-12
   23d28:	dfc00215 	stw	ra,8(sp)
   23d2c:	df000115 	stw	fp,4(sp)
   23d30:	df000104 	addi	fp,sp,4
   23d34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23d38:	d1600604 	addi	r5,gp,-32744
   23d3c:	e13fff17 	ldw	r4,-4(fp)
   23d40:	0024b200 	call	24b20 <alt_dev_llist_insert>
}
   23d44:	e037883a 	mov	sp,fp
   23d48:	dfc00117 	ldw	ra,4(sp)
   23d4c:	df000017 	ldw	fp,0(sp)
   23d50:	dec00204 	addi	sp,sp,8
   23d54:	f800283a 	ret

00023d58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23d58:	defffd04 	addi	sp,sp,-12
   23d5c:	dfc00215 	stw	ra,8(sp)
   23d60:	df000115 	stw	fp,4(sp)
   23d64:	df000104 	addi	fp,sp,4
   23d68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23d6c:	00254cc0 	call	254cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23d70:	00800044 	movi	r2,1
   23d74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23d78:	0001883a 	nop
   23d7c:	e037883a 	mov	sp,fp
   23d80:	dfc00117 	ldw	ra,4(sp)
   23d84:	df000017 	ldw	fp,0(sp)
   23d88:	dec00204 	addi	sp,sp,8
   23d8c:	f800283a 	ret

00023d90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23d90:	defffe04 	addi	sp,sp,-8
   23d94:	dfc00115 	stw	ra,4(sp)
   23d98:	df000015 	stw	fp,0(sp)
   23d9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23da0:	000d883a 	mov	r6,zero
   23da4:	000b883a 	mov	r5,zero
   23da8:	01000134 	movhi	r4,4
   23dac:	21029204 	addi	r4,r4,2632
   23db0:	0023f3c0 	call	23f3c <altera_avalon_jtag_uart_init>
   23db4:	01000134 	movhi	r4,4
   23db8:	21028804 	addi	r4,r4,2592
   23dbc:	0023d240 	call	23d24 <alt_dev_reg>
}
   23dc0:	0001883a 	nop
   23dc4:	e037883a 	mov	sp,fp
   23dc8:	dfc00117 	ldw	ra,4(sp)
   23dcc:	df000017 	ldw	fp,0(sp)
   23dd0:	dec00204 	addi	sp,sp,8
   23dd4:	f800283a 	ret

00023dd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23dd8:	defffa04 	addi	sp,sp,-24
   23ddc:	dfc00515 	stw	ra,20(sp)
   23de0:	df000415 	stw	fp,16(sp)
   23de4:	df000404 	addi	fp,sp,16
   23de8:	e13ffd15 	stw	r4,-12(fp)
   23dec:	e17ffe15 	stw	r5,-8(fp)
   23df0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23df4:	e0bffd17 	ldw	r2,-12(fp)
   23df8:	10800017 	ldw	r2,0(r2)
   23dfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23e00:	e0bffc17 	ldw	r2,-16(fp)
   23e04:	10c00a04 	addi	r3,r2,40
   23e08:	e0bffd17 	ldw	r2,-12(fp)
   23e0c:	10800217 	ldw	r2,8(r2)
   23e10:	100f883a 	mov	r7,r2
   23e14:	e1bfff17 	ldw	r6,-4(fp)
   23e18:	e17ffe17 	ldw	r5,-8(fp)
   23e1c:	1809883a 	mov	r4,r3
   23e20:	00244000 	call	24400 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23e24:	e037883a 	mov	sp,fp
   23e28:	dfc00117 	ldw	ra,4(sp)
   23e2c:	df000017 	ldw	fp,0(sp)
   23e30:	dec00204 	addi	sp,sp,8
   23e34:	f800283a 	ret

00023e38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23e38:	defffa04 	addi	sp,sp,-24
   23e3c:	dfc00515 	stw	ra,20(sp)
   23e40:	df000415 	stw	fp,16(sp)
   23e44:	df000404 	addi	fp,sp,16
   23e48:	e13ffd15 	stw	r4,-12(fp)
   23e4c:	e17ffe15 	stw	r5,-8(fp)
   23e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e54:	e0bffd17 	ldw	r2,-12(fp)
   23e58:	10800017 	ldw	r2,0(r2)
   23e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23e60:	e0bffc17 	ldw	r2,-16(fp)
   23e64:	10c00a04 	addi	r3,r2,40
   23e68:	e0bffd17 	ldw	r2,-12(fp)
   23e6c:	10800217 	ldw	r2,8(r2)
   23e70:	100f883a 	mov	r7,r2
   23e74:	e1bfff17 	ldw	r6,-4(fp)
   23e78:	e17ffe17 	ldw	r5,-8(fp)
   23e7c:	1809883a 	mov	r4,r3
   23e80:	002461c0 	call	2461c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23e84:	e037883a 	mov	sp,fp
   23e88:	dfc00117 	ldw	ra,4(sp)
   23e8c:	df000017 	ldw	fp,0(sp)
   23e90:	dec00204 	addi	sp,sp,8
   23e94:	f800283a 	ret

00023e98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23e98:	defffc04 	addi	sp,sp,-16
   23e9c:	dfc00315 	stw	ra,12(sp)
   23ea0:	df000215 	stw	fp,8(sp)
   23ea4:	df000204 	addi	fp,sp,8
   23ea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23eac:	e0bfff17 	ldw	r2,-4(fp)
   23eb0:	10800017 	ldw	r2,0(r2)
   23eb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23eb8:	e0bffe17 	ldw	r2,-8(fp)
   23ebc:	10c00a04 	addi	r3,r2,40
   23ec0:	e0bfff17 	ldw	r2,-4(fp)
   23ec4:	10800217 	ldw	r2,8(r2)
   23ec8:	100b883a 	mov	r5,r2
   23ecc:	1809883a 	mov	r4,r3
   23ed0:	00242a80 	call	242a8 <altera_avalon_jtag_uart_close>
}
   23ed4:	e037883a 	mov	sp,fp
   23ed8:	dfc00117 	ldw	ra,4(sp)
   23edc:	df000017 	ldw	fp,0(sp)
   23ee0:	dec00204 	addi	sp,sp,8
   23ee4:	f800283a 	ret

00023ee8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23ee8:	defffa04 	addi	sp,sp,-24
   23eec:	dfc00515 	stw	ra,20(sp)
   23ef0:	df000415 	stw	fp,16(sp)
   23ef4:	df000404 	addi	fp,sp,16
   23ef8:	e13ffd15 	stw	r4,-12(fp)
   23efc:	e17ffe15 	stw	r5,-8(fp)
   23f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23f04:	e0bffd17 	ldw	r2,-12(fp)
   23f08:	10800017 	ldw	r2,0(r2)
   23f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23f10:	e0bffc17 	ldw	r2,-16(fp)
   23f14:	10800a04 	addi	r2,r2,40
   23f18:	e1bfff17 	ldw	r6,-4(fp)
   23f1c:	e17ffe17 	ldw	r5,-8(fp)
   23f20:	1009883a 	mov	r4,r2
   23f24:	00243100 	call	24310 <altera_avalon_jtag_uart_ioctl>
}
   23f28:	e037883a 	mov	sp,fp
   23f2c:	dfc00117 	ldw	ra,4(sp)
   23f30:	df000017 	ldw	fp,0(sp)
   23f34:	dec00204 	addi	sp,sp,8
   23f38:	f800283a 	ret

00023f3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23f3c:	defffa04 	addi	sp,sp,-24
   23f40:	dfc00515 	stw	ra,20(sp)
   23f44:	df000415 	stw	fp,16(sp)
   23f48:	df000404 	addi	fp,sp,16
   23f4c:	e13ffd15 	stw	r4,-12(fp)
   23f50:	e17ffe15 	stw	r5,-8(fp)
   23f54:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23f58:	e0bffd17 	ldw	r2,-12(fp)
   23f5c:	00c00044 	movi	r3,1
   23f60:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23f64:	e0bffd17 	ldw	r2,-12(fp)
   23f68:	10800017 	ldw	r2,0(r2)
   23f6c:	10800104 	addi	r2,r2,4
   23f70:	1007883a 	mov	r3,r2
   23f74:	e0bffd17 	ldw	r2,-12(fp)
   23f78:	10800817 	ldw	r2,32(r2)
   23f7c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23f80:	e0bffe17 	ldw	r2,-8(fp)
   23f84:	e0ffff17 	ldw	r3,-4(fp)
   23f88:	d8000015 	stw	zero,0(sp)
   23f8c:	e1fffd17 	ldw	r7,-12(fp)
   23f90:	018000b4 	movhi	r6,2
   23f94:	318fff04 	addi	r6,r6,16380
   23f98:	180b883a 	mov	r5,r3
   23f9c:	1009883a 	mov	r4,r2
   23fa0:	0024ca40 	call	24ca4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23fa4:	e0bffd17 	ldw	r2,-12(fp)
   23fa8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23fac:	e0bffd17 	ldw	r2,-12(fp)
   23fb0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23fb4:	d0e01817 	ldw	r3,-32672(gp)
   23fb8:	e1fffd17 	ldw	r7,-12(fp)
   23fbc:	018000b4 	movhi	r6,2
   23fc0:	31908204 	addi	r6,r6,16904
   23fc4:	180b883a 	mov	r5,r3
   23fc8:	1009883a 	mov	r4,r2
   23fcc:	00248400 	call	24840 <alt_alarm_start>
   23fd0:	1000040e 	bge	r2,zero,23fe4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23fd4:	e0fffd17 	ldw	r3,-12(fp)
   23fd8:	00a00034 	movhi	r2,32768
   23fdc:	10bfffc4 	addi	r2,r2,-1
   23fe0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23fe4:	0001883a 	nop
   23fe8:	e037883a 	mov	sp,fp
   23fec:	dfc00117 	ldw	ra,4(sp)
   23ff0:	df000017 	ldw	fp,0(sp)
   23ff4:	dec00204 	addi	sp,sp,8
   23ff8:	f800283a 	ret

00023ffc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23ffc:	defff804 	addi	sp,sp,-32
   24000:	df000715 	stw	fp,28(sp)
   24004:	df000704 	addi	fp,sp,28
   24008:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2400c:	e0bfff17 	ldw	r2,-4(fp)
   24010:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   24014:	e0bffb17 	ldw	r2,-20(fp)
   24018:	10800017 	ldw	r2,0(r2)
   2401c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24020:	e0bffc17 	ldw	r2,-16(fp)
   24024:	10800104 	addi	r2,r2,4
   24028:	10800037 	ldwio	r2,0(r2)
   2402c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   24030:	e0bffd17 	ldw	r2,-12(fp)
   24034:	1080c00c 	andi	r2,r2,768
   24038:	10006d26 	beq	r2,zero,241f0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2403c:	e0bffd17 	ldw	r2,-12(fp)
   24040:	1080400c 	andi	r2,r2,256
   24044:	10003526 	beq	r2,zero,2411c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24048:	00800074 	movhi	r2,1
   2404c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24050:	e0bffb17 	ldw	r2,-20(fp)
   24054:	10800a17 	ldw	r2,40(r2)
   24058:	10800044 	addi	r2,r2,1
   2405c:	1081ffcc 	andi	r2,r2,2047
   24060:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   24064:	e0bffb17 	ldw	r2,-20(fp)
   24068:	10c00b17 	ldw	r3,44(r2)
   2406c:	e0bffe17 	ldw	r2,-8(fp)
   24070:	18801526 	beq	r3,r2,240c8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24074:	e0bffc17 	ldw	r2,-16(fp)
   24078:	10800037 	ldwio	r2,0(r2)
   2407c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24080:	e0bff917 	ldw	r2,-28(fp)
   24084:	10a0000c 	andi	r2,r2,32768
   24088:	10001126 	beq	r2,zero,240d0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2408c:	e0bffb17 	ldw	r2,-20(fp)
   24090:	10800a17 	ldw	r2,40(r2)
   24094:	e0fff917 	ldw	r3,-28(fp)
   24098:	1809883a 	mov	r4,r3
   2409c:	e0fffb17 	ldw	r3,-20(fp)
   240a0:	1885883a 	add	r2,r3,r2
   240a4:	10800e04 	addi	r2,r2,56
   240a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240ac:	e0bffb17 	ldw	r2,-20(fp)
   240b0:	10800a17 	ldw	r2,40(r2)
   240b4:	10800044 	addi	r2,r2,1
   240b8:	10c1ffcc 	andi	r3,r2,2047
   240bc:	e0bffb17 	ldw	r2,-20(fp)
   240c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   240c4:	003fe206 	br	24050 <_gp+0xfffda5d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   240c8:	0001883a 	nop
   240cc:	00000106 	br	240d4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   240d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   240d4:	e0bff917 	ldw	r2,-28(fp)
   240d8:	10bfffec 	andhi	r2,r2,65535
   240dc:	10000f26 	beq	r2,zero,2411c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   240e0:	e0bffb17 	ldw	r2,-20(fp)
   240e4:	10c00817 	ldw	r3,32(r2)
   240e8:	00bfff84 	movi	r2,-2
   240ec:	1886703a 	and	r3,r3,r2
   240f0:	e0bffb17 	ldw	r2,-20(fp)
   240f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10800104 	addi	r2,r2,4
   24100:	1007883a 	mov	r3,r2
   24104:	e0bffb17 	ldw	r2,-20(fp)
   24108:	10800817 	ldw	r2,32(r2)
   2410c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24110:	e0bffc17 	ldw	r2,-16(fp)
   24114:	10800104 	addi	r2,r2,4
   24118:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2411c:	e0bffd17 	ldw	r2,-12(fp)
   24120:	1080800c 	andi	r2,r2,512
   24124:	103fbe26 	beq	r2,zero,24020 <_gp+0xfffda5a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24128:	e0bffd17 	ldw	r2,-12(fp)
   2412c:	1004d43a 	srli	r2,r2,16
   24130:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24134:	00001406 	br	24188 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24138:	e0bffc17 	ldw	r2,-16(fp)
   2413c:	e0fffb17 	ldw	r3,-20(fp)
   24140:	18c00d17 	ldw	r3,52(r3)
   24144:	e13ffb17 	ldw	r4,-20(fp)
   24148:	20c7883a 	add	r3,r4,r3
   2414c:	18c20e04 	addi	r3,r3,2104
   24150:	18c00003 	ldbu	r3,0(r3)
   24154:	18c03fcc 	andi	r3,r3,255
   24158:	18c0201c 	xori	r3,r3,128
   2415c:	18ffe004 	addi	r3,r3,-128
   24160:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24164:	e0bffb17 	ldw	r2,-20(fp)
   24168:	10800d17 	ldw	r2,52(r2)
   2416c:	10800044 	addi	r2,r2,1
   24170:	10c1ffcc 	andi	r3,r2,2047
   24174:	e0bffb17 	ldw	r2,-20(fp)
   24178:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2417c:	e0bffa17 	ldw	r2,-24(fp)
   24180:	10bfffc4 	addi	r2,r2,-1
   24184:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   24188:	e0bffa17 	ldw	r2,-24(fp)
   2418c:	10000526 	beq	r2,zero,241a4 <altera_avalon_jtag_uart_irq+0x1a8>
   24190:	e0bffb17 	ldw	r2,-20(fp)
   24194:	10c00d17 	ldw	r3,52(r2)
   24198:	e0bffb17 	ldw	r2,-20(fp)
   2419c:	10800c17 	ldw	r2,48(r2)
   241a0:	18bfe51e 	bne	r3,r2,24138 <_gp+0xfffda6b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   241a4:	e0bffa17 	ldw	r2,-24(fp)
   241a8:	103f9d26 	beq	r2,zero,24020 <_gp+0xfffda5a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   241ac:	e0bffb17 	ldw	r2,-20(fp)
   241b0:	10c00817 	ldw	r3,32(r2)
   241b4:	00bfff44 	movi	r2,-3
   241b8:	1886703a 	and	r3,r3,r2
   241bc:	e0bffb17 	ldw	r2,-20(fp)
   241c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   241c4:	e0bffb17 	ldw	r2,-20(fp)
   241c8:	10800017 	ldw	r2,0(r2)
   241cc:	10800104 	addi	r2,r2,4
   241d0:	1007883a 	mov	r3,r2
   241d4:	e0bffb17 	ldw	r2,-20(fp)
   241d8:	10800817 	ldw	r2,32(r2)
   241dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   241e0:	e0bffc17 	ldw	r2,-16(fp)
   241e4:	10800104 	addi	r2,r2,4
   241e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   241ec:	003f8c06 	br	24020 <_gp+0xfffda5a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   241f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   241f4:	0001883a 	nop
   241f8:	e037883a 	mov	sp,fp
   241fc:	df000017 	ldw	fp,0(sp)
   24200:	dec00104 	addi	sp,sp,4
   24204:	f800283a 	ret

00024208 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   24208:	defff804 	addi	sp,sp,-32
   2420c:	df000715 	stw	fp,28(sp)
   24210:	df000704 	addi	fp,sp,28
   24214:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   24218:	e0bffb17 	ldw	r2,-20(fp)
   2421c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24220:	e0bff917 	ldw	r2,-28(fp)
   24224:	10800017 	ldw	r2,0(r2)
   24228:	10800104 	addi	r2,r2,4
   2422c:	10800037 	ldwio	r2,0(r2)
   24230:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24234:	e0bffa17 	ldw	r2,-24(fp)
   24238:	1081000c 	andi	r2,r2,1024
   2423c:	10000b26 	beq	r2,zero,2426c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24240:	e0bff917 	ldw	r2,-28(fp)
   24244:	10800017 	ldw	r2,0(r2)
   24248:	10800104 	addi	r2,r2,4
   2424c:	1007883a 	mov	r3,r2
   24250:	e0bff917 	ldw	r2,-28(fp)
   24254:	10800817 	ldw	r2,32(r2)
   24258:	10810014 	ori	r2,r2,1024
   2425c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24260:	e0bff917 	ldw	r2,-28(fp)
   24264:	10000915 	stw	zero,36(r2)
   24268:	00000a06 	br	24294 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2426c:	e0bff917 	ldw	r2,-28(fp)
   24270:	10c00917 	ldw	r3,36(r2)
   24274:	00a00034 	movhi	r2,32768
   24278:	10bfff04 	addi	r2,r2,-4
   2427c:	10c00536 	bltu	r2,r3,24294 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24280:	e0bff917 	ldw	r2,-28(fp)
   24284:	10800917 	ldw	r2,36(r2)
   24288:	10c00044 	addi	r3,r2,1
   2428c:	e0bff917 	ldw	r2,-28(fp)
   24290:	10c00915 	stw	r3,36(r2)
   24294:	d0a01817 	ldw	r2,-32672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   24298:	e037883a 	mov	sp,fp
   2429c:	df000017 	ldw	fp,0(sp)
   242a0:	dec00104 	addi	sp,sp,4
   242a4:	f800283a 	ret

000242a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   242a8:	defffd04 	addi	sp,sp,-12
   242ac:	df000215 	stw	fp,8(sp)
   242b0:	df000204 	addi	fp,sp,8
   242b4:	e13ffe15 	stw	r4,-8(fp)
   242b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   242bc:	00000506 	br	242d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   242c0:	e0bfff17 	ldw	r2,-4(fp)
   242c4:	1090000c 	andi	r2,r2,16384
   242c8:	10000226 	beq	r2,zero,242d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   242cc:	00bffd44 	movi	r2,-11
   242d0:	00000b06 	br	24300 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   242d4:	e0bffe17 	ldw	r2,-8(fp)
   242d8:	10c00d17 	ldw	r3,52(r2)
   242dc:	e0bffe17 	ldw	r2,-8(fp)
   242e0:	10800c17 	ldw	r2,48(r2)
   242e4:	18800526 	beq	r3,r2,242fc <altera_avalon_jtag_uart_close+0x54>
   242e8:	e0bffe17 	ldw	r2,-8(fp)
   242ec:	10c00917 	ldw	r3,36(r2)
   242f0:	e0bffe17 	ldw	r2,-8(fp)
   242f4:	10800117 	ldw	r2,4(r2)
   242f8:	18bff136 	bltu	r3,r2,242c0 <_gp+0xfffda840>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   242fc:	0005883a 	mov	r2,zero
}
   24300:	e037883a 	mov	sp,fp
   24304:	df000017 	ldw	fp,0(sp)
   24308:	dec00104 	addi	sp,sp,4
   2430c:	f800283a 	ret

00024310 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24310:	defffa04 	addi	sp,sp,-24
   24314:	df000515 	stw	fp,20(sp)
   24318:	df000504 	addi	fp,sp,20
   2431c:	e13ffd15 	stw	r4,-12(fp)
   24320:	e17ffe15 	stw	r5,-8(fp)
   24324:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   24328:	00bff9c4 	movi	r2,-25
   2432c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24330:	e0bffe17 	ldw	r2,-8(fp)
   24334:	10da8060 	cmpeqi	r3,r2,27137
   24338:	1800031e 	bne	r3,zero,24348 <altera_avalon_jtag_uart_ioctl+0x38>
   2433c:	109a80a0 	cmpeqi	r2,r2,27138
   24340:	1000181e 	bne	r2,zero,243a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   24344:	00002906 	br	243ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   24348:	e0bffd17 	ldw	r2,-12(fp)
   2434c:	10c00117 	ldw	r3,4(r2)
   24350:	00a00034 	movhi	r2,32768
   24354:	10bfffc4 	addi	r2,r2,-1
   24358:	18802126 	beq	r3,r2,243e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2435c:	e0bfff17 	ldw	r2,-4(fp)
   24360:	10800017 	ldw	r2,0(r2)
   24364:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24368:	e0bffc17 	ldw	r2,-16(fp)
   2436c:	10800090 	cmplti	r2,r2,2
   24370:	1000061e 	bne	r2,zero,2438c <altera_avalon_jtag_uart_ioctl+0x7c>
   24374:	e0fffc17 	ldw	r3,-16(fp)
   24378:	00a00034 	movhi	r2,32768
   2437c:	10bfffc4 	addi	r2,r2,-1
   24380:	18800226 	beq	r3,r2,2438c <altera_avalon_jtag_uart_ioctl+0x7c>
   24384:	e0bffc17 	ldw	r2,-16(fp)
   24388:	00000206 	br	24394 <altera_avalon_jtag_uart_ioctl+0x84>
   2438c:	00a00034 	movhi	r2,32768
   24390:	10bfff84 	addi	r2,r2,-2
   24394:	e0fffd17 	ldw	r3,-12(fp)
   24398:	18800115 	stw	r2,4(r3)
      rc = 0;
   2439c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   243a0:	00000f06 	br	243e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   243a4:	e0bffd17 	ldw	r2,-12(fp)
   243a8:	10c00117 	ldw	r3,4(r2)
   243ac:	00a00034 	movhi	r2,32768
   243b0:	10bfffc4 	addi	r2,r2,-1
   243b4:	18800c26 	beq	r3,r2,243e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   243b8:	e0bffd17 	ldw	r2,-12(fp)
   243bc:	10c00917 	ldw	r3,36(r2)
   243c0:	e0bffd17 	ldw	r2,-12(fp)
   243c4:	10800117 	ldw	r2,4(r2)
   243c8:	1885803a 	cmpltu	r2,r3,r2
   243cc:	10c03fcc 	andi	r3,r2,255
   243d0:	e0bfff17 	ldw	r2,-4(fp)
   243d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   243d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   243dc:	00000206 	br	243e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   243e0:	0001883a 	nop
   243e4:	00000106 	br	243ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   243e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   243ec:	e0bffb17 	ldw	r2,-20(fp)
}
   243f0:	e037883a 	mov	sp,fp
   243f4:	df000017 	ldw	fp,0(sp)
   243f8:	dec00104 	addi	sp,sp,4
   243fc:	f800283a 	ret

00024400 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24400:	defff304 	addi	sp,sp,-52
   24404:	dfc00c15 	stw	ra,48(sp)
   24408:	df000b15 	stw	fp,44(sp)
   2440c:	df000b04 	addi	fp,sp,44
   24410:	e13ffc15 	stw	r4,-16(fp)
   24414:	e17ffd15 	stw	r5,-12(fp)
   24418:	e1bffe15 	stw	r6,-8(fp)
   2441c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24420:	e0bffd17 	ldw	r2,-12(fp)
   24424:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24428:	00004706 	br	24548 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2442c:	e0bffc17 	ldw	r2,-16(fp)
   24430:	10800a17 	ldw	r2,40(r2)
   24434:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24438:	e0bffc17 	ldw	r2,-16(fp)
   2443c:	10800b17 	ldw	r2,44(r2)
   24440:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   24444:	e0fff717 	ldw	r3,-36(fp)
   24448:	e0bff817 	ldw	r2,-32(fp)
   2444c:	18800536 	bltu	r3,r2,24464 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24450:	e0fff717 	ldw	r3,-36(fp)
   24454:	e0bff817 	ldw	r2,-32(fp)
   24458:	1885c83a 	sub	r2,r3,r2
   2445c:	e0bff615 	stw	r2,-40(fp)
   24460:	00000406 	br	24474 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24464:	00c20004 	movi	r3,2048
   24468:	e0bff817 	ldw	r2,-32(fp)
   2446c:	1885c83a 	sub	r2,r3,r2
   24470:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24474:	e0bff617 	ldw	r2,-40(fp)
   24478:	10001e26 	beq	r2,zero,244f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2447c:	e0fffe17 	ldw	r3,-8(fp)
   24480:	e0bff617 	ldw	r2,-40(fp)
   24484:	1880022e 	bgeu	r3,r2,24490 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24488:	e0bffe17 	ldw	r2,-8(fp)
   2448c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24490:	e0bffc17 	ldw	r2,-16(fp)
   24494:	10c00e04 	addi	r3,r2,56
   24498:	e0bff817 	ldw	r2,-32(fp)
   2449c:	1885883a 	add	r2,r3,r2
   244a0:	e1bff617 	ldw	r6,-40(fp)
   244a4:	100b883a 	mov	r5,r2
   244a8:	e13ff517 	ldw	r4,-44(fp)
   244ac:	00218580 	call	21858 <memcpy>
      ptr   += n;
   244b0:	e0fff517 	ldw	r3,-44(fp)
   244b4:	e0bff617 	ldw	r2,-40(fp)
   244b8:	1885883a 	add	r2,r3,r2
   244bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   244c0:	e0fffe17 	ldw	r3,-8(fp)
   244c4:	e0bff617 	ldw	r2,-40(fp)
   244c8:	1885c83a 	sub	r2,r3,r2
   244cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   244d0:	e0fff817 	ldw	r3,-32(fp)
   244d4:	e0bff617 	ldw	r2,-40(fp)
   244d8:	1885883a 	add	r2,r3,r2
   244dc:	10c1ffcc 	andi	r3,r2,2047
   244e0:	e0bffc17 	ldw	r2,-16(fp)
   244e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   244e8:	e0bffe17 	ldw	r2,-8(fp)
   244ec:	00bfcf16 	blt	zero,r2,2442c <_gp+0xfffda9ac>
   244f0:	00000106 	br	244f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   244f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   244f8:	e0fff517 	ldw	r3,-44(fp)
   244fc:	e0bffd17 	ldw	r2,-12(fp)
   24500:	1880141e 	bne	r3,r2,24554 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24504:	e0bfff17 	ldw	r2,-4(fp)
   24508:	1090000c 	andi	r2,r2,16384
   2450c:	1000131e 	bne	r2,zero,2455c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24510:	0001883a 	nop
   24514:	e0bffc17 	ldw	r2,-16(fp)
   24518:	10c00a17 	ldw	r3,40(r2)
   2451c:	e0bff717 	ldw	r2,-36(fp)
   24520:	1880051e 	bne	r3,r2,24538 <altera_avalon_jtag_uart_read+0x138>
   24524:	e0bffc17 	ldw	r2,-16(fp)
   24528:	10c00917 	ldw	r3,36(r2)
   2452c:	e0bffc17 	ldw	r2,-16(fp)
   24530:	10800117 	ldw	r2,4(r2)
   24534:	18bff736 	bltu	r3,r2,24514 <_gp+0xfffdaa94>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24538:	e0bffc17 	ldw	r2,-16(fp)
   2453c:	10c00a17 	ldw	r3,40(r2)
   24540:	e0bff717 	ldw	r2,-36(fp)
   24544:	18800726 	beq	r3,r2,24564 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24548:	e0bffe17 	ldw	r2,-8(fp)
   2454c:	00bfb716 	blt	zero,r2,2442c <_gp+0xfffda9ac>
   24550:	00000506 	br	24568 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   24554:	0001883a 	nop
   24558:	00000306 	br	24568 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2455c:	0001883a 	nop
   24560:	00000106 	br	24568 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   24564:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24568:	e0fff517 	ldw	r3,-44(fp)
   2456c:	e0bffd17 	ldw	r2,-12(fp)
   24570:	18801826 	beq	r3,r2,245d4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24574:	0005303a 	rdctl	r2,status
   24578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2457c:	e0fffb17 	ldw	r3,-20(fp)
   24580:	00bfff84 	movi	r2,-2
   24584:	1884703a 	and	r2,r3,r2
   24588:	1001703a 	wrctl	status,r2
  
  return context;
   2458c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24590:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24594:	e0bffc17 	ldw	r2,-16(fp)
   24598:	10800817 	ldw	r2,32(r2)
   2459c:	10c00054 	ori	r3,r2,1
   245a0:	e0bffc17 	ldw	r2,-16(fp)
   245a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   245a8:	e0bffc17 	ldw	r2,-16(fp)
   245ac:	10800017 	ldw	r2,0(r2)
   245b0:	10800104 	addi	r2,r2,4
   245b4:	1007883a 	mov	r3,r2
   245b8:	e0bffc17 	ldw	r2,-16(fp)
   245bc:	10800817 	ldw	r2,32(r2)
   245c0:	18800035 	stwio	r2,0(r3)
   245c4:	e0bffa17 	ldw	r2,-24(fp)
   245c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   245cc:	e0bff917 	ldw	r2,-28(fp)
   245d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   245d4:	e0fff517 	ldw	r3,-44(fp)
   245d8:	e0bffd17 	ldw	r2,-12(fp)
   245dc:	18800426 	beq	r3,r2,245f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   245e0:	e0fff517 	ldw	r3,-44(fp)
   245e4:	e0bffd17 	ldw	r2,-12(fp)
   245e8:	1885c83a 	sub	r2,r3,r2
   245ec:	00000606 	br	24608 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   245f0:	e0bfff17 	ldw	r2,-4(fp)
   245f4:	1090000c 	andi	r2,r2,16384
   245f8:	10000226 	beq	r2,zero,24604 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   245fc:	00bffd44 	movi	r2,-11
   24600:	00000106 	br	24608 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   24604:	00bffec4 	movi	r2,-5
}
   24608:	e037883a 	mov	sp,fp
   2460c:	dfc00117 	ldw	ra,4(sp)
   24610:	df000017 	ldw	fp,0(sp)
   24614:	dec00204 	addi	sp,sp,8
   24618:	f800283a 	ret

0002461c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2461c:	defff304 	addi	sp,sp,-52
   24620:	dfc00c15 	stw	ra,48(sp)
   24624:	df000b15 	stw	fp,44(sp)
   24628:	df000b04 	addi	fp,sp,44
   2462c:	e13ffc15 	stw	r4,-16(fp)
   24630:	e17ffd15 	stw	r5,-12(fp)
   24634:	e1bffe15 	stw	r6,-8(fp)
   24638:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2463c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24640:	e0bffd17 	ldw	r2,-12(fp)
   24644:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24648:	00003706 	br	24728 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2464c:	e0bffc17 	ldw	r2,-16(fp)
   24650:	10800c17 	ldw	r2,48(r2)
   24654:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   24658:	e0bffc17 	ldw	r2,-16(fp)
   2465c:	10800d17 	ldw	r2,52(r2)
   24660:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24664:	e0fff917 	ldw	r3,-28(fp)
   24668:	e0bff517 	ldw	r2,-44(fp)
   2466c:	1880062e 	bgeu	r3,r2,24688 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24670:	e0fff517 	ldw	r3,-44(fp)
   24674:	e0bff917 	ldw	r2,-28(fp)
   24678:	1885c83a 	sub	r2,r3,r2
   2467c:	10bfffc4 	addi	r2,r2,-1
   24680:	e0bff615 	stw	r2,-40(fp)
   24684:	00000b06 	br	246b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24688:	e0bff517 	ldw	r2,-44(fp)
   2468c:	10000526 	beq	r2,zero,246a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24690:	00c20004 	movi	r3,2048
   24694:	e0bff917 	ldw	r2,-28(fp)
   24698:	1885c83a 	sub	r2,r3,r2
   2469c:	e0bff615 	stw	r2,-40(fp)
   246a0:	00000406 	br	246b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   246a4:	00c1ffc4 	movi	r3,2047
   246a8:	e0bff917 	ldw	r2,-28(fp)
   246ac:	1885c83a 	sub	r2,r3,r2
   246b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   246b4:	e0bff617 	ldw	r2,-40(fp)
   246b8:	10001e26 	beq	r2,zero,24734 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   246bc:	e0fffe17 	ldw	r3,-8(fp)
   246c0:	e0bff617 	ldw	r2,-40(fp)
   246c4:	1880022e 	bgeu	r3,r2,246d0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   246c8:	e0bffe17 	ldw	r2,-8(fp)
   246cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   246d0:	e0bffc17 	ldw	r2,-16(fp)
   246d4:	10c20e04 	addi	r3,r2,2104
   246d8:	e0bff917 	ldw	r2,-28(fp)
   246dc:	1885883a 	add	r2,r3,r2
   246e0:	e1bff617 	ldw	r6,-40(fp)
   246e4:	e17ffd17 	ldw	r5,-12(fp)
   246e8:	1009883a 	mov	r4,r2
   246ec:	00218580 	call	21858 <memcpy>
      ptr   += n;
   246f0:	e0fffd17 	ldw	r3,-12(fp)
   246f4:	e0bff617 	ldw	r2,-40(fp)
   246f8:	1885883a 	add	r2,r3,r2
   246fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24700:	e0fffe17 	ldw	r3,-8(fp)
   24704:	e0bff617 	ldw	r2,-40(fp)
   24708:	1885c83a 	sub	r2,r3,r2
   2470c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24710:	e0fff917 	ldw	r3,-28(fp)
   24714:	e0bff617 	ldw	r2,-40(fp)
   24718:	1885883a 	add	r2,r3,r2
   2471c:	10c1ffcc 	andi	r3,r2,2047
   24720:	e0bffc17 	ldw	r2,-16(fp)
   24724:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24728:	e0bffe17 	ldw	r2,-8(fp)
   2472c:	00bfc716 	blt	zero,r2,2464c <_gp+0xfffdabcc>
   24730:	00000106 	br	24738 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24734:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24738:	0005303a 	rdctl	r2,status
   2473c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24740:	e0fffb17 	ldw	r3,-20(fp)
   24744:	00bfff84 	movi	r2,-2
   24748:	1884703a 	and	r2,r3,r2
   2474c:	1001703a 	wrctl	status,r2
  
  return context;
   24750:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24754:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24758:	e0bffc17 	ldw	r2,-16(fp)
   2475c:	10800817 	ldw	r2,32(r2)
   24760:	10c00094 	ori	r3,r2,2
   24764:	e0bffc17 	ldw	r2,-16(fp)
   24768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2476c:	e0bffc17 	ldw	r2,-16(fp)
   24770:	10800017 	ldw	r2,0(r2)
   24774:	10800104 	addi	r2,r2,4
   24778:	1007883a 	mov	r3,r2
   2477c:	e0bffc17 	ldw	r2,-16(fp)
   24780:	10800817 	ldw	r2,32(r2)
   24784:	18800035 	stwio	r2,0(r3)
   24788:	e0bffa17 	ldw	r2,-24(fp)
   2478c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24790:	e0bff817 	ldw	r2,-32(fp)
   24794:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24798:	e0bffe17 	ldw	r2,-8(fp)
   2479c:	0080100e 	bge	zero,r2,247e0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   247a0:	e0bfff17 	ldw	r2,-4(fp)
   247a4:	1090000c 	andi	r2,r2,16384
   247a8:	1000101e 	bne	r2,zero,247ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   247ac:	0001883a 	nop
   247b0:	e0bffc17 	ldw	r2,-16(fp)
   247b4:	10c00d17 	ldw	r3,52(r2)
   247b8:	e0bff517 	ldw	r2,-44(fp)
   247bc:	1880051e 	bne	r3,r2,247d4 <altera_avalon_jtag_uart_write+0x1b8>
   247c0:	e0bffc17 	ldw	r2,-16(fp)
   247c4:	10c00917 	ldw	r3,36(r2)
   247c8:	e0bffc17 	ldw	r2,-16(fp)
   247cc:	10800117 	ldw	r2,4(r2)
   247d0:	18bff736 	bltu	r3,r2,247b0 <_gp+0xfffdad30>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   247d4:	e0bffc17 	ldw	r2,-16(fp)
   247d8:	10800917 	ldw	r2,36(r2)
   247dc:	1000051e 	bne	r2,zero,247f4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   247e0:	e0bffe17 	ldw	r2,-8(fp)
   247e4:	00bfd016 	blt	zero,r2,24728 <_gp+0xfffdaca8>
   247e8:	00000306 	br	247f8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   247ec:	0001883a 	nop
   247f0:	00000106 	br	247f8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   247f4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   247f8:	e0fffd17 	ldw	r3,-12(fp)
   247fc:	e0bff717 	ldw	r2,-36(fp)
   24800:	18800426 	beq	r3,r2,24814 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24804:	e0fffd17 	ldw	r3,-12(fp)
   24808:	e0bff717 	ldw	r2,-36(fp)
   2480c:	1885c83a 	sub	r2,r3,r2
   24810:	00000606 	br	2482c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24814:	e0bfff17 	ldw	r2,-4(fp)
   24818:	1090000c 	andi	r2,r2,16384
   2481c:	10000226 	beq	r2,zero,24828 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24820:	00bffd44 	movi	r2,-11
   24824:	00000106 	br	2482c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24828:	00bffec4 	movi	r2,-5
}
   2482c:	e037883a 	mov	sp,fp
   24830:	dfc00117 	ldw	ra,4(sp)
   24834:	df000017 	ldw	fp,0(sp)
   24838:	dec00204 	addi	sp,sp,8
   2483c:	f800283a 	ret

00024840 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24840:	defff504 	addi	sp,sp,-44
   24844:	df000a15 	stw	fp,40(sp)
   24848:	df000a04 	addi	fp,sp,40
   2484c:	e13ffc15 	stw	r4,-16(fp)
   24850:	e17ffd15 	stw	r5,-12(fp)
   24854:	e1bffe15 	stw	r6,-8(fp)
   24858:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2485c:	e03ff615 	stw	zero,-40(fp)
   24860:	d0a01817 	ldw	r2,-32672(gp)
  
  if (alt_ticks_per_second ())
   24864:	10003c26 	beq	r2,zero,24958 <alt_alarm_start+0x118>
  {
    if (alarm)
   24868:	e0bffc17 	ldw	r2,-16(fp)
   2486c:	10003826 	beq	r2,zero,24950 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   24870:	e0bffc17 	ldw	r2,-16(fp)
   24874:	e0fffe17 	ldw	r3,-8(fp)
   24878:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2487c:	e0bffc17 	ldw	r2,-16(fp)
   24880:	e0ffff17 	ldw	r3,-4(fp)
   24884:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24888:	0005303a 	rdctl	r2,status
   2488c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24890:	e0fff917 	ldw	r3,-28(fp)
   24894:	00bfff84 	movi	r2,-2
   24898:	1884703a 	and	r2,r3,r2
   2489c:	1001703a 	wrctl	status,r2
  
  return context;
   248a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   248a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   248a8:	d0a01917 	ldw	r2,-32668(gp)
      
      current_nticks = alt_nticks();
   248ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   248b0:	e0fffd17 	ldw	r3,-12(fp)
   248b4:	e0bff617 	ldw	r2,-40(fp)
   248b8:	1885883a 	add	r2,r3,r2
   248bc:	10c00044 	addi	r3,r2,1
   248c0:	e0bffc17 	ldw	r2,-16(fp)
   248c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   248c8:	e0bffc17 	ldw	r2,-16(fp)
   248cc:	10c00217 	ldw	r3,8(r2)
   248d0:	e0bff617 	ldw	r2,-40(fp)
   248d4:	1880042e 	bgeu	r3,r2,248e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   248d8:	e0bffc17 	ldw	r2,-16(fp)
   248dc:	00c00044 	movi	r3,1
   248e0:	10c00405 	stb	r3,16(r2)
   248e4:	00000206 	br	248f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   248e8:	e0bffc17 	ldw	r2,-16(fp)
   248ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   248f0:	e0bffc17 	ldw	r2,-16(fp)
   248f4:	d0e00c04 	addi	r3,gp,-32720
   248f8:	e0fffa15 	stw	r3,-24(fp)
   248fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24900:	e0bffb17 	ldw	r2,-20(fp)
   24904:	e0fffa17 	ldw	r3,-24(fp)
   24908:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2490c:	e0bffa17 	ldw	r2,-24(fp)
   24910:	10c00017 	ldw	r3,0(r2)
   24914:	e0bffb17 	ldw	r2,-20(fp)
   24918:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2491c:	e0bffa17 	ldw	r2,-24(fp)
   24920:	10800017 	ldw	r2,0(r2)
   24924:	e0fffb17 	ldw	r3,-20(fp)
   24928:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2492c:	e0bffa17 	ldw	r2,-24(fp)
   24930:	e0fffb17 	ldw	r3,-20(fp)
   24934:	10c00015 	stw	r3,0(r2)
   24938:	e0bff817 	ldw	r2,-32(fp)
   2493c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24940:	e0bff717 	ldw	r2,-36(fp)
   24944:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24948:	0005883a 	mov	r2,zero
   2494c:	00000306 	br	2495c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   24950:	00bffa84 	movi	r2,-22
   24954:	00000106 	br	2495c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   24958:	00bfde84 	movi	r2,-134
  }
}
   2495c:	e037883a 	mov	sp,fp
   24960:	df000017 	ldw	fp,0(sp)
   24964:	dec00104 	addi	sp,sp,4
   24968:	f800283a 	ret

0002496c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2496c:	defffa04 	addi	sp,sp,-24
   24970:	dfc00515 	stw	ra,20(sp)
   24974:	df000415 	stw	fp,16(sp)
   24978:	df000404 	addi	fp,sp,16
   2497c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   24980:	00800244 	movi	r2,9
   24984:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   24988:	014003f4 	movhi	r5,15
   2498c:	29509004 	addi	r5,r5,16960
   24990:	e13ffd17 	ldw	r4,-12(fp)
   24994:	00203d40 	call	203d4 <__mulsi3>
   24998:	100b883a 	mov	r5,r2
   2499c:	0100bef4 	movhi	r4,763
   249a0:	213c2004 	addi	r4,r4,-3968
   249a4:	00231240 	call	23124 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   249a8:	100b883a 	mov	r5,r2
   249ac:	01200034 	movhi	r4,32768
   249b0:	213fffc4 	addi	r4,r4,-1
   249b4:	00231240 	call	23124 <__udivsi3>
   249b8:	100b883a 	mov	r5,r2
   249bc:	e13fff17 	ldw	r4,-4(fp)
   249c0:	00231240 	call	23124 <__udivsi3>
   249c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   249c8:	e0bffe17 	ldw	r2,-8(fp)
   249cc:	10002a26 	beq	r2,zero,24a78 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   249d0:	e03ffc15 	stw	zero,-16(fp)
   249d4:	00001706 	br	24a34 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   249d8:	00a00034 	movhi	r2,32768
   249dc:	10bfffc4 	addi	r2,r2,-1
   249e0:	10bfffc4 	addi	r2,r2,-1
   249e4:	103ffe1e 	bne	r2,zero,249e0 <_gp+0xfffdaf60>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   249e8:	014003f4 	movhi	r5,15
   249ec:	29509004 	addi	r5,r5,16960
   249f0:	e13ffd17 	ldw	r4,-12(fp)
   249f4:	00203d40 	call	203d4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   249f8:	100b883a 	mov	r5,r2
   249fc:	0100bef4 	movhi	r4,763
   24a00:	213c2004 	addi	r4,r4,-3968
   24a04:	00231240 	call	23124 <__udivsi3>
   24a08:	100b883a 	mov	r5,r2
   24a0c:	01200034 	movhi	r4,32768
   24a10:	213fffc4 	addi	r4,r4,-1
   24a14:	00231240 	call	23124 <__udivsi3>
   24a18:	1007883a 	mov	r3,r2
   24a1c:	e0bfff17 	ldw	r2,-4(fp)
   24a20:	10c5c83a 	sub	r2,r2,r3
   24a24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   24a28:	e0bffc17 	ldw	r2,-16(fp)
   24a2c:	10800044 	addi	r2,r2,1
   24a30:	e0bffc15 	stw	r2,-16(fp)
   24a34:	e0fffc17 	ldw	r3,-16(fp)
   24a38:	e0bffe17 	ldw	r2,-8(fp)
   24a3c:	18bfe616 	blt	r3,r2,249d8 <_gp+0xfffdaf58>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   24a40:	014003f4 	movhi	r5,15
   24a44:	29509004 	addi	r5,r5,16960
   24a48:	e13ffd17 	ldw	r4,-12(fp)
   24a4c:	00203d40 	call	203d4 <__mulsi3>
   24a50:	100b883a 	mov	r5,r2
   24a54:	0100bef4 	movhi	r4,763
   24a58:	213c2004 	addi	r4,r4,-3968
   24a5c:	00231240 	call	23124 <__udivsi3>
   24a60:	e17fff17 	ldw	r5,-4(fp)
   24a64:	1009883a 	mov	r4,r2
   24a68:	00203d40 	call	203d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24a6c:	10bfffc4 	addi	r2,r2,-1
   24a70:	103ffe1e 	bne	r2,zero,24a6c <_gp+0xfffdafec>
   24a74:	00000d06 	br	24aac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   24a78:	014003f4 	movhi	r5,15
   24a7c:	29509004 	addi	r5,r5,16960
   24a80:	e13ffd17 	ldw	r4,-12(fp)
   24a84:	00203d40 	call	203d4 <__mulsi3>
   24a88:	100b883a 	mov	r5,r2
   24a8c:	0100bef4 	movhi	r4,763
   24a90:	213c2004 	addi	r4,r4,-3968
   24a94:	00231240 	call	23124 <__udivsi3>
   24a98:	e17fff17 	ldw	r5,-4(fp)
   24a9c:	1009883a 	mov	r4,r2
   24aa0:	00203d40 	call	203d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24aa4:	10bfffc4 	addi	r2,r2,-1
   24aa8:	00bffe16 	blt	zero,r2,24aa4 <_gp+0xfffdb024>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   24aac:	0005883a 	mov	r2,zero
}
   24ab0:	e037883a 	mov	sp,fp
   24ab4:	dfc00117 	ldw	ra,4(sp)
   24ab8:	df000017 	ldw	fp,0(sp)
   24abc:	dec00204 	addi	sp,sp,8
   24ac0:	f800283a 	ret

00024ac4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24ac4:	deffff04 	addi	sp,sp,-4
   24ac8:	df000015 	stw	fp,0(sp)
   24acc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24ad0:	0001883a 	nop
   24ad4:	e037883a 	mov	sp,fp
   24ad8:	df000017 	ldw	fp,0(sp)
   24adc:	dec00104 	addi	sp,sp,4
   24ae0:	f800283a 	ret

00024ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24ae4:	defffe04 	addi	sp,sp,-8
   24ae8:	dfc00115 	stw	ra,4(sp)
   24aec:	df000015 	stw	fp,0(sp)
   24af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24af4:	d0a00917 	ldw	r2,-32732(gp)
   24af8:	10000326 	beq	r2,zero,24b08 <alt_get_errno+0x24>
   24afc:	d0a00917 	ldw	r2,-32732(gp)
   24b00:	103ee83a 	callr	r2
   24b04:	00000106 	br	24b0c <alt_get_errno+0x28>
   24b08:	d0a01304 	addi	r2,gp,-32692
}
   24b0c:	e037883a 	mov	sp,fp
   24b10:	dfc00117 	ldw	ra,4(sp)
   24b14:	df000017 	ldw	fp,0(sp)
   24b18:	dec00204 	addi	sp,sp,8
   24b1c:	f800283a 	ret

00024b20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24b20:	defffa04 	addi	sp,sp,-24
   24b24:	dfc00515 	stw	ra,20(sp)
   24b28:	df000415 	stw	fp,16(sp)
   24b2c:	df000404 	addi	fp,sp,16
   24b30:	e13ffe15 	stw	r4,-8(fp)
   24b34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24b38:	e0bffe17 	ldw	r2,-8(fp)
   24b3c:	10000326 	beq	r2,zero,24b4c <alt_dev_llist_insert+0x2c>
   24b40:	e0bffe17 	ldw	r2,-8(fp)
   24b44:	10800217 	ldw	r2,8(r2)
   24b48:	1000061e 	bne	r2,zero,24b64 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24b4c:	0024ae40 	call	24ae4 <alt_get_errno>
   24b50:	1007883a 	mov	r3,r2
   24b54:	00800584 	movi	r2,22
   24b58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24b5c:	00bffa84 	movi	r2,-22
   24b60:	00001306 	br	24bb0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24b64:	e0bffe17 	ldw	r2,-8(fp)
   24b68:	e0ffff17 	ldw	r3,-4(fp)
   24b6c:	e0fffc15 	stw	r3,-16(fp)
   24b70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24b74:	e0bffd17 	ldw	r2,-12(fp)
   24b78:	e0fffc17 	ldw	r3,-16(fp)
   24b7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24b80:	e0bffc17 	ldw	r2,-16(fp)
   24b84:	10c00017 	ldw	r3,0(r2)
   24b88:	e0bffd17 	ldw	r2,-12(fp)
   24b8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24b90:	e0bffc17 	ldw	r2,-16(fp)
   24b94:	10800017 	ldw	r2,0(r2)
   24b98:	e0fffd17 	ldw	r3,-12(fp)
   24b9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24ba0:	e0bffc17 	ldw	r2,-16(fp)
   24ba4:	e0fffd17 	ldw	r3,-12(fp)
   24ba8:	10c00015 	stw	r3,0(r2)

  return 0;  
   24bac:	0005883a 	mov	r2,zero
}
   24bb0:	e037883a 	mov	sp,fp
   24bb4:	dfc00117 	ldw	ra,4(sp)
   24bb8:	df000017 	ldw	fp,0(sp)
   24bbc:	dec00204 	addi	sp,sp,8
   24bc0:	f800283a 	ret

00024bc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24bc4:	defffd04 	addi	sp,sp,-12
   24bc8:	dfc00215 	stw	ra,8(sp)
   24bcc:	df000115 	stw	fp,4(sp)
   24bd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24bd4:	008000b4 	movhi	r2,2
   24bd8:	1096de04 	addi	r2,r2,23416
   24bdc:	e0bfff15 	stw	r2,-4(fp)
   24be0:	00000606 	br	24bfc <_do_ctors+0x38>
        (*ctor) (); 
   24be4:	e0bfff17 	ldw	r2,-4(fp)
   24be8:	10800017 	ldw	r2,0(r2)
   24bec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24bf0:	e0bfff17 	ldw	r2,-4(fp)
   24bf4:	10bfff04 	addi	r2,r2,-4
   24bf8:	e0bfff15 	stw	r2,-4(fp)
   24bfc:	e0ffff17 	ldw	r3,-4(fp)
   24c00:	008000b4 	movhi	r2,2
   24c04:	1096df04 	addi	r2,r2,23420
   24c08:	18bff62e 	bgeu	r3,r2,24be4 <_gp+0xfffdb164>
        (*ctor) (); 
}
   24c0c:	0001883a 	nop
   24c10:	e037883a 	mov	sp,fp
   24c14:	dfc00117 	ldw	ra,4(sp)
   24c18:	df000017 	ldw	fp,0(sp)
   24c1c:	dec00204 	addi	sp,sp,8
   24c20:	f800283a 	ret

00024c24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24c24:	defffd04 	addi	sp,sp,-12
   24c28:	dfc00215 	stw	ra,8(sp)
   24c2c:	df000115 	stw	fp,4(sp)
   24c30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24c34:	008000b4 	movhi	r2,2
   24c38:	1096de04 	addi	r2,r2,23416
   24c3c:	e0bfff15 	stw	r2,-4(fp)
   24c40:	00000606 	br	24c5c <_do_dtors+0x38>
        (*dtor) (); 
   24c44:	e0bfff17 	ldw	r2,-4(fp)
   24c48:	10800017 	ldw	r2,0(r2)
   24c4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24c50:	e0bfff17 	ldw	r2,-4(fp)
   24c54:	10bfff04 	addi	r2,r2,-4
   24c58:	e0bfff15 	stw	r2,-4(fp)
   24c5c:	e0ffff17 	ldw	r3,-4(fp)
   24c60:	008000b4 	movhi	r2,2
   24c64:	1096df04 	addi	r2,r2,23420
   24c68:	18bff62e 	bgeu	r3,r2,24c44 <_gp+0xfffdb1c4>
        (*dtor) (); 
}
   24c6c:	0001883a 	nop
   24c70:	e037883a 	mov	sp,fp
   24c74:	dfc00117 	ldw	ra,4(sp)
   24c78:	df000017 	ldw	fp,0(sp)
   24c7c:	dec00204 	addi	sp,sp,8
   24c80:	f800283a 	ret

00024c84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24c84:	deffff04 	addi	sp,sp,-4
   24c88:	df000015 	stw	fp,0(sp)
   24c8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24c90:	0001883a 	nop
   24c94:	e037883a 	mov	sp,fp
   24c98:	df000017 	ldw	fp,0(sp)
   24c9c:	dec00104 	addi	sp,sp,4
   24ca0:	f800283a 	ret

00024ca4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24ca4:	defff904 	addi	sp,sp,-28
   24ca8:	dfc00615 	stw	ra,24(sp)
   24cac:	df000515 	stw	fp,20(sp)
   24cb0:	df000504 	addi	fp,sp,20
   24cb4:	e13ffc15 	stw	r4,-16(fp)
   24cb8:	e17ffd15 	stw	r5,-12(fp)
   24cbc:	e1bffe15 	stw	r6,-8(fp)
   24cc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24cc4:	e0800217 	ldw	r2,8(fp)
   24cc8:	d8800015 	stw	r2,0(sp)
   24ccc:	e1ffff17 	ldw	r7,-4(fp)
   24cd0:	e1bffe17 	ldw	r6,-8(fp)
   24cd4:	e17ffd17 	ldw	r5,-12(fp)
   24cd8:	e13ffc17 	ldw	r4,-16(fp)
   24cdc:	0024e540 	call	24e54 <alt_iic_isr_register>
}  
   24ce0:	e037883a 	mov	sp,fp
   24ce4:	dfc00117 	ldw	ra,4(sp)
   24ce8:	df000017 	ldw	fp,0(sp)
   24cec:	dec00204 	addi	sp,sp,8
   24cf0:	f800283a 	ret

00024cf4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24cf4:	defff904 	addi	sp,sp,-28
   24cf8:	df000615 	stw	fp,24(sp)
   24cfc:	df000604 	addi	fp,sp,24
   24d00:	e13ffe15 	stw	r4,-8(fp)
   24d04:	e17fff15 	stw	r5,-4(fp)
   24d08:	e0bfff17 	ldw	r2,-4(fp)
   24d0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24d10:	0005303a 	rdctl	r2,status
   24d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24d18:	e0fffb17 	ldw	r3,-20(fp)
   24d1c:	00bfff84 	movi	r2,-2
   24d20:	1884703a 	and	r2,r3,r2
   24d24:	1001703a 	wrctl	status,r2
  
  return context;
   24d28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24d2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24d30:	00c00044 	movi	r3,1
   24d34:	e0bffa17 	ldw	r2,-24(fp)
   24d38:	1884983a 	sll	r2,r3,r2
   24d3c:	1007883a 	mov	r3,r2
   24d40:	d0a01417 	ldw	r2,-32688(gp)
   24d44:	1884b03a 	or	r2,r3,r2
   24d48:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24d4c:	d0a01417 	ldw	r2,-32688(gp)
   24d50:	100170fa 	wrctl	ienable,r2
   24d54:	e0bffc17 	ldw	r2,-16(fp)
   24d58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24d5c:	e0bffd17 	ldw	r2,-12(fp)
   24d60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24d64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24d68:	0001883a 	nop
}
   24d6c:	e037883a 	mov	sp,fp
   24d70:	df000017 	ldw	fp,0(sp)
   24d74:	dec00104 	addi	sp,sp,4
   24d78:	f800283a 	ret

00024d7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24d7c:	defff904 	addi	sp,sp,-28
   24d80:	df000615 	stw	fp,24(sp)
   24d84:	df000604 	addi	fp,sp,24
   24d88:	e13ffe15 	stw	r4,-8(fp)
   24d8c:	e17fff15 	stw	r5,-4(fp)
   24d90:	e0bfff17 	ldw	r2,-4(fp)
   24d94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24d98:	0005303a 	rdctl	r2,status
   24d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24da0:	e0fffb17 	ldw	r3,-20(fp)
   24da4:	00bfff84 	movi	r2,-2
   24da8:	1884703a 	and	r2,r3,r2
   24dac:	1001703a 	wrctl	status,r2
  
  return context;
   24db0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24db4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24db8:	00c00044 	movi	r3,1
   24dbc:	e0bffa17 	ldw	r2,-24(fp)
   24dc0:	1884983a 	sll	r2,r3,r2
   24dc4:	0084303a 	nor	r2,zero,r2
   24dc8:	1007883a 	mov	r3,r2
   24dcc:	d0a01417 	ldw	r2,-32688(gp)
   24dd0:	1884703a 	and	r2,r3,r2
   24dd4:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24dd8:	d0a01417 	ldw	r2,-32688(gp)
   24ddc:	100170fa 	wrctl	ienable,r2
   24de0:	e0bffc17 	ldw	r2,-16(fp)
   24de4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24de8:	e0bffd17 	ldw	r2,-12(fp)
   24dec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24df0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24df4:	0001883a 	nop
}
   24df8:	e037883a 	mov	sp,fp
   24dfc:	df000017 	ldw	fp,0(sp)
   24e00:	dec00104 	addi	sp,sp,4
   24e04:	f800283a 	ret

00024e08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24e08:	defffc04 	addi	sp,sp,-16
   24e0c:	df000315 	stw	fp,12(sp)
   24e10:	df000304 	addi	fp,sp,12
   24e14:	e13ffe15 	stw	r4,-8(fp)
   24e18:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24e1c:	000530fa 	rdctl	r2,ienable
   24e20:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24e24:	00c00044 	movi	r3,1
   24e28:	e0bfff17 	ldw	r2,-4(fp)
   24e2c:	1884983a 	sll	r2,r3,r2
   24e30:	1007883a 	mov	r3,r2
   24e34:	e0bffd17 	ldw	r2,-12(fp)
   24e38:	1884703a 	and	r2,r3,r2
   24e3c:	1004c03a 	cmpne	r2,r2,zero
   24e40:	10803fcc 	andi	r2,r2,255
}
   24e44:	e037883a 	mov	sp,fp
   24e48:	df000017 	ldw	fp,0(sp)
   24e4c:	dec00104 	addi	sp,sp,4
   24e50:	f800283a 	ret

00024e54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24e54:	defff504 	addi	sp,sp,-44
   24e58:	dfc00a15 	stw	ra,40(sp)
   24e5c:	df000915 	stw	fp,36(sp)
   24e60:	df000904 	addi	fp,sp,36
   24e64:	e13ffc15 	stw	r4,-16(fp)
   24e68:	e17ffd15 	stw	r5,-12(fp)
   24e6c:	e1bffe15 	stw	r6,-8(fp)
   24e70:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24e74:	00bffa84 	movi	r2,-22
   24e78:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24e7c:	e0bffd17 	ldw	r2,-12(fp)
   24e80:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24e84:	e0bff817 	ldw	r2,-32(fp)
   24e88:	10800808 	cmpgei	r2,r2,32
   24e8c:	1000271e 	bne	r2,zero,24f2c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24e90:	0005303a 	rdctl	r2,status
   24e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e98:	e0fffb17 	ldw	r3,-20(fp)
   24e9c:	00bfff84 	movi	r2,-2
   24ea0:	1884703a 	and	r2,r3,r2
   24ea4:	1001703a 	wrctl	status,r2
  
  return context;
   24ea8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24eac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   24eb0:	00800134 	movhi	r2,4
   24eb4:	1086c504 	addi	r2,r2,6932
   24eb8:	e0fff817 	ldw	r3,-32(fp)
   24ebc:	180690fa 	slli	r3,r3,3
   24ec0:	10c5883a 	add	r2,r2,r3
   24ec4:	e0fffe17 	ldw	r3,-8(fp)
   24ec8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24ecc:	00800134 	movhi	r2,4
   24ed0:	1086c504 	addi	r2,r2,6932
   24ed4:	e0fff817 	ldw	r3,-32(fp)
   24ed8:	180690fa 	slli	r3,r3,3
   24edc:	10c5883a 	add	r2,r2,r3
   24ee0:	10800104 	addi	r2,r2,4
   24ee4:	e0ffff17 	ldw	r3,-4(fp)
   24ee8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24eec:	e0bffe17 	ldw	r2,-8(fp)
   24ef0:	10000526 	beq	r2,zero,24f08 <alt_iic_isr_register+0xb4>
   24ef4:	e0bff817 	ldw	r2,-32(fp)
   24ef8:	100b883a 	mov	r5,r2
   24efc:	e13ffc17 	ldw	r4,-16(fp)
   24f00:	0024cf40 	call	24cf4 <alt_ic_irq_enable>
   24f04:	00000406 	br	24f18 <alt_iic_isr_register+0xc4>
   24f08:	e0bff817 	ldw	r2,-32(fp)
   24f0c:	100b883a 	mov	r5,r2
   24f10:	e13ffc17 	ldw	r4,-16(fp)
   24f14:	0024d7c0 	call	24d7c <alt_ic_irq_disable>
   24f18:	e0bff715 	stw	r2,-36(fp)
   24f1c:	e0bffa17 	ldw	r2,-24(fp)
   24f20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f24:	e0bff917 	ldw	r2,-28(fp)
   24f28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24f2c:	e0bff717 	ldw	r2,-36(fp)
}
   24f30:	e037883a 	mov	sp,fp
   24f34:	dfc00117 	ldw	ra,4(sp)
   24f38:	df000017 	ldw	fp,0(sp)
   24f3c:	dec00204 	addi	sp,sp,8
   24f40:	f800283a 	ret

00024f44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24f44:	defff804 	addi	sp,sp,-32
   24f48:	dfc00715 	stw	ra,28(sp)
   24f4c:	df000615 	stw	fp,24(sp)
   24f50:	dc000515 	stw	r16,20(sp)
   24f54:	df000604 	addi	fp,sp,24
   24f58:	e13ffb15 	stw	r4,-20(fp)
   24f5c:	e17ffc15 	stw	r5,-16(fp)
   24f60:	e1bffd15 	stw	r6,-12(fp)
   24f64:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   24f68:	e1bffe17 	ldw	r6,-8(fp)
   24f6c:	e17ffd17 	ldw	r5,-12(fp)
   24f70:	e13ffc17 	ldw	r4,-16(fp)
   24f74:	00251cc0 	call	251cc <open>
   24f78:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24f7c:	e0bffa17 	ldw	r2,-24(fp)
   24f80:	10002216 	blt	r2,zero,2500c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24f84:	04000134 	movhi	r16,4
   24f88:	84022804 	addi	r16,r16,2208
   24f8c:	e0bffa17 	ldw	r2,-24(fp)
   24f90:	01400304 	movi	r5,12
   24f94:	1009883a 	mov	r4,r2
   24f98:	00203d40 	call	203d4 <__mulsi3>
   24f9c:	8085883a 	add	r2,r16,r2
   24fa0:	10c00017 	ldw	r3,0(r2)
   24fa4:	e0bffb17 	ldw	r2,-20(fp)
   24fa8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24fac:	04000134 	movhi	r16,4
   24fb0:	84022804 	addi	r16,r16,2208
   24fb4:	e0bffa17 	ldw	r2,-24(fp)
   24fb8:	01400304 	movi	r5,12
   24fbc:	1009883a 	mov	r4,r2
   24fc0:	00203d40 	call	203d4 <__mulsi3>
   24fc4:	8085883a 	add	r2,r16,r2
   24fc8:	10800104 	addi	r2,r2,4
   24fcc:	10c00017 	ldw	r3,0(r2)
   24fd0:	e0bffb17 	ldw	r2,-20(fp)
   24fd4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24fd8:	04000134 	movhi	r16,4
   24fdc:	84022804 	addi	r16,r16,2208
   24fe0:	e0bffa17 	ldw	r2,-24(fp)
   24fe4:	01400304 	movi	r5,12
   24fe8:	1009883a 	mov	r4,r2
   24fec:	00203d40 	call	203d4 <__mulsi3>
   24ff0:	8085883a 	add	r2,r16,r2
   24ff4:	10800204 	addi	r2,r2,8
   24ff8:	10c00017 	ldw	r3,0(r2)
   24ffc:	e0bffb17 	ldw	r2,-20(fp)
   25000:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25004:	e13ffa17 	ldw	r4,-24(fp)
   25008:	0023a840 	call	23a84 <alt_release_fd>
  }
} 
   2500c:	0001883a 	nop
   25010:	e6ffff04 	addi	sp,fp,-4
   25014:	dfc00217 	ldw	ra,8(sp)
   25018:	df000117 	ldw	fp,4(sp)
   2501c:	dc000017 	ldw	r16,0(sp)
   25020:	dec00304 	addi	sp,sp,12
   25024:	f800283a 	ret

00025028 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25028:	defffb04 	addi	sp,sp,-20
   2502c:	dfc00415 	stw	ra,16(sp)
   25030:	df000315 	stw	fp,12(sp)
   25034:	df000304 	addi	fp,sp,12
   25038:	e13ffd15 	stw	r4,-12(fp)
   2503c:	e17ffe15 	stw	r5,-8(fp)
   25040:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25044:	01c07fc4 	movi	r7,511
   25048:	01800044 	movi	r6,1
   2504c:	e17ffd17 	ldw	r5,-12(fp)
   25050:	01000134 	movhi	r4,4
   25054:	21022b04 	addi	r4,r4,2220
   25058:	0024f440 	call	24f44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2505c:	01c07fc4 	movi	r7,511
   25060:	000d883a 	mov	r6,zero
   25064:	e17ffe17 	ldw	r5,-8(fp)
   25068:	01000134 	movhi	r4,4
   2506c:	21022804 	addi	r4,r4,2208
   25070:	0024f440 	call	24f44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25074:	01c07fc4 	movi	r7,511
   25078:	01800044 	movi	r6,1
   2507c:	e17fff17 	ldw	r5,-4(fp)
   25080:	01000134 	movhi	r4,4
   25084:	21022e04 	addi	r4,r4,2232
   25088:	0024f440 	call	24f44 <alt_open_fd>
}  
   2508c:	0001883a 	nop
   25090:	e037883a 	mov	sp,fp
   25094:	dfc00117 	ldw	ra,4(sp)
   25098:	df000017 	ldw	fp,0(sp)
   2509c:	dec00204 	addi	sp,sp,8
   250a0:	f800283a 	ret

000250a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   250a4:	defffe04 	addi	sp,sp,-8
   250a8:	dfc00115 	stw	ra,4(sp)
   250ac:	df000015 	stw	fp,0(sp)
   250b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   250b4:	d0a00917 	ldw	r2,-32732(gp)
   250b8:	10000326 	beq	r2,zero,250c8 <alt_get_errno+0x24>
   250bc:	d0a00917 	ldw	r2,-32732(gp)
   250c0:	103ee83a 	callr	r2
   250c4:	00000106 	br	250cc <alt_get_errno+0x28>
   250c8:	d0a01304 	addi	r2,gp,-32692
}
   250cc:	e037883a 	mov	sp,fp
   250d0:	dfc00117 	ldw	ra,4(sp)
   250d4:	df000017 	ldw	fp,0(sp)
   250d8:	dec00204 	addi	sp,sp,8
   250dc:	f800283a 	ret

000250e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   250e0:	defffb04 	addi	sp,sp,-20
   250e4:	dfc00415 	stw	ra,16(sp)
   250e8:	df000315 	stw	fp,12(sp)
   250ec:	dc000215 	stw	r16,8(sp)
   250f0:	df000304 	addi	fp,sp,12
   250f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   250f8:	e0bffe17 	ldw	r2,-8(fp)
   250fc:	10800217 	ldw	r2,8(r2)
   25100:	10d00034 	orhi	r3,r2,16384
   25104:	e0bffe17 	ldw	r2,-8(fp)
   25108:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2510c:	e03ffd15 	stw	zero,-12(fp)
   25110:	00002306 	br	251a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25114:	04000134 	movhi	r16,4
   25118:	84022804 	addi	r16,r16,2208
   2511c:	e0bffd17 	ldw	r2,-12(fp)
   25120:	01400304 	movi	r5,12
   25124:	1009883a 	mov	r4,r2
   25128:	00203d40 	call	203d4 <__mulsi3>
   2512c:	8085883a 	add	r2,r16,r2
   25130:	10c00017 	ldw	r3,0(r2)
   25134:	e0bffe17 	ldw	r2,-8(fp)
   25138:	10800017 	ldw	r2,0(r2)
   2513c:	1880151e 	bne	r3,r2,25194 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25140:	04000134 	movhi	r16,4
   25144:	84022804 	addi	r16,r16,2208
   25148:	e0bffd17 	ldw	r2,-12(fp)
   2514c:	01400304 	movi	r5,12
   25150:	1009883a 	mov	r4,r2
   25154:	00203d40 	call	203d4 <__mulsi3>
   25158:	8085883a 	add	r2,r16,r2
   2515c:	10800204 	addi	r2,r2,8
   25160:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25164:	10000b0e 	bge	r2,zero,25194 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   25168:	01400304 	movi	r5,12
   2516c:	e13ffd17 	ldw	r4,-12(fp)
   25170:	00203d40 	call	203d4 <__mulsi3>
   25174:	1007883a 	mov	r3,r2
   25178:	00800134 	movhi	r2,4
   2517c:	10822804 	addi	r2,r2,2208
   25180:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25184:	e0bffe17 	ldw	r2,-8(fp)
   25188:	18800226 	beq	r3,r2,25194 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2518c:	00bffcc4 	movi	r2,-13
   25190:	00000806 	br	251b4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25194:	e0bffd17 	ldw	r2,-12(fp)
   25198:	10800044 	addi	r2,r2,1
   2519c:	e0bffd15 	stw	r2,-12(fp)
   251a0:	d0a00817 	ldw	r2,-32736(gp)
   251a4:	1007883a 	mov	r3,r2
   251a8:	e0bffd17 	ldw	r2,-12(fp)
   251ac:	18bfd92e 	bgeu	r3,r2,25114 <_gp+0xfffdb694>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   251b0:	0005883a 	mov	r2,zero
}
   251b4:	e6ffff04 	addi	sp,fp,-4
   251b8:	dfc00217 	ldw	ra,8(sp)
   251bc:	df000117 	ldw	fp,4(sp)
   251c0:	dc000017 	ldw	r16,0(sp)
   251c4:	dec00304 	addi	sp,sp,12
   251c8:	f800283a 	ret

000251cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   251cc:	defff604 	addi	sp,sp,-40
   251d0:	dfc00915 	stw	ra,36(sp)
   251d4:	df000815 	stw	fp,32(sp)
   251d8:	df000804 	addi	fp,sp,32
   251dc:	e13ffd15 	stw	r4,-12(fp)
   251e0:	e17ffe15 	stw	r5,-8(fp)
   251e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   251e8:	00bfffc4 	movi	r2,-1
   251ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   251f0:	00bffb44 	movi	r2,-19
   251f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   251f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   251fc:	d1600604 	addi	r5,gp,-32744
   25200:	e13ffd17 	ldw	r4,-12(fp)
   25204:	00254f00 	call	254f0 <alt_find_dev>
   25208:	e0bff815 	stw	r2,-32(fp)
   2520c:	e0bff817 	ldw	r2,-32(fp)
   25210:	1000051e 	bne	r2,zero,25228 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25214:	e13ffd17 	ldw	r4,-12(fp)
   25218:	00255800 	call	25580 <alt_find_file>
   2521c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25220:	00800044 	movi	r2,1
   25224:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25228:	e0bff817 	ldw	r2,-32(fp)
   2522c:	10002b26 	beq	r2,zero,252dc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25230:	e13ff817 	ldw	r4,-32(fp)
   25234:	00256880 	call	25688 <alt_get_fd>
   25238:	e0bff915 	stw	r2,-28(fp)
   2523c:	e0bff917 	ldw	r2,-28(fp)
   25240:	1000030e 	bge	r2,zero,25250 <open+0x84>
    {
      status = index;
   25244:	e0bff917 	ldw	r2,-28(fp)
   25248:	e0bffa15 	stw	r2,-24(fp)
   2524c:	00002506 	br	252e4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   25250:	01400304 	movi	r5,12
   25254:	e13ff917 	ldw	r4,-28(fp)
   25258:	00203d40 	call	203d4 <__mulsi3>
   2525c:	1007883a 	mov	r3,r2
   25260:	00800134 	movhi	r2,4
   25264:	10822804 	addi	r2,r2,2208
   25268:	1885883a 	add	r2,r3,r2
   2526c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25270:	e0fffe17 	ldw	r3,-8(fp)
   25274:	00900034 	movhi	r2,16384
   25278:	10bfffc4 	addi	r2,r2,-1
   2527c:	1886703a 	and	r3,r3,r2
   25280:	e0bffc17 	ldw	r2,-16(fp)
   25284:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25288:	e0bffb17 	ldw	r2,-20(fp)
   2528c:	1000051e 	bne	r2,zero,252a4 <open+0xd8>
   25290:	e13ffc17 	ldw	r4,-16(fp)
   25294:	00250e00 	call	250e0 <alt_file_locked>
   25298:	e0bffa15 	stw	r2,-24(fp)
   2529c:	e0bffa17 	ldw	r2,-24(fp)
   252a0:	10001016 	blt	r2,zero,252e4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   252a4:	e0bff817 	ldw	r2,-32(fp)
   252a8:	10800317 	ldw	r2,12(r2)
   252ac:	10000826 	beq	r2,zero,252d0 <open+0x104>
   252b0:	e0bff817 	ldw	r2,-32(fp)
   252b4:	10800317 	ldw	r2,12(r2)
   252b8:	e1ffff17 	ldw	r7,-4(fp)
   252bc:	e1bffe17 	ldw	r6,-8(fp)
   252c0:	e17ffd17 	ldw	r5,-12(fp)
   252c4:	e13ffc17 	ldw	r4,-16(fp)
   252c8:	103ee83a 	callr	r2
   252cc:	00000106 	br	252d4 <open+0x108>
   252d0:	0005883a 	mov	r2,zero
   252d4:	e0bffa15 	stw	r2,-24(fp)
   252d8:	00000206 	br	252e4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   252dc:	00bffb44 	movi	r2,-19
   252e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   252e4:	e0bffa17 	ldw	r2,-24(fp)
   252e8:	1000090e 	bge	r2,zero,25310 <open+0x144>
  {
    alt_release_fd (index);  
   252ec:	e13ff917 	ldw	r4,-28(fp)
   252f0:	0023a840 	call	23a84 <alt_release_fd>
    ALT_ERRNO = -status;
   252f4:	00250a40 	call	250a4 <alt_get_errno>
   252f8:	1007883a 	mov	r3,r2
   252fc:	e0bffa17 	ldw	r2,-24(fp)
   25300:	0085c83a 	sub	r2,zero,r2
   25304:	18800015 	stw	r2,0(r3)
    return -1;
   25308:	00bfffc4 	movi	r2,-1
   2530c:	00000106 	br	25314 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   25310:	e0bff917 	ldw	r2,-28(fp)
}
   25314:	e037883a 	mov	sp,fp
   25318:	dfc00117 	ldw	ra,4(sp)
   2531c:	df000017 	ldw	fp,0(sp)
   25320:	dec00204 	addi	sp,sp,8
   25324:	f800283a 	ret

00025328 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   25328:	defffa04 	addi	sp,sp,-24
   2532c:	df000515 	stw	fp,20(sp)
   25330:	df000504 	addi	fp,sp,20
   25334:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25338:	0005303a 	rdctl	r2,status
   2533c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25340:	e0fffc17 	ldw	r3,-16(fp)
   25344:	00bfff84 	movi	r2,-2
   25348:	1884703a 	and	r2,r3,r2
   2534c:	1001703a 	wrctl	status,r2
  
  return context;
   25350:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25354:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25358:	e0bfff17 	ldw	r2,-4(fp)
   2535c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25360:	e0bffd17 	ldw	r2,-12(fp)
   25364:	10800017 	ldw	r2,0(r2)
   25368:	e0fffd17 	ldw	r3,-12(fp)
   2536c:	18c00117 	ldw	r3,4(r3)
   25370:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25374:	e0bffd17 	ldw	r2,-12(fp)
   25378:	10800117 	ldw	r2,4(r2)
   2537c:	e0fffd17 	ldw	r3,-12(fp)
   25380:	18c00017 	ldw	r3,0(r3)
   25384:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25388:	e0bffd17 	ldw	r2,-12(fp)
   2538c:	e0fffd17 	ldw	r3,-12(fp)
   25390:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25394:	e0bffd17 	ldw	r2,-12(fp)
   25398:	e0fffd17 	ldw	r3,-12(fp)
   2539c:	10c00015 	stw	r3,0(r2)
   253a0:	e0bffb17 	ldw	r2,-20(fp)
   253a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   253a8:	e0bffe17 	ldw	r2,-8(fp)
   253ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   253b0:	0001883a 	nop
   253b4:	e037883a 	mov	sp,fp
   253b8:	df000017 	ldw	fp,0(sp)
   253bc:	dec00104 	addi	sp,sp,4
   253c0:	f800283a 	ret

000253c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   253c4:	defffb04 	addi	sp,sp,-20
   253c8:	dfc00415 	stw	ra,16(sp)
   253cc:	df000315 	stw	fp,12(sp)
   253d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   253d4:	d0a00c17 	ldw	r2,-32720(gp)
   253d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   253dc:	d0a01917 	ldw	r2,-32668(gp)
   253e0:	10800044 	addi	r2,r2,1
   253e4:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   253e8:	00002e06 	br	254a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   253ec:	e0bffd17 	ldw	r2,-12(fp)
   253f0:	10800017 	ldw	r2,0(r2)
   253f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   253f8:	e0bffd17 	ldw	r2,-12(fp)
   253fc:	10800403 	ldbu	r2,16(r2)
   25400:	10803fcc 	andi	r2,r2,255
   25404:	10000426 	beq	r2,zero,25418 <alt_tick+0x54>
   25408:	d0a01917 	ldw	r2,-32668(gp)
   2540c:	1000021e 	bne	r2,zero,25418 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   25410:	e0bffd17 	ldw	r2,-12(fp)
   25414:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   25418:	e0bffd17 	ldw	r2,-12(fp)
   2541c:	10800217 	ldw	r2,8(r2)
   25420:	d0e01917 	ldw	r3,-32668(gp)
   25424:	18801d36 	bltu	r3,r2,2549c <alt_tick+0xd8>
   25428:	e0bffd17 	ldw	r2,-12(fp)
   2542c:	10800403 	ldbu	r2,16(r2)
   25430:	10803fcc 	andi	r2,r2,255
   25434:	1000191e 	bne	r2,zero,2549c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   25438:	e0bffd17 	ldw	r2,-12(fp)
   2543c:	10800317 	ldw	r2,12(r2)
   25440:	e0fffd17 	ldw	r3,-12(fp)
   25444:	18c00517 	ldw	r3,20(r3)
   25448:	1809883a 	mov	r4,r3
   2544c:	103ee83a 	callr	r2
   25450:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25454:	e0bfff17 	ldw	r2,-4(fp)
   25458:	1000031e 	bne	r2,zero,25468 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2545c:	e13ffd17 	ldw	r4,-12(fp)
   25460:	00253280 	call	25328 <alt_alarm_stop>
   25464:	00000d06 	br	2549c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   25468:	e0bffd17 	ldw	r2,-12(fp)
   2546c:	10c00217 	ldw	r3,8(r2)
   25470:	e0bfff17 	ldw	r2,-4(fp)
   25474:	1887883a 	add	r3,r3,r2
   25478:	e0bffd17 	ldw	r2,-12(fp)
   2547c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   25480:	e0bffd17 	ldw	r2,-12(fp)
   25484:	10c00217 	ldw	r3,8(r2)
   25488:	d0a01917 	ldw	r2,-32668(gp)
   2548c:	1880032e 	bgeu	r3,r2,2549c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   25490:	e0bffd17 	ldw	r2,-12(fp)
   25494:	00c00044 	movi	r3,1
   25498:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2549c:	e0bffe17 	ldw	r2,-8(fp)
   254a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   254a4:	e0fffd17 	ldw	r3,-12(fp)
   254a8:	d0a00c04 	addi	r2,gp,-32720
   254ac:	18bfcf1e 	bne	r3,r2,253ec <_gp+0xfffdb96c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   254b0:	0001883a 	nop
}
   254b4:	0001883a 	nop
   254b8:	e037883a 	mov	sp,fp
   254bc:	dfc00117 	ldw	ra,4(sp)
   254c0:	df000017 	ldw	fp,0(sp)
   254c4:	dec00204 	addi	sp,sp,8
   254c8:	f800283a 	ret

000254cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   254cc:	deffff04 	addi	sp,sp,-4
   254d0:	df000015 	stw	fp,0(sp)
   254d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   254d8:	000170fa 	wrctl	ienable,zero
}
   254dc:	0001883a 	nop
   254e0:	e037883a 	mov	sp,fp
   254e4:	df000017 	ldw	fp,0(sp)
   254e8:	dec00104 	addi	sp,sp,4
   254ec:	f800283a 	ret

000254f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   254f0:	defffa04 	addi	sp,sp,-24
   254f4:	dfc00515 	stw	ra,20(sp)
   254f8:	df000415 	stw	fp,16(sp)
   254fc:	df000404 	addi	fp,sp,16
   25500:	e13ffe15 	stw	r4,-8(fp)
   25504:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25508:	e0bfff17 	ldw	r2,-4(fp)
   2550c:	10800017 	ldw	r2,0(r2)
   25510:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25514:	e13ffe17 	ldw	r4,-8(fp)
   25518:	00204d00 	call	204d0 <strlen>
   2551c:	10800044 	addi	r2,r2,1
   25520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25524:	00000d06 	br	2555c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25528:	e0bffc17 	ldw	r2,-16(fp)
   2552c:	10800217 	ldw	r2,8(r2)
   25530:	e0fffd17 	ldw	r3,-12(fp)
   25534:	180d883a 	mov	r6,r3
   25538:	e17ffe17 	ldw	r5,-8(fp)
   2553c:	1009883a 	mov	r4,r2
   25540:	00258340 	call	25834 <memcmp>
   25544:	1000021e 	bne	r2,zero,25550 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25548:	e0bffc17 	ldw	r2,-16(fp)
   2554c:	00000706 	br	2556c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25550:	e0bffc17 	ldw	r2,-16(fp)
   25554:	10800017 	ldw	r2,0(r2)
   25558:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2555c:	e0fffc17 	ldw	r3,-16(fp)
   25560:	e0bfff17 	ldw	r2,-4(fp)
   25564:	18bff01e 	bne	r3,r2,25528 <_gp+0xfffdbaa8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   25568:	0005883a 	mov	r2,zero
}
   2556c:	e037883a 	mov	sp,fp
   25570:	dfc00117 	ldw	ra,4(sp)
   25574:	df000017 	ldw	fp,0(sp)
   25578:	dec00204 	addi	sp,sp,8
   2557c:	f800283a 	ret

00025580 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25580:	defffb04 	addi	sp,sp,-20
   25584:	dfc00415 	stw	ra,16(sp)
   25588:	df000315 	stw	fp,12(sp)
   2558c:	df000304 	addi	fp,sp,12
   25590:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25594:	d0a00417 	ldw	r2,-32752(gp)
   25598:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2559c:	00003106 	br	25664 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   255a0:	e0bffd17 	ldw	r2,-12(fp)
   255a4:	10800217 	ldw	r2,8(r2)
   255a8:	1009883a 	mov	r4,r2
   255ac:	00204d00 	call	204d0 <strlen>
   255b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   255b4:	e0bffd17 	ldw	r2,-12(fp)
   255b8:	10c00217 	ldw	r3,8(r2)
   255bc:	e0bffe17 	ldw	r2,-8(fp)
   255c0:	10bfffc4 	addi	r2,r2,-1
   255c4:	1885883a 	add	r2,r3,r2
   255c8:	10800003 	ldbu	r2,0(r2)
   255cc:	10803fcc 	andi	r2,r2,255
   255d0:	1080201c 	xori	r2,r2,128
   255d4:	10bfe004 	addi	r2,r2,-128
   255d8:	10800bd8 	cmpnei	r2,r2,47
   255dc:	1000031e 	bne	r2,zero,255ec <alt_find_file+0x6c>
    {
      len -= 1;
   255e0:	e0bffe17 	ldw	r2,-8(fp)
   255e4:	10bfffc4 	addi	r2,r2,-1
   255e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   255ec:	e0bffe17 	ldw	r2,-8(fp)
   255f0:	e0ffff17 	ldw	r3,-4(fp)
   255f4:	1885883a 	add	r2,r3,r2
   255f8:	10800003 	ldbu	r2,0(r2)
   255fc:	10803fcc 	andi	r2,r2,255
   25600:	1080201c 	xori	r2,r2,128
   25604:	10bfe004 	addi	r2,r2,-128
   25608:	10800be0 	cmpeqi	r2,r2,47
   2560c:	1000081e 	bne	r2,zero,25630 <alt_find_file+0xb0>
   25610:	e0bffe17 	ldw	r2,-8(fp)
   25614:	e0ffff17 	ldw	r3,-4(fp)
   25618:	1885883a 	add	r2,r3,r2
   2561c:	10800003 	ldbu	r2,0(r2)
   25620:	10803fcc 	andi	r2,r2,255
   25624:	1080201c 	xori	r2,r2,128
   25628:	10bfe004 	addi	r2,r2,-128
   2562c:	10000a1e 	bne	r2,zero,25658 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25630:	e0bffd17 	ldw	r2,-12(fp)
   25634:	10800217 	ldw	r2,8(r2)
   25638:	e0fffe17 	ldw	r3,-8(fp)
   2563c:	180d883a 	mov	r6,r3
   25640:	e17fff17 	ldw	r5,-4(fp)
   25644:	1009883a 	mov	r4,r2
   25648:	00258340 	call	25834 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2564c:	1000021e 	bne	r2,zero,25658 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   25650:	e0bffd17 	ldw	r2,-12(fp)
   25654:	00000706 	br	25674 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25658:	e0bffd17 	ldw	r2,-12(fp)
   2565c:	10800017 	ldw	r2,0(r2)
   25660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25664:	e0fffd17 	ldw	r3,-12(fp)
   25668:	d0a00404 	addi	r2,gp,-32752
   2566c:	18bfcc1e 	bne	r3,r2,255a0 <_gp+0xfffdbb20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25670:	0005883a 	mov	r2,zero
}
   25674:	e037883a 	mov	sp,fp
   25678:	dfc00117 	ldw	ra,4(sp)
   2567c:	df000017 	ldw	fp,0(sp)
   25680:	dec00204 	addi	sp,sp,8
   25684:	f800283a 	ret

00025688 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25688:	defffa04 	addi	sp,sp,-24
   2568c:	dfc00515 	stw	ra,20(sp)
   25690:	df000415 	stw	fp,16(sp)
   25694:	dc000315 	stw	r16,12(sp)
   25698:	df000404 	addi	fp,sp,16
   2569c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   256a0:	00bffa04 	movi	r2,-24
   256a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   256a8:	e03ffc15 	stw	zero,-16(fp)
   256ac:	00001d06 	br	25724 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   256b0:	04000134 	movhi	r16,4
   256b4:	84022804 	addi	r16,r16,2208
   256b8:	e0bffc17 	ldw	r2,-16(fp)
   256bc:	01400304 	movi	r5,12
   256c0:	1009883a 	mov	r4,r2
   256c4:	00203d40 	call	203d4 <__mulsi3>
   256c8:	8085883a 	add	r2,r16,r2
   256cc:	10800017 	ldw	r2,0(r2)
   256d0:	1000111e 	bne	r2,zero,25718 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   256d4:	04000134 	movhi	r16,4
   256d8:	84022804 	addi	r16,r16,2208
   256dc:	e0bffc17 	ldw	r2,-16(fp)
   256e0:	01400304 	movi	r5,12
   256e4:	1009883a 	mov	r4,r2
   256e8:	00203d40 	call	203d4 <__mulsi3>
   256ec:	8085883a 	add	r2,r16,r2
   256f0:	e0fffe17 	ldw	r3,-8(fp)
   256f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   256f8:	d0e00817 	ldw	r3,-32736(gp)
   256fc:	e0bffc17 	ldw	r2,-16(fp)
   25700:	1880020e 	bge	r3,r2,2570c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   25704:	e0bffc17 	ldw	r2,-16(fp)
   25708:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   2570c:	e0bffc17 	ldw	r2,-16(fp)
   25710:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25714:	00000606 	br	25730 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25718:	e0bffc17 	ldw	r2,-16(fp)
   2571c:	10800044 	addi	r2,r2,1
   25720:	e0bffc15 	stw	r2,-16(fp)
   25724:	e0bffc17 	ldw	r2,-16(fp)
   25728:	10800810 	cmplti	r2,r2,32
   2572c:	103fe01e 	bne	r2,zero,256b0 <_gp+0xfffdbc30>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25730:	e0bffd17 	ldw	r2,-12(fp)
}
   25734:	e6ffff04 	addi	sp,fp,-4
   25738:	dfc00217 	ldw	ra,8(sp)
   2573c:	df000117 	ldw	fp,4(sp)
   25740:	dc000017 	ldw	r16,0(sp)
   25744:	dec00304 	addi	sp,sp,12
   25748:	f800283a 	ret

0002574c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2574c:	defffe04 	addi	sp,sp,-8
   25750:	df000115 	stw	fp,4(sp)
   25754:	df000104 	addi	fp,sp,4
   25758:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2575c:	e0bfff17 	ldw	r2,-4(fp)
   25760:	10bffe84 	addi	r2,r2,-6
   25764:	10c00428 	cmpgeui	r3,r2,16
   25768:	18001a1e 	bne	r3,zero,257d4 <alt_exception_cause_generated_bad_addr+0x88>
   2576c:	100690ba 	slli	r3,r2,2
   25770:	008000b4 	movhi	r2,2
   25774:	1095e104 	addi	r2,r2,22404
   25778:	1885883a 	add	r2,r3,r2
   2577c:	10800017 	ldw	r2,0(r2)
   25780:	1000683a 	jmp	r2
   25784:	000257c4 	movi	zero,2399
   25788:	000257c4 	movi	zero,2399
   2578c:	000257d4 	movui	zero,2399
   25790:	000257d4 	movui	zero,2399
   25794:	000257d4 	movui	zero,2399
   25798:	000257c4 	movi	zero,2399
   2579c:	000257cc 	andi	zero,zero,2399
   257a0:	000257d4 	movui	zero,2399
   257a4:	000257c4 	movi	zero,2399
   257a8:	000257c4 	movi	zero,2399
   257ac:	000257d4 	movui	zero,2399
   257b0:	000257c4 	movi	zero,2399
   257b4:	000257cc 	andi	zero,zero,2399
   257b8:	000257d4 	movui	zero,2399
   257bc:	000257d4 	movui	zero,2399
   257c0:	000257c4 	movi	zero,2399
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   257c4:	00800044 	movi	r2,1
   257c8:	00000306 	br	257d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   257cc:	0005883a 	mov	r2,zero
   257d0:	00000106 	br	257d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   257d4:	0005883a 	mov	r2,zero
  }
}
   257d8:	e037883a 	mov	sp,fp
   257dc:	df000017 	ldw	fp,0(sp)
   257e0:	dec00104 	addi	sp,sp,4
   257e4:	f800283a 	ret

000257e8 <atexit>:
   257e8:	200b883a 	mov	r5,r4
   257ec:	000f883a 	mov	r7,zero
   257f0:	000d883a 	mov	r6,zero
   257f4:	0009883a 	mov	r4,zero
   257f8:	00258b01 	jmpi	258b0 <__register_exitproc>

000257fc <exit>:
   257fc:	defffe04 	addi	sp,sp,-8
   25800:	000b883a 	mov	r5,zero
   25804:	dc000015 	stw	r16,0(sp)
   25808:	dfc00115 	stw	ra,4(sp)
   2580c:	2021883a 	mov	r16,r4
   25810:	00259c80 	call	259c8 <__call_exitprocs>
   25814:	00800134 	movhi	r2,4
   25818:	1086a004 	addi	r2,r2,6784
   2581c:	11000017 	ldw	r4,0(r2)
   25820:	20800f17 	ldw	r2,60(r4)
   25824:	10000126 	beq	r2,zero,2582c <exit+0x30>
   25828:	103ee83a 	callr	r2
   2582c:	8009883a 	mov	r4,r16
   25830:	0025b480 	call	25b48 <_exit>

00025834 <memcmp>:
   25834:	01c000c4 	movi	r7,3
   25838:	3980192e 	bgeu	r7,r6,258a0 <memcmp+0x6c>
   2583c:	2144b03a 	or	r2,r4,r5
   25840:	11c4703a 	and	r2,r2,r7
   25844:	10000f26 	beq	r2,zero,25884 <memcmp+0x50>
   25848:	20800003 	ldbu	r2,0(r4)
   2584c:	28c00003 	ldbu	r3,0(r5)
   25850:	10c0151e 	bne	r2,r3,258a8 <memcmp+0x74>
   25854:	31bfff84 	addi	r6,r6,-2
   25858:	01ffffc4 	movi	r7,-1
   2585c:	00000406 	br	25870 <memcmp+0x3c>
   25860:	20800003 	ldbu	r2,0(r4)
   25864:	28c00003 	ldbu	r3,0(r5)
   25868:	31bfffc4 	addi	r6,r6,-1
   2586c:	10c00e1e 	bne	r2,r3,258a8 <memcmp+0x74>
   25870:	21000044 	addi	r4,r4,1
   25874:	29400044 	addi	r5,r5,1
   25878:	31fff91e 	bne	r6,r7,25860 <_gp+0xfffdbde0>
   2587c:	0005883a 	mov	r2,zero
   25880:	f800283a 	ret
   25884:	20c00017 	ldw	r3,0(r4)
   25888:	28800017 	ldw	r2,0(r5)
   2588c:	18bfee1e 	bne	r3,r2,25848 <_gp+0xfffdbdc8>
   25890:	31bfff04 	addi	r6,r6,-4
   25894:	21000104 	addi	r4,r4,4
   25898:	29400104 	addi	r5,r5,4
   2589c:	39bff936 	bltu	r7,r6,25884 <_gp+0xfffdbe04>
   258a0:	303fe91e 	bne	r6,zero,25848 <_gp+0xfffdbdc8>
   258a4:	003ff506 	br	2587c <_gp+0xfffdbdfc>
   258a8:	10c5c83a 	sub	r2,r2,r3
   258ac:	f800283a 	ret

000258b0 <__register_exitproc>:
   258b0:	defffa04 	addi	sp,sp,-24
   258b4:	dc000315 	stw	r16,12(sp)
   258b8:	04000134 	movhi	r16,4
   258bc:	8406a004 	addi	r16,r16,6784
   258c0:	80c00017 	ldw	r3,0(r16)
   258c4:	dc400415 	stw	r17,16(sp)
   258c8:	dfc00515 	stw	ra,20(sp)
   258cc:	18805217 	ldw	r2,328(r3)
   258d0:	2023883a 	mov	r17,r4
   258d4:	10003726 	beq	r2,zero,259b4 <__register_exitproc+0x104>
   258d8:	10c00117 	ldw	r3,4(r2)
   258dc:	010007c4 	movi	r4,31
   258e0:	20c00e16 	blt	r4,r3,2591c <__register_exitproc+0x6c>
   258e4:	1a000044 	addi	r8,r3,1
   258e8:	8800221e 	bne	r17,zero,25974 <__register_exitproc+0xc4>
   258ec:	18c00084 	addi	r3,r3,2
   258f0:	18c7883a 	add	r3,r3,r3
   258f4:	18c7883a 	add	r3,r3,r3
   258f8:	12000115 	stw	r8,4(r2)
   258fc:	10c7883a 	add	r3,r2,r3
   25900:	19400015 	stw	r5,0(r3)
   25904:	0005883a 	mov	r2,zero
   25908:	dfc00517 	ldw	ra,20(sp)
   2590c:	dc400417 	ldw	r17,16(sp)
   25910:	dc000317 	ldw	r16,12(sp)
   25914:	dec00604 	addi	sp,sp,24
   25918:	f800283a 	ret
   2591c:	00800034 	movhi	r2,0
   25920:	10800004 	addi	r2,r2,0
   25924:	10002626 	beq	r2,zero,259c0 <__register_exitproc+0x110>
   25928:	01006404 	movi	r4,400
   2592c:	d9400015 	stw	r5,0(sp)
   25930:	d9800115 	stw	r6,4(sp)
   25934:	d9c00215 	stw	r7,8(sp)
   25938:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   2593c:	d9400017 	ldw	r5,0(sp)
   25940:	d9800117 	ldw	r6,4(sp)
   25944:	d9c00217 	ldw	r7,8(sp)
   25948:	10001d26 	beq	r2,zero,259c0 <__register_exitproc+0x110>
   2594c:	81000017 	ldw	r4,0(r16)
   25950:	10000115 	stw	zero,4(r2)
   25954:	02000044 	movi	r8,1
   25958:	22405217 	ldw	r9,328(r4)
   2595c:	0007883a 	mov	r3,zero
   25960:	12400015 	stw	r9,0(r2)
   25964:	20805215 	stw	r2,328(r4)
   25968:	10006215 	stw	zero,392(r2)
   2596c:	10006315 	stw	zero,396(r2)
   25970:	883fde26 	beq	r17,zero,258ec <_gp+0xfffdbe6c>
   25974:	18c9883a 	add	r4,r3,r3
   25978:	2109883a 	add	r4,r4,r4
   2597c:	1109883a 	add	r4,r2,r4
   25980:	21802215 	stw	r6,136(r4)
   25984:	01800044 	movi	r6,1
   25988:	12406217 	ldw	r9,392(r2)
   2598c:	30cc983a 	sll	r6,r6,r3
   25990:	4992b03a 	or	r9,r9,r6
   25994:	12406215 	stw	r9,392(r2)
   25998:	21c04215 	stw	r7,264(r4)
   2599c:	01000084 	movi	r4,2
   259a0:	893fd21e 	bne	r17,r4,258ec <_gp+0xfffdbe6c>
   259a4:	11006317 	ldw	r4,396(r2)
   259a8:	218cb03a 	or	r6,r4,r6
   259ac:	11806315 	stw	r6,396(r2)
   259b0:	003fce06 	br	258ec <_gp+0xfffdbe6c>
   259b4:	18805304 	addi	r2,r3,332
   259b8:	18805215 	stw	r2,328(r3)
   259bc:	003fc606 	br	258d8 <_gp+0xfffdbe58>
   259c0:	00bfffc4 	movi	r2,-1
   259c4:	003fd006 	br	25908 <_gp+0xfffdbe88>

000259c8 <__call_exitprocs>:
   259c8:	defff504 	addi	sp,sp,-44
   259cc:	df000915 	stw	fp,36(sp)
   259d0:	dd400615 	stw	r21,24(sp)
   259d4:	dc800315 	stw	r18,12(sp)
   259d8:	dfc00a15 	stw	ra,40(sp)
   259dc:	ddc00815 	stw	r23,32(sp)
   259e0:	dd800715 	stw	r22,28(sp)
   259e4:	dd000515 	stw	r20,20(sp)
   259e8:	dcc00415 	stw	r19,16(sp)
   259ec:	dc400215 	stw	r17,8(sp)
   259f0:	dc000115 	stw	r16,4(sp)
   259f4:	d9000015 	stw	r4,0(sp)
   259f8:	2839883a 	mov	fp,r5
   259fc:	04800044 	movi	r18,1
   25a00:	057fffc4 	movi	r21,-1
   25a04:	00800134 	movhi	r2,4
   25a08:	1086a004 	addi	r2,r2,6784
   25a0c:	12000017 	ldw	r8,0(r2)
   25a10:	45005217 	ldw	r20,328(r8)
   25a14:	44c05204 	addi	r19,r8,328
   25a18:	a0001c26 	beq	r20,zero,25a8c <__call_exitprocs+0xc4>
   25a1c:	a0800117 	ldw	r2,4(r20)
   25a20:	15ffffc4 	addi	r23,r2,-1
   25a24:	b8000d16 	blt	r23,zero,25a5c <__call_exitprocs+0x94>
   25a28:	14000044 	addi	r16,r2,1
   25a2c:	8421883a 	add	r16,r16,r16
   25a30:	8421883a 	add	r16,r16,r16
   25a34:	84402004 	addi	r17,r16,128
   25a38:	a463883a 	add	r17,r20,r17
   25a3c:	a421883a 	add	r16,r20,r16
   25a40:	e0001e26 	beq	fp,zero,25abc <__call_exitprocs+0xf4>
   25a44:	80804017 	ldw	r2,256(r16)
   25a48:	e0801c26 	beq	fp,r2,25abc <__call_exitprocs+0xf4>
   25a4c:	bdffffc4 	addi	r23,r23,-1
   25a50:	843fff04 	addi	r16,r16,-4
   25a54:	8c7fff04 	addi	r17,r17,-4
   25a58:	bd7ff91e 	bne	r23,r21,25a40 <_gp+0xfffdbfc0>
   25a5c:	00800034 	movhi	r2,0
   25a60:	10800004 	addi	r2,r2,0
   25a64:	10000926 	beq	r2,zero,25a8c <__call_exitprocs+0xc4>
   25a68:	a0800117 	ldw	r2,4(r20)
   25a6c:	1000301e 	bne	r2,zero,25b30 <__call_exitprocs+0x168>
   25a70:	a0800017 	ldw	r2,0(r20)
   25a74:	10003226 	beq	r2,zero,25b40 <__call_exitprocs+0x178>
   25a78:	a009883a 	mov	r4,r20
   25a7c:	98800015 	stw	r2,0(r19)
   25a80:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   25a84:	9d000017 	ldw	r20,0(r19)
   25a88:	a03fe41e 	bne	r20,zero,25a1c <_gp+0xfffdbf9c>
   25a8c:	dfc00a17 	ldw	ra,40(sp)
   25a90:	df000917 	ldw	fp,36(sp)
   25a94:	ddc00817 	ldw	r23,32(sp)
   25a98:	dd800717 	ldw	r22,28(sp)
   25a9c:	dd400617 	ldw	r21,24(sp)
   25aa0:	dd000517 	ldw	r20,20(sp)
   25aa4:	dcc00417 	ldw	r19,16(sp)
   25aa8:	dc800317 	ldw	r18,12(sp)
   25aac:	dc400217 	ldw	r17,8(sp)
   25ab0:	dc000117 	ldw	r16,4(sp)
   25ab4:	dec00b04 	addi	sp,sp,44
   25ab8:	f800283a 	ret
   25abc:	a0800117 	ldw	r2,4(r20)
   25ac0:	80c00017 	ldw	r3,0(r16)
   25ac4:	10bfffc4 	addi	r2,r2,-1
   25ac8:	15c01426 	beq	r2,r23,25b1c <__call_exitprocs+0x154>
   25acc:	80000015 	stw	zero,0(r16)
   25ad0:	183fde26 	beq	r3,zero,25a4c <_gp+0xfffdbfcc>
   25ad4:	95c8983a 	sll	r4,r18,r23
   25ad8:	a0806217 	ldw	r2,392(r20)
   25adc:	a5800117 	ldw	r22,4(r20)
   25ae0:	2084703a 	and	r2,r4,r2
   25ae4:	10000b26 	beq	r2,zero,25b14 <__call_exitprocs+0x14c>
   25ae8:	a0806317 	ldw	r2,396(r20)
   25aec:	2088703a 	and	r4,r4,r2
   25af0:	20000c1e 	bne	r4,zero,25b24 <__call_exitprocs+0x15c>
   25af4:	89400017 	ldw	r5,0(r17)
   25af8:	d9000017 	ldw	r4,0(sp)
   25afc:	183ee83a 	callr	r3
   25b00:	a0800117 	ldw	r2,4(r20)
   25b04:	15bfbf1e 	bne	r2,r22,25a04 <_gp+0xfffdbf84>
   25b08:	98800017 	ldw	r2,0(r19)
   25b0c:	153fcf26 	beq	r2,r20,25a4c <_gp+0xfffdbfcc>
   25b10:	003fbc06 	br	25a04 <_gp+0xfffdbf84>
   25b14:	183ee83a 	callr	r3
   25b18:	003ff906 	br	25b00 <_gp+0xfffdc080>
   25b1c:	a5c00115 	stw	r23,4(r20)
   25b20:	003feb06 	br	25ad0 <_gp+0xfffdc050>
   25b24:	89000017 	ldw	r4,0(r17)
   25b28:	183ee83a 	callr	r3
   25b2c:	003ff406 	br	25b00 <_gp+0xfffdc080>
   25b30:	a0800017 	ldw	r2,0(r20)
   25b34:	a027883a 	mov	r19,r20
   25b38:	1029883a 	mov	r20,r2
   25b3c:	003fb606 	br	25a18 <_gp+0xfffdbf98>
   25b40:	0005883a 	mov	r2,zero
   25b44:	003ffb06 	br	25b34 <_gp+0xfffdc0b4>

00025b48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25b48:	defffd04 	addi	sp,sp,-12
   25b4c:	df000215 	stw	fp,8(sp)
   25b50:	df000204 	addi	fp,sp,8
   25b54:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25b58:	0001883a 	nop
   25b5c:	e0bfff17 	ldw	r2,-4(fp)
   25b60:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25b64:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25b68:	10000226 	beq	r2,zero,25b74 <_exit+0x2c>
    ALT_SIM_FAIL();
   25b6c:	002af070 	cmpltui	zero,zero,43969
   25b70:	00000106 	br	25b78 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25b74:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25b78:	003fff06 	br	25b78 <_gp+0xfffdc0f8>
